<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/**
 * Base class for mock objects (UnitTestStorage, UnitTestPlatform and UnitTestPhpVm) that provides
 * an easy way to specify the replies for a call sequence.
 *
 * To mock up an individual class, extend MockObject and then mimic the API that you want to mock.
 * The body of each mimicked method should contain a call to MockObject::_makeReply, like this:
 *
 *
 *
 *  function describeMap($mapName, $tryAllModules=false) {
 *      return $this->_makeReply('describeMap', array($mapName, $tryAllModules));
 *
 *
 *  }
 *
 * @package Gallery
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class MockObject {
	/* deprecated dynamic properties in php 8.2 */
	public $_called;
	public $_className;

	public function __construct() {
		$this->_className        = get_class($this);
		$_GET[$this->_className] = array(
			'replies'    => array(),
			'errorCount' => 0,
		);
	}

	public function setReply($function, $inputs, $outputs, $optional = false) {
		$_GET[$this->_className]['replies'][] = array($function, $inputs, $outputs, $optional);
	}

	public function isComplete() {
		foreach ($_GET[$this->_className]['replies'] as $reply) {
			if (!$reply[3]) {
				// ignore optional replies
				$incomplete = true;

				break;
			}
		}

		return empty($incomplete) && !$_GET[$this->_className]['errorCount'];
	}

	public function getRemaining() {
		return 'Error count: ' . $_GET[$this->_className]['errorCount']
		. "\nRemaining requests: <pre>"
		. print_r($_GET[$this->_className]['replies'], true)
	    	."</pre>";
	}

	public function _makeReply($function, $request) {
		while ($expected = array_shift($_GET[$this->_className]['replies'])) {
			if (($expected[0] == $function) && ($this->_parametersMatch($expected[1], $request))) {
				$this->_called[$function][] = $request;

				return $expected[2];
			}

			if (!$expected[3]) {
				// Not optional -- error
				break;
			}
		}

		$_GET[$this->_className]['errorCount']++;

		$ret = GalleryCoreApi::error(ERROR_UNKNOWN, null, null, 'Unhandled reply in MockObject');

		echo '<br/><br/>' . $ret->getAsHtml();
		printf(
			'<br/><b>Mismatch At</b>: %s<br/>',
			htmlspecialchars(
				GalleryTestCase::DeepCompare(
					$request,
					$expected[1]
				)
			)
		);

		printf(
			"Expected:<br/>\nFunction: <b>%s</b><br/>\nRequest: <pre>%s</pre><br/>\n",
			$expected[0],
			print_r($expected[1], true)
		);

		printf(
			"Received:<br/>\nFunction: <b>%s</b><br/>\nRequest: <pre>%s</pre><br/>\n",
			$function,
			print_r($request, true)
		);
	}

	public function getCalled($function) {
		return $this->_called[$function];
	}

	public function _parametersMatch($expected, $actual) {
		if ($expected === '*') {
			return true;
		}

		$i = 0;

		foreach ($expected as $key => $value) {
			if ($i > count($actual)) {
				return false;
			}

			if (!strncmp($key, 'fuzzy', 5)) {
				if (!preg_match($value, $actual[$i++])) {
					return false;
				}
			} elseif ($value != $actual[$i++]) {
				return false;
			}
		}

		return $i == count($actual);
	}
}
