<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * AddToCart controller tests
 * @package Cart
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class AddToCartControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_saveCartItemCounts;

	public function __construct($methodName) {
		parent::__construct($methodName, 'cart.AddToCart');
	}

	public function setUp($x1 = null) {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// create an album to hold all of the test items
		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_album);

		$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());

		if ($ret) {
			return $ret;
		}
		$ret               = GalleryCoreApi::addUserPermission(
			$this->_album->getId(),
			$this->_userId = $gallery->getActiveUserId(),
			'core.all'
		);

		if ($ret) {
			return $ret;
		}

		// Save the existing cart
		list($ret, $this->_saveCartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}

		$cartItemCounts = array(
			1 => 3,
			2 => 3,
		);
		$ret            = CartHelper::setCartItemCounts($cartItemCounts);

		if ($ret) {
			return $ret;
		}
	}

	public function tearDown() {
		// Restore the existing cart
		$ret = CartHelper::setCartItemCounts($this->_saveCartItemCounts);

		if ($ret) {
			$this->failWithStatus($ret);
		}

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testAddItem() {
		// Create a test item
		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'cart.ViewCart',
					'itemId' => $item->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		// Verify our cart
		list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				1              => 3,
				2              => 3,
				$item->getId() => 1,
			),
			$cartItemCounts
		);
	}

	public function testAddAlbum() {
		// Create two test items
		for ($i = 0; $i < 2; $i++) {
			list($ret, $item[$i]) = $this->_createRandomDataItem($this->_album->getId());

			if ($ret) {
				return $ret;
			}
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'cart.ViewCart',
					'itemId' => $this->_album->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		// Verify our cart
		list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				1                 => 3,
				2                 => 3,
				$item[0]->getId() => 1,
				$item[1]->getId() => 1,
			),
			$cartItemCounts
		);
	}

	public function testAddDuplicateItem() {
		// Create a test item
		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		// Put the item in the cart
		$ret = CartHelper::setCartItemCounts(
			array(
				$item->getId() => 1,
			)
		);

		if ($ret) {
			return $ret;
		}

		// Perform the request and verify that we succeeded
		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'cart.ViewCart',
					'itemId' => $item->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		// Verify our cart
		list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$item->getId() => 2,
			),
			$cartItemCounts
		);
	}

	public function testAddDuplicateAlbum() {
		// Create two test items
		for ($i = 0; $i < 2; $i++) {
			list($ret, $item[$i]) = $this->_createRandomDataItem($this->_album->getId());

			if ($ret) {
				return $ret;
			}
		}

		// Put the items in the cart
		$ret = CartHelper::setCartItemCounts(
			array(
				$item[0]->getId() => 1,
				$item[1]->getId() => 1,
			)
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'cart.ViewCart',
					'itemId' => $this->_album->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		// Verify our cart
		list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$item[0]->getId() => 2,
				$item[1]->getId() => 2,
			),
			$cartItemCounts
		);
	}

	public function testAddNoViewPermissionItem() {
		// Create a test item
		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::removeUserPermission($item->getId(), $this->_userId, 'core.viewAll');

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		// Perform the request and verify that we failed
		$results = $this->handleRequest(ERROR_MISSING_OBJECT);

		// Verify our cart
		list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(
			array(
				1 => 3,
				2 => 3,
			),
			$cartItemCounts
		);
	}

	public function testAddNoCartPermissionItem() {
		// Create a test item
		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::removeUserPermission($item->getId(), $this->_userId, 'cart.add');

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'cart.ViewCart',
					'itemId' => $item->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		// Verify our cart
		list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(
			array(
				1 => 3,
				2 => 3,
			),
			$cartItemCounts
		);
	}

	public function testAddAlbumWithNoViewPermissionItem() {
		// Create test items
		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::removeUserPermission($item->getId(), $this->_userId, 'core.viewAll');

		if ($ret) {
			return $ret;
		}
		list($ret, $item2) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'cart.ViewCart',
					'itemId' => $this->_album->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		// Verify our cart - one item added, no permission item skipped
		list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(
			array(
				1               => 3,
				2               => 3,
				$item2->getId() => 1,
			),
			$cartItemCounts
		);
	}

	public function testAddAlbumWithNoCartPermissionItem() {
		// Create test items
		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::removeUserPermission($item->getId(), $this->_userId, 'cart.add');

		if ($ret) {
			return $ret;
		}
		list($ret, $item2) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'cart.ViewCart',
					'itemId' => $this->_album->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		// Verify our cart - one item added, no permission item skipped
		list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(
			array(
				1               => 3,
				2               => 3,
				$item2->getId() => 1,
			),
			$cartItemCounts
		);
	}
}
