<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Mod Rewrite Parser tests
 *
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 * @version $Revision: 17580 $
 */
GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteHelper.class');
GalleryCoreApi::requireOnce('modules/rewrite/classes/parsers/modrewrite/parser.inc');
GalleryCoreApi::requireOnce('modules/rewrite/test/phpunit/RewriteParserTestCase.class');
class ModRewriteParserTest extends RewriteParserTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_fileContent;
	public $_embeddedFileContent;
	public $_parser;
	public $_testPassString;

	public function __construct($methodName) {
		parent::__construct($methodName, null);
	}

	public function setUp($x1 = null) {
		global $gallery;
		$ret = parent::setUp('ModRewriteParser');

		if ($ret) {
			return $ret;
		}

		// Set up our environment
		foreach (array(
			'modrewrite.status'           => serialize(
				array(
					'needOptions' => true,
				)
			),
			'modrewrite.galleryLocation'  => '/gallery2/',
			'modrewrite.embeddedHtaccess' => '/phpunit/embedded',
			'modrewrite.embeddedLocation' => '/embedded/',
		) as $key => $value) {
			$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', $key, $value);

			if ($ret) {
				return $ret;
			}
		}

		$this->_testPassString = 'PASS_REWRITE';
	}

	public function testSaveActiveRulesEmbedded() {
		GalleryDataCache::put('G2_EMBED', 1, true);
		$testRules['rewriteparsermock'][0] = 'bogus1';
		list($ret, $code, $errno)          = $this->_parser->saveActiveRules(
			$testRules,
			null
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'activeRules'
		);

		if ($ret) {
			return $ret;
		}

		$expected['rewriteparsermock'][0] = 'bogus1';
		$this->assertTrue(true, REWRITE_STATUS_OK == $code, 'OK Status');
		$this->assertTrue(true, null == $errno, 'Null Err No');
		$this->assertTrue(true, $expected == unserialize($activeRules), 'activeRules');
		$this->assertTrue(true, !empty($this->_fileContent), 'fileContent');
		$this->assertTrue(true, !empty($this->_embeddedFileContent), 'embeddedFileContent');

		GalleryDataCache::remove('G2_EMBED');
	}

	public function testSaveBadActiveRulesEmbedded() {
		GalleryDataCache::put('G2_EMBED', 1, true);
		$testRules['rewriteparsermock'][0] = array(
			'pattern' => 'p/%bogus%',
		);
		list($ret, $code, $errno)          = $this->_parser->saveActiveRules(
			$testRules
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'activeRules'
		);

		if ($ret) {
			return $ret;
		}

		$expected['rewriteparsermock'][0] = array(
			'pattern' => 'bogus',
		);
		$this->assertEquals(REWRITE_STATUS_BAD_KEYWORD, $code);
		$this->assertEquals(array('rewriteparsermock', 0), $errno);
		$this->assertEquals($expected, unserialize($activeRules));
		$this->assertTrue(!isset($this->_fileContent), 'fileContent');
		$this->assertTrue(!isset($this->_embeddedFileContent), 'embeddedFileContent');

		GalleryDataCache::remove('G2_EMBED');
	}

	public function testSaveAccessList() {
		$accessList       = array('phpunit.test1', 'phpunit.test2');
		$ourParser        = $this->_parser;
		list($ret, $code) = $ourParser->saveAccessList($accessList, true);

		if ($ret) {
			return array($ret, null, null);
		}

		list($ret, $savedList) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'accessList'
		);

		if ($ret) {
			return array($ret, null, null);
		}

		list($ret, $allowEmptyReferer) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'allowEmptyReferer'
		);

		if ($ret) {
			return array($ret, null, null);
		}

		$this->assertEquals(REWRITE_STATUS_OK, $code);
		$this->assertEquals($accessList, unserialize($savedList));
		$this->assertEquals('1', $allowEmptyReferer);
		$this->assertTrue(!empty($this->_fileContent), 'fileContent');
		$this->assertTrue(!isset($this->_embeddedFileContent), 'embeddedFileContent');
	}

	public function testSaveAccessListEmbedded() {
		GalleryDataCache::put('G2_EMBED', 1, true);
		$accessList       = array('phpunit.test1', 'phpunit.test2');
		$ourParser        = $this->_parser;
		list($ret, $code) = $ourParser->saveAccessList($accessList, false, $ourParser);

		if ($ret) {
			return array($ret, null, null);
		}

		list($ret, $savedList) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'accessList'
		);

		if ($ret) {
			return array($ret, null, null);
		}

		list($ret, $allowEmptyReferer) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'allowEmptyReferer'
		);

		if ($ret) {
			return array($ret, null, null);
		}

		$this->assertEquals(REWRITE_STATUS_OK, $code);
		$this->assertEquals($accessList, unserialize($savedList));
		$this->assertEquals('0', $allowEmptyReferer);
		$this->assertTrue(!empty($this->_fileContent), 'fileContent');
		$this->assertTrue(!empty($this->_embeddedFileContent), 'embeddedFileContent');

		GalleryDataCache::remove('G2_EMBED');
	}

	public function testSaveAccessListCantWrite() {
		$this->_platform->_isWriteable = false;
		$accessList                    = array('phpunit.test1', 'phpunit.test2');
		list($ret, $code)              = $this->_parser->saveAccessList($accessList, true);

		if ($ret) {
			return array($ret, null, null);
		}

		list($ret, $savedList) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'accessList'
		);

		if ($ret) {
			return array($ret, null, null);
		}

		list($ret, $allowEmptyReferer) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'allowEmptyReferer'
		);

		if ($ret) {
			return array($ret, null, null);
		}

		$this->assertEquals(REWRITE_STATUS_HTACCESS_CANT_WRITE, $code);
		$this->assertEquals(array('phpunit.test'), unserialize($savedList));
		$this->assertEquals('0', $allowEmptyReferer);
		$this->assertTrue(!isset($this->_fileContent), 'fileContent');
		$this->assertTrue(!isset($this->_embeddedFileContent), 'embeddedFileContent');

		$this->_platform->_isWriteable = true;
	}

	public function testSaveAccessListEmbeddedCantWrite() {
		$this->_platform->_isWriteable = false;
		GalleryDataCache::put('G2_EMBED', 1, true);
		$accessList       = array('phpunit.test1', 'phpunit.test2');
		list($ret, $code) = $this->_parser->saveAccessList($accessList, true);

		if ($ret) {
			return array($ret, null, null);
		}

		list($ret, $savedList) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'accessList'
		);

		if ($ret) {
			return array($ret, null, null);
		}

		list($ret, $allowEmptyReferer) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'allowEmptyReferer'
		);

		if ($ret) {
			return array($ret, null, null);
		}

		$this->assertEquals(REWRITE_STATUS_HTACCESS_CANT_WRITE, $code);
		$this->assertEquals(array('phpunit.test'), unserialize($savedList));
		$this->assertEquals('0', $allowEmptyReferer);
		$this->assertTrue(!isset($this->_fileContent), 'fileContent');
		$this->assertTrue(!isset($this->_embeddedFileContent), 'embeddedFileContent');

		GalleryDataCache::remove('G2_EMBED');
	}

	public function testNeedsConfigurationEmbedded() {
		GalleryDataCache::put('G2_EMBED', 1, true);

		GalleryUtilities::putRequestVariable('modRewriteTest', 'pass');
		list($ret, $status) = $this->_parser->needsConfiguration();

		if ($ret) {
			return $ret;
		}
		$this->assertTrue(!$status, 'pass');

		GalleryDataCache::remove('G2_EMBED');
	}

	public function testHandleTestResultsRequest1() {
		$form = $error = $status = array();

		$form['force']['test1']     = 1;
		list($ret, $error, $status) = $this->_parser->handleTestResultsRequest($form);

		if ($ret) {
			return $ret;
		}

		list($ret, $forced) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.status'
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'needOptions' => false,
				'forced'      => 1,
			),
			unserialize($forced)
		);
		$this->assertEquals(
			array(
				'saved' => 1,
			),
			$status
		);
		$this->assertEquals(array(), $error);
	}

	public function testHandleTestResultsRequest2() {
		$form = array();

		$form['force']['test2']     = 1;
		list($ret, $error, $status) = $this->_parser->handleTestResultsRequest($form);

		if ($ret) {
			return $ret;
		}

		list($ret, $forced) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.status'
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'needOptions' => true,
				'forced'      => 1,
			),
			unserialize($forced)
		);
		$this->assertEquals(
			array(
				'saved' => 1,
			),
			$status
		);
		$this->assertEquals(array(), $error);
	}

	public function testHandleTestResultsRequest3() {
		$form = array();

		list($ret, $error, $status) = $this->_parser->handleTestResultsRequest($form);

		if ($ret) {
			return $ret;
		}

		list($ret, $forced) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.status'
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'needOptions' => true,
			),
			unserialize($forced)
		);
		$this->assertEquals(
			array(
				'saved' => 1,
			),
			$status
		);
		$this->assertEquals(array(), $error);
	}

	public function testHandleAdminParserRequest1() {
		$form = array();
		GalleryDataCache::put('G2_EMBED', 1, true);

		$form['embeddedLocation']   = 'test';
		$form['embeddedHtaccess']   = '/phpunit/test/';
		list($ret, $error, $status) = $this->_parser->handleAdminParserRequest($form);

		if ($ret) {
			return $ret;
		}

		list($ret, $embeddedLocation) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.embeddedLocation'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $embeddedHtaccess) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.embeddedHtaccess'
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals('/phpunit/test', $embeddedHtaccess);
		$this->assertEquals('/test/', $embeddedLocation);
		$this->assertEquals(
			array(
				'saved' => 1,
			),
			$status
		);
		$this->assertEquals(array(), $error);
		$this->assertTrue(!empty($this->_fileContent), 'file');

		GalleryDataCache::remove('G2_EMBED');
	}

	public function testHandleAdminParserRequest2() {
		$form = array();
		GalleryDataCache::put('G2_EMBED', 1, true);

		$form['embeddedLocation']   = '/';
		$form['embeddedHtaccess']   = '/phpunit/test';
		list($ret, $error, $status) = $this->_parser->handleAdminParserRequest($form);

		if ($ret) {
			return $ret;
		}

		list($ret, $embeddedLocation) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.embeddedLocation'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $embeddedHtaccess) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.embeddedHtaccess'
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals('/phpunit/test', $embeddedHtaccess);
		$this->assertEquals('/', $embeddedLocation);
		$this->assertEquals(
			array(
				'saved' => 1,
			),
			$status
		);
		$this->assertEquals(array(), $error);
		$this->assertTrue(!empty($this->_fileContent), 'file');

		GalleryDataCache::remove('G2_EMBED');
	}

	public function testHandleAdminParserRequest3() {
		$form = array();
		GalleryDataCache::put('G2_EMBED', 1, true);
		$this->_platform->_isWriteable = false;

		$form['embeddedLocation']   = '/test/';
		$form['embeddedHtaccess']   = '/phpunit/test';
		list($ret, $error, $status) = $this->_parser->handleAdminParserRequest($form);

		if ($ret) {
			return $ret;
		}

		list($ret, $embeddedLocation) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.embeddedLocation'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $embeddedHtaccess) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.embeddedHtaccess'
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals('/phpunit/embedded', $embeddedHtaccess);
		$this->assertEquals('/embedded/', $embeddedLocation);
		$this->assertEquals(array(), $status);
		$this->assertEquals(array('form[error][15]'), $error);
		$this->assertTrue(!isset($this->_fileContent), 'file');

		GalleryDataCache::remove('G2_EMBED');
		$this->_platform->_isWriteable = true;
	}

	public function testHandleAdminParserRequest4() {
		$form = array();
		GalleryDataCache::put('G2_EMBED', 1, true);

		list($ret, $error, $status) = $this->_parser->handleAdminParserRequest($form);

		if ($ret) {
			return $ret;
		}

		list($ret, $embeddedLocation) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.embeddedLocation'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $embeddedHtaccess) = GalleryCoreApi::getPluginParameter(
			'module',
			'rewrite',
			'modrewrite.embeddedHtaccess'
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals('/phpunit/embedded', $embeddedHtaccess);
		$this->assertEquals('/embedded/', $embeddedLocation);
		$this->assertEquals(array(), $status);
		$this->assertEquals(array('form[error][5]'), $error);
		$this->assertTrue(!isset($this->_fileContent), 'file');

		GalleryDataCache::remove('G2_EMBED');
	}

	public function testNeedsEmbedConfig1() {
		list($ret, $status) = $this->_parser->needsEmbedConfig();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(!$status, 'status');
	}

	public function testNeedsEmbedConfig2() {
		foreach (array(
			'modrewrite.embeddedHtaccess',
			'modrewrite.embeddedLocation',
		) as $key) {
			$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', $key, '');

			if ($ret) {
				return $ret;
			}
		}

		list($ret, $status) = $this->_parser->needsEmbedConfig();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($status, 'status');
	}

	public function testFetchEmbedConfig() {
		list($ret, $params) = $this->_parser->fetchEmbedConfig();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'embeddedLocation' => '/embedded/',
				'embeddedHtaccess' => '/phpunit/embedded',
			),
			$params
		);
	}

	public function testSaveEmbedConfig1() {
		$params = array(
			'embeddedLocation' => '/test/',
			'embeddedHtaccess' => '/phpunit/test',
		);

		list($ret, $code, $errstr) = $this->_parser->saveEmbedConfig($params);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(REWRITE_STATUS_OK, $code);
		$this->assertEquals(null, $errstr);
	}

	public function testSaveEmbedConfig2() {
		$this->_platform->_isWriteable = false;
		$params                        = array(
			'embeddedLocation' => '/test/',
			'embeddedHtaccess' => '/phpunit/test',
		);

		list($ret, $code, $errstr) = $this->_parser->saveEmbedConfig($params);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(REWRITE_STATUS_HTACCESS_CANT_WRITE, $code);
		$this->assertTrue(!empty($errstr), 'errstr');
		$this->_platform->_isWriteable = true;
	}

	public function testSaveEmbedConfig3() {
		$this->_platform->_isWriteable = false;
		$params                        = array();

		list($ret, $code, $errstr) = $this->_parser->saveEmbedConfig($params);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(REWRITE_STATUS_EMPTY_VALUE, $code);
		$this->assertTrue(!empty($errstr), 'errstr');
		$this->_platform->_isWriteable = true;
	}
}
