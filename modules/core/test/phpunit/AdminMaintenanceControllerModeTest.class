<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/**
 * AdminMaintenanceControllerTest controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Tim Almdal <tnalmdal@shaw.ca>
 * @version $Revision: 17580 $
 */
class AdminMaintenanceControllerModeTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_versionFileContents;
	public $_versionFile;
	public $_versionContentsBase;

	public function __construct($methodName) {
		parent::__construct($methodName, 'core.AdminMaintenance');
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$UnitTestPlatform = new UnitTestPlatform();

		$gallery->setPlatform($UnitTestPlatform);

		$this->_platform =& $gallery->getPlatform();

		list($ret, $module) = GalleryCoreApi::loadPlugin('module', 'core');

		if ($ret) {
			return $this->failWithStatus($ret);
		}

		$this->_versionFileContents = array(
			$module->getVersion() . "\n",
			$module->getGalleryVersion() . "\n",
		);

		$this->_versionFile         = $gallery->getConfig('data.gallery.version');
		$this->_versionContentsBase = $module->getVersion() . "\n" . $module->getGalleryVersion();

		GalleryDataCache::remove('CoreModule::installedVersions');
	}

	public function testSetMaintenanceModeOnNoUrl() {
		global $gallery;

		$gallery->setConfig('mode.maintenance', false);

		$versionStr = "{$this->_versionContentsBase}\nmaintenance-mode";

		$this->_platform->setReply('file_exists', array($this->_versionFile), true);
		$this->_platform->setReply(
			'file',
			array($this->_versionFile, false),
			$this->_versionFileContents
		);
		$this->_platform->setReply('atomicWrite', array($this->_versionFile, $versionStr), true);

		GalleryUtilities::putRequestVariable('form[action][setMode]', 1);
		GalleryUtilities::putRequestVariable('form[setMode][mode]', 'on');
		GalleryUtilities::putRequestVariable('form[setMode][url]', '');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminMaintenance',
				),
				'status'   => array(
					'setMode' => array(
						'setOn' => 1,
					),
				),
				'error'    => array(),
			),
			$results
		);

		$this->assertTrue($this->_platform->isComplete(), $this->_platform->getRemaining());
	}

	public function testSetMaintenanceModeOnUrl() {
		global $gallery;

		$urlGenerator =& $gallery->getUrlGenerator();
		$url          = $urlGenerator->makeAbsoluteUrl('/maintenance.html');
		$versionStr   = "{$this->_versionContentsBase}\nmaintenance-mode:$url";

		$this->_platform->setReply('file_exists', array($this->_versionFile), true);
		$this->_platform->setReply(
			'file',
			array($this->_versionFile, false),
			$this->_versionFileContents
		);
		$this->_platform->setReply('atomicWrite', array($this->_versionFile, $versionStr), true);

		GalleryUtilities::putRequestVariable('form[action][setMode]', 1);
		GalleryUtilities::putRequestVariable('form[setMode][mode]', 'on');
		GalleryUtilities::putRequestVariable('form[setMode][url]', $url);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminMaintenance',
				),
				'status'   => array(
					'setMode' => array(
						'setOn' => 1,
					),
				),
				'error'    => array(),
			),
			$results,
			'The url was not properly'
		);

		$this->assertTrue($this->_platform->isComplete(), $this->_platform->getRemaining());
	}

	public function testSetMaintenanceModeOff() {
		global $gallery;

		$gallery->setConfig('mode.maintenance', true);

		$this->_versionFileContents[] = 'nmaintenance-mode';

		$this->_platform->setReply('file_exists', array($this->_versionFile), true);
		$this->_platform->setReply(
			'file',
			array($this->_versionFile, false),
			$this->_versionFileContents
		);
		$this->_platform->setReply(
			'atomicWrite',
			array($this->_versionFile, $this->_versionContentsBase),
			true
		);

		GalleryUtilities::putRequestVariable('form[action][setMode]', 1);
		GalleryUtilities::putRequestVariable('form[setMode][url]', '');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminMaintenance',
				),
				'status'   => array(
					'setMode' => array(
						'setOff' => 1,
					),
				),
				'error'    => array(),
			),
			$results
		);

		$this->assertTrue($this->_platform->isComplete(), $this->_platform->getRemaining());
	}

	public function testSetMaintenanceModeEqual() {
		global $gallery;

		$gallery->setConfig('mode.maintenance', false);

		GalleryUtilities::putRequestVariable('form[action][setMode]', 1);
		GalleryUtilities::putRequestVariable('form[setMode][url]', '');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminMaintenance',
				),
				'status'   => array(
					'setMode' => array(
						'setOff' => 1,
					),
				),
				'error'    => array(),
			),
			$results,
			'The maintenance  mode was set'
		);

		$this->assertTrue($this->_platform->isComplete(), $this->_platform->getRemaining());
	}
}
