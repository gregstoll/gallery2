<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
GalleryCoreApi::requireOnce('modules/core/classes/GalleryTheme.class');
GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplate.class');

/**
 * Test GalleryTheme functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class ThemeTest extends GalleryTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_theme;

	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$this->_platform = new ThemeTestPlatform();

		$gallery->setPlatform($this->_platform);

		GalleryDataCache::reset();

		list($ret, $this->_theme) = GalleryCoreApi::loadPlugin('theme', 'ThemeTest');

		if ($ret) {
			return $ret;
		}

		$this->_theme->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
		$this->_theme->setRequiredThemeApi(GalleryTheme::getApiVersion());

		$ret = $this->_markPluginParametersForCleanup('module', 'core');

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_item) = $this->_createRandomDataItem($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_item);
	}

	public function tearDown() {
		// If a unit test fails it might not deactivate/uninstall the mock theme properly
		list($ret, $isActive) = $this->_theme->isActive();

		if ($ret) {
			$this->failWithStatus($ret);
		}

		if ($isActive) {
			list($ret, $redirect) = $this->_theme->deactivate();

			if ($ret) {
				$this->failWithStatus($ret);
			}
		}

		$ret = $this->_theme->uninstall();

		if ($ret) {
			$this->failWithStatus($ret);
		}

		$ret = GalleryCoreApi::removePlugin('theme', 'ThemeTest');

		if ($ret) {
			$this->failWithStatus($ret);
		}

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testPackSettingBlockList1() {
		$this->assertEquals(
			array(
				true,
				serialize(
					array(
						array(
							'module.BlockName',
							array(
								'param1' => 'value1',
							),
						),
					)
				),
			),
			$this->_theme->packSetting('block-list', '[["module.BlockName",{"param1":"value1"}]]')
		);
	}

	public function testPackSettingBlockList2() {
		$this->assertEquals(
			array(
				true,
				serialize(
					array(
						array(
							'module.BlockName',
							array(
								'param1' => 'value1',
							),
						),
						array('module2.Block2', array()),
						array(
							'module.BlockName',
							array(
								'param1' => 'value1',
								'param2' => 'value2',
							),
						),
					)
				),
			),
			$this->_theme->packSetting(
				'block-list',
				'[["module.BlockName", {"param1":"value1"}],' .
				' ["module2.Block2"],' .
				' ["module.BlockName",{"param1":"value1","param2":"value2"}]]'
			)
		);
	}

	public function testPackSettingBlockListTrueFalse() {
		$this->assertEquals(
			array(
				true,
				serialize(
					array(
						array(
							'module.BlockName',
							array(
								'param1' => false,
								'param2' => true,
							),
						),
					)
				),
			),
			$this->_theme->packSetting(
				'block-list',
				'[["module.BlockName",{"param1":false,"param2":true}]]'
			)
		);
	}

	public function testPackSettingBlockListWhitespace1() {
		$this->assertEquals(
			array(
				true,
				serialize(
					array(
						array(
							'a.B',
							array(
								'x' => 'y',
							),
						),
						array('b.c', array()),
					)
				),
			),
			$this->_theme->packSetting('block-list', '[["a.B",{"x":"y"}],    ["b.c"]]')
		);
	}

	public function testPackSettingBlockListWhitespace2() {
		$this->assertEquals(
			array(
				true,
				serialize(
					array(
						array(
							'a.B',
							array(
								'x' => "y \n y",
							),
						),
						array('b.c', array()),
					)
				),
			),
			$this->_theme->packSetting('block-list', '[["a.B",{"x":"y \n y"}],["b.c"]]')
		);
	}

	public function testPackSettingBlockListQuotedValue() {
		$this->assertEquals(
			array(
				true,
				serialize(
					array(
						array(
							'a.B',
							array(
								'x' => 'foo "bar" baz',
							),
						),
					)
				),
			),
			$this->_theme->packSetting('block-list', '[["a.B",{"x":"foo \"bar\" baz"}]]')
		);
	}

	public function testPackSettingBlockListEmpty() {
		$this->assertEquals(
			array(true, serialize(array())),
			$this->_theme->packSetting('block-list', '')
		);
	}

	public function testPackSettingBlockListMissingBlockName() {
		$this->assertEquals(
			array(false, serialize(array())),
			$this->_theme->packSetting('block-list', '[foo]')
		);
	}

	public function testPackSettingBlockListMissingRightBracket() {
		$this->assertEquals(
			array(false, serialize(array())),
			$this->_theme->packSetting('block-list', '[foo.Bar')
		);
	}

	public function testPackSettingBlockListMissingRightBracket2() {
		$this->assertEquals(
			array(false, serialize(array())),
			$this->_theme->packSetting('block-list', '[foo.Bar a=b [foo.Baz b=c]')
		);
	}

	public function testPackSettingBlockListMissingLeftBracket() {
		$this->assertEquals(
			array(false, serialize(array())),
			$this->_theme->packSetting('block-list', 'foo.Bar]')
		);
	}

	public function testPackSettingBlockListMissingBothBrackets() {
		$this->assertEquals(
			array(false, serialize(array())),
			$this->_theme->packSetting('block-list', 'foo.Bar')
		);
	}

	public function testPackSettingBlockListVeryLongList() {
		$count            = 3;
		$data_pattern     = '["a.b",{"c":"d"}]';
		$expected_pattern = array(
			'a.b',
			array(
				'c' => 'd',
			),
		);

		$data = '';

		for ($i = 0; $i < $count; $i++) {
			$expected[] = $expected_pattern;

			if ($i) {
				$data .= ',';
			}

			$data .= $data_pattern;
		}

		$data   = '[' . $data . ']';
		$actual = $this->_theme->packSetting('block-list', $data);

		$this->assertEquals(
			array(true, $expected),
			array($actual[0], unserialize($actual[1]))
		);
	}

	public function testUnpackSettingBlockList1() {
		$this->assertEquals(
			array(true, '[["a.B",{"foo":"bar"}]]'),
			$this->_theme->unpackSetting(
				'block-list',
				serialize(
					array(
						array(
							'a.B',
							array(
								'foo' => 'bar',
							),
						),
					)
				)
			)
		);
	}

	public function testUnpackSettingBlockList2() {
		$this->assertEquals(
			array(true, '[["a.B",{"foo":"bar"}],["c.D",{}]]'),
			$this->_theme->unpackSetting(
				'block-list',
				serialize(
					array(
						array(
							'a.B',
							array(
								'foo' => 'bar',
							),
						),
						array('c.D'),
					)
				)
			)
		);
	}

	public function testUnpackSettingBlockListTrueFalse() {
		$this->assertEquals(
			array(true, '[["a.B",{"foo":true,"bar":false}]]'),
			$this->_theme->unpackSetting(
				'block-list',
				serialize(
					array(
						array(
							'a.B',
							array(
								'foo' => true,
								'bar' => false,
							),
						),
					)
				)
			)
		);
	}

	public function testUnpackSettingBlockListEmpty() {
		$this->assertEquals(
			array(true, '[]'),
			$this->_theme->unpackSetting('block-list', serialize(array()))
		);
	}

	public function testUnpackSettingBlockListMalformed1() {
		$this->assertEquals(
			array(false, ''),
			$this->_theme->unpackSetting('block-list', serialize(array('x')))
		);
	}

	public function testUnpackSettingBlockListMalformed2() {
		$this->assertEquals(
			array(false, ''),
			$this->_theme->unpackSetting(
				'block-list',
				serialize(
					array(
						'x' => 'y',
					)
				)
			)
		);
	}

	public function testInstallBadThemeApi() {
		list($major, $minor) = $this->_theme->getRequiredThemeApi();

		$this->_theme->setRequiredThemeApi(array($major - 1, $minor));

		$ret = $this->_theme->installOrUpgrade();

		if ($ret && !($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH)) {
			return $ret;
		}

		$this->assertTrue(
			$ret && ($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH),
			'success?'
		);
	}

	public function testActivateBadThemeApiActivate() {
		$ret = $this->_theme->installOrUpgrade();

		if ($ret) {
			return $ret;
		}

		list($major, $minor) = $this->_theme->getRequiredThemeApi();

		$this->_theme->setRequiredThemeApi(array($major - 1, $minor));

		list($ret, $redirect) = $this->_theme->activate();

		if ($ret && !($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH)) {
			return $ret;
		}

		$this->assertTrue($ret && ($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH), 'success?');

		list($ret, $isActive) = $this->_theme->isActive();

		if ($ret) {
			return $ret;
		}

		$this->assertFalse($isActive, 'is active');
	}

	public function testInstallBadCoreApi() {
		list($major, $minor) = $this->_theme->getRequiredCoreApi();

		$this->_theme->setRequiredCoreApi(array($major - 1, $minor));

		$ret = $this->_theme->installOrUpgrade();

		if ($ret && !($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH)) {
			return $ret;
		}

		$this->assertTrue($ret && ($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH), 'success?');
	}

	public function testActivateBadCoreApiActivate() {
		$ret = $this->_theme->installOrUpgrade();

		if ($ret) {
			return $ret;
		}

		list($major, $minor) = $this->_theme->getRequiredCoreApi();

		$this->_theme->setRequiredCoreApi(array($major - 1, $minor));

		list($ret, $redirect) = $this->_theme->activate();

		if ($ret && !($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH)) {
			return $ret;
		}

		$this->assertTrue($ret && ($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH), 'success?');

		list($ret, $isActive) = $this->_theme->isActive();

		if ($ret) {
			return $ret;
		}

		$this->assertFalse($isActive, 'is active');
	}

	public function testDeactivateDefaultTheme() {
		$ret = GalleryCoreApi::setPluginParameter(
			'module',
			'core',
			'default.theme',
			'themetest'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $redirect) = $this->_theme->deactivate();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'href' => 'upgrade/',
			),
			$redirect
		);
	}

	public function testVariableReferenceAcrossLoadCommonTemplateData() {
		$template = new GalleryTemplate('/path/to/fake/templatedir');
		$theme    =& $template->getVariableByReference('theme');

		$ret = $this->_theme->loadCommonTemplateData(
			$template,
			$this->_item,
			array(),
			array(),
			array(),
			false
		);

		if ($ret) {
			return $ret;
		}

		$theme['foo'] = 'bar';
		$theme        =& $template->getVariableByReference('theme');

		$this->assertEquals('bar', $theme['foo']);
	}

	public function testBlockPreloads() {
		// Used to hardcode just sidebar/album/photoBlocks, now all *Blocks parameters
		$template = new GalleryTemplate('/path/to/fake/templatedir');
		$view     = new ThemeTestView();

		for ($i = 1; $i <= 4; $i++) {
			list($success, $block[$i]) = $this->_theme->packSetting('block-list', '[["core.ThemeTestBlock' . $i . '"]]');

			if (!$success) {
				return $this->assertFalse(true, 'block-list error');
			}
		}

		list($ret, $results) = $this->_theme->loadTemplate(
			$view,
			$template,
			$this->_item,
			array(
				'sidebarBlocks' => $block[1],
				'albumBlocks'   => $block[2],
				'photoBlocks'   => $block[3],
				'moreBlocks'    => $block[4],
			),
			array(
				'body' => 'test.tpl',
			)
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'core.ThemeTestBlock1',
				'core.ThemeTestBlock2',
				'core.ThemeTestBlock3',
				'core.ThemeTestBlock4',
			),
			array_keys($this->_theme->_preloadedBlocks)
		);
	}

	public function testSplitHtml() {
		$html = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ...>
	    <html lang="de-DE" xmlns="...">
	    <head>
	    <foo>
	    </head>
	    <body some="foo">
	    <p>Example</p>
	    </body>
	    </html>
    	';

		$extraHtml = array(
			'sidebarBlocksHtml' => 'sidebar stuff',
			'other'             => 1,
		);

		$results = $this->_theme->splitHtml($html, $extraHtml);

		$this->assertEquals(
			array(
				'headHtml'          => '
	    <foo>
	    ',
				'bodyHtml'          => '
	    <p>Example</p>
	    ',
				'sidebarBlocksHtml' => 'sidebar stuff',
			),
			$results
		);
	}

	public function testSplitHtmlWorksWithDefaultBacktraceLimit() {
		/*
		 * Feed splitHtml with far over 100k characters to test whether it runs into
		 * PHP 5.2.0's default pcre.backtrack_limit.
		 */
		$backtraceLimit = ini_get('pcre.backtrack_limit');
		ini_set('pcre.backtrack_limit', 100000);

		// Generate some random HTML that exceeds the backtrace limit in length
		$randomHtml = '<meta foo="bar">body head </meta>';
		$randomHtml = str_repeat($randomHtml, (int) (160000 / strlen($randomHtml)));
		$html       = '
	    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ...>
	    <html lang="de-DE" xmlns="...">
	    <head>
	    ' . $randomHtml . 'for head
	    </head>
	    <body some="foo">
	    ' . $randomHtml . 'for body
	    </body>
	    </html>
    	';

		$extraHtml = array(
			'sidebarBlocksHtml' => 'sidebar stuff',
			'other'             => 1,
		);

		$results = $this->_theme->splitHtml($html, $extraHtml);

		$this->assertEquals(
			array(
				'headHtml'          => '
	    ' . $randomHtml . 'for head
	    ',
				'bodyHtml'          => '
	    ' . $randomHtml . 'for body
	    ',
				'sidebarBlocksHtml' => 'sidebar stuff',
			),
			$results
		);

		ini_set('pcre.backtrack_limit', $backtraceLimit);
	}
}

/**
 * Test theme
 */
class ThemeTestTheme extends GalleryTheme {
	/* deprecated dynamic properties in php 8.2 */
	public $_preloadedBlocks;

	public function __construct() {
		global $gallery;

		$this->setId('themetest');
		$this->setName('ThemeTest Theme');
		$this->setDescription('Unit test theme');
		$this->setVersion('0.9.0');
		$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
		$this->setRequiredThemeApi(GalleryTheme::getApiVersion());

		$this->_preloadedBlocks = array();
	}

	public function preloadBlock(&$template, $blockId, $blockParams = array()) {
		$this->_preloadedBlocks[$blockId] = true;

		return null;
	}
}

/**
 * Test view
 */
class ThemeTestView extends GalleryView {}

/**
 * Test platform for this test
 */
class ThemeTestPlatform extends GalleryPlatform {
	/* deprecated dynamic properties in php 8.2 */
	public $_list;

	public function opendir($path) {
		if (strpos($path, 'themes/') !== false) {
			$this->_list = array();

			if ($dir = parent::opendir($path)) {
				while (false !== ($file = parent::readdir($dir))) {
					array_push($this->_list, $file);
				}
			}

			array_push($this->_list, 'themetest');

			return 'themetest';
		}

		return parent::opendir($path);
	}

	public function is_dir($path) {
		if (strpos($path, 'themes/themetest') !== false) {
			return true;
		}

		return parent::is_dir($path);
	}

	public function readdir($handle) {
		if ($handle == 'themetest') {
			return array_shift($this->_list);
		}

		return parent::readdir($handle);
	}

	public function closedir($handle) {
		if ($handle == 'themetest') {
			unset($this->_list);

			return true;
		}

		return parent::closedir($handle);
	}

	public function file_exists($file) {
		if (strpos($file, 'themes/themetest/theme.inc') !== false) {
			return true;
		}

		return parent::file_exists($file);
	}

	public function recursiveRmdir($path) {
		return true;
	}
}
