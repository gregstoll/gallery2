<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
GalleryCoreApi::requireOnce('modules/core/classes/GalleryToolkit.class');

/**
 * ItemMakeHighlight controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class ItemMakeHighlightControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_subalbum;

	public function __construct($methodName) {
		parent::__construct($methodName, 'core.ItemMakeHighlight');
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Register a dummy toolkit
		$ret = GalleryCoreApi::registerFactoryImplementation(
			'GalleryToolkit',
			'ItemMakeHighlightTestToolkit',
			'ItemMakeHighlightTestToolkit',
			'modules/core/test/phpunit/ItemMakeHighlightControllerTest.class',
			'coreTest',
			null
		);

		if ($ret) {
			return $ret;
		}

		$this->_markToolkitForCleanup('ItemMakeHighlightTestToolkit');

		// Register operations that we can perform on our mock data items
		$ret = GalleryCoreApi::registerToolkitOperation(
			'ItemMakeHighlightTestToolkit',
			array('test/file'),
			'thumbnail',
			array(
				array(
					'type'        => 'int',
					'description' => 'foo',
				),
				array(
					'type'        => 'int',
					'description' => 'foo',
				),
			),
			'test-description'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_album);

		list($ret, $this->_subalbum) = $this->_createRandomAlbum($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_item) = $this->_createRandomDataItem($this->_subalbum->getId(), 'test/file');

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_derivative) = $this->_createDerivative(
			$this->_item,
			$this->_item->getId(),
			DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
			'thumbnail|200'
		);

		if ($ret) {
			return $ret;
		}
	}

	public function testCancel() {
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'return' => true,
				'status' => array(),
				'error'  => array(),
			),
			$results
		);
	}

	public function testMakeHighlightParent() {
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[parentId]', $this->_subalbum->getId());
		GalleryUtilities::putRequestVariable('form[action][makeHighlight]', 1);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'return' => true,
				'status' => array(),
				'error'  => array(),
			),
			$results
		);

		// Verify highlight was set
		list($ret, $thumbnail) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_subalbum->getId()));

		if ($ret) {
			return $ret;
		}

		if (!empty($thumbnail)) {
			$thumbnail = array_shift($thumbnail);
		}

		$this->assertEquals($this->_derivative->getId(), $thumbnail->getDerivativeSourceId());
	}

	public function testMakeHighlightGrandparent() {
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[parentId]', $this->_album->getId());
		GalleryUtilities::putRequestVariable('form[action][makeHighlight]', 1);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'return' => true,
				'status' => array(),
				'error'  => array(),
			),
			$results
		);

		// Verify highlight was set
		list($ret, $thumbnail) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_album->getId()));

		if ($ret) {
			return $ret;
		}

		if (!empty($thumbnail)) {
			$thumbnail = array_shift($thumbnail);
		}

		$this->assertEquals($this->_derivative->getId(), $thumbnail->getDerivativeSourceId());
	}
}

/**
 * Dummy test toolkit
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemMakeHighlightTestToolkit extends GalleryToolkit {}
