<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
GalleryCoreApi::requireOnce('modules/core/classes/OptimizeDatabaseTask.class');

/**
 * Test the OptimizeDatabase maintenance task functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class OptimizeDatabaseTaskTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;

		$this->_task = new OptimizeDatabaseTask();

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}
	}

	public function testRun() {
		global $gallery;

		$gallery->_storage = new OptimizeDatabaseTaskTestStorage();
		$mockStorage       =& $gallery->_storage;

		list($ret, $module) = GalleryCoreApi::loadPlugin('module', 'core');

		if ($ret) {
			return $ret;
		}

		list($ret, $success, $details) = $this->_task->run();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($success);
		$this->assertEquals(array($module->translate('Database optimized successfully')), $details);
		$this->assertTrue($mockStorage->optimizeWasCalled());
	}
}

class OptimizeDatabaseTaskTestStorage {
	/* deprecated dynanic properties in php 8.2 */
	public $_optimizeWasCalled;

	public function __construct() {
		$this->_optimizeWasCalled = false;
	}

	public function optimize() {
		$this->_optimizeWasCalled = true;

		return null;
	}

	public function optimizeWasCalled() {
		return $this->_optimizeWasCalled;
	}
}

