<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
GalleryCoreApi::requireOnce('modules/core/classes/GalleryToolkit.class');

/**
 * ItemMoveSingle controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class ItemMoveSingleControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_childAlbum;
	public $_rootAlbum;
	public $_destinationAlbum;

	public function __construct($methodName) {
		parent::__construct($methodName, 'core.ItemMoveSingle');
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Register a dummy toolkit
		$path = 'modules/core/test/phpunit/ItemMoveSingleControllerTest.class';

		$ret = GalleryCoreApi::registerFactoryImplementation(
			'GalleryToolkit',
			'ItemMoveSingleTestToolkit',
			'ItemMoveSingleTestToolkit',
			$path,
			'coreTest',
			null
		);

		if ($ret) {
			return $ret;
		}

		$this->_markToolkitForCleanup('ItemMoveSingleTestToolkit');

		// Register operations that we can perform on our mock data items
		$ret = GalleryCoreApi::registerToolkitOperation(
			'ItemMoveSingleTestToolkit',
			array('image/test'),
			'thumbnail',
			array(
				array(
					'type'        => 'int',
					'description' => 'foo',
				),
				array(
					'type'        => 'int',
					'description' => 'foo',
				),
			),
			'test-description'
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::registerToolkitOperation(
			'ItemMoveSingleTestToolkit',
			array('image/test'),
			'scale',
			array(
				array(
					'type'        => 'int',
					'description' => 'foo',
				),
				array(
					'type'        => 'int',
					'description' => 'foo',
				),
			),
			'test-description'
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::registerToolkitOperation(
			'ItemMoveSingleTestToolkit',
			array('image/test'),
			'crop',
			array(
				array(
					'type'        => 'float',
					'description' => 'foo',
				),
				array(
					'type'        => 'float',
					'description' => 'foo',
				),
				array(
					'type'        => 'float',
					'description' => 'foo',
				),
				array(
					'type'        => 'float',
					'description' => 'foo',
				),
			),
			'test-description'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_rootAlbum) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_rootAlbum);
		$this->_setDerivativePreferences($this->_rootAlbum->getId(), 150, 300, 400);

		list($ret, $this->_destinationAlbum) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_destinationAlbum);
		$this->_setDerivativePreferences($this->_destinationAlbum->getId(), 200, 400, 600, 800);

		// Create a data item
		list($ret, $this->_item) = $this->_createRandomDataItem(
			$this->_rootAlbum->getId(),
			'image/test',
			array(
				'width' => 1000,
			)
		);

		if ($ret) {
			return $ret;
		}
	}

	public function _setDerivativePreferences() {
		$args      = func_get_args();
		$itemId    = array_shift($args);
		$thumbSize = array_shift($args);

		$ret = GalleryCoreApi::removeDerivativePreferencesForItem($itemId);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addDerivativePreference(
			0,
			$itemId,
			DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
			'thumbnail|' . $thumbSize
		);

		if ($ret) {
			return $ret;
		}

		foreach ($args as $i => $resizeSize) {
			$ret = GalleryCoreApi::addDerivativePreference(
				$i + 1,
				$itemId,
				DERIVATIVE_TYPE_IMAGE_RESIZE,
				'scale|' . $resizeSize
			);

			if ($ret) {
				return $ret;
			}
		}
	}

	public function _getDerivativeSizes($itemIds) {
		if (!is_array($itemIds)) {
			$itemIds = array($itemIds);
		}

		$data = array();

		list($ret, $thumbnails) = GalleryCoreApi::fetchThumbnailsByItemIds($itemIds);

		if ($ret) {
			return $ret;
		}

		foreach ($thumbnails as $id => $deriv) {
			$data[$id][] = array(
				'type' => $deriv->getDerivativeType(),
				'op'   => $deriv->getDerivativeOperations(),
			);
		}

		list($ret, $resizes) = GalleryCoreApi::fetchResizesByItemIds($itemIds);

		if ($ret) {
			return $ret;
		}

		foreach ($resizes as $id => $derivs) {
			foreach ($derivs as $deriv) {
				$data[$id][] = array(
					'type' => $deriv->getDerivativeType(),
					'op'   => $deriv->getDerivativeOperations(),
				);
			}
		}

		return count($data) == 1 ? array_shift($data) : $data;
	}

	/**
	 * Test moving an item
	 */
	public function testMoveItem() {
		// Create derivatives according to prefs of original album
		$ret = GalleryCoreApi::addExistingItemToAlbum(
			$this->_item,
			$this->_rootAlbum->getId(),
			true
		);

		if ($ret) {
			return $ret;
		}

		// Verify derivatives were created ok
		$sizes = $this->_getDerivativeSizes($this->_item->getId());

		$this->assertEquals(
			array(
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
					'op'   => 'thumbnail|150',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|300',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|400',
				),
			),
			$sizes,
			'Initial derivative sizes'
		);

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][move]', 1);
		GalleryUtilities::putRequestVariable(
			'form[destination]',
			$this->_destinationAlbum->getId()
		);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemMoveSingle',
					'itemId'  => $this->_item->getId(),
				),
				'status'   => array(
					'moved' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Verify parent sequence
		list($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($this->_item->getId());

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_getRootId(),
				$this->_destinationAlbum->getId(),
			),
			$parentSequence,
			'Parent sequence'
		);

		// Verify derivatives were recreated with preferences of new parent album
		$sizes = $this->_getDerivativeSizes($this->_item->getId());

		$this->assertEquals(
			array(
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
					'op'   => 'thumbnail|200',
				),
				// Order differs because old 400 kept as-is, and old 300 is reused for 600.
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|600',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|400',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|800',
				),
			),
			$sizes,
			'Derivative sizes after move'
		);

		// Move back
		clearstatcache();

		GalleryUtilities::putRequestVariable('form[destination]', $this->_rootAlbum->getId());

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemMoveSingle',
					'itemId'  => $this->_item->getId(),
				),
				'status'   => array(
					'moved' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Verify parent sequence
		list($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($this->_item->getId());

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_getRootId(),
				$this->_rootAlbum->getId(),
			),
			$parentSequence,
			'Parent sequence 2'
		);

		// Verify derivatives were recreated with preferences of new parent album
		$sizes = $this->_getDerivativeSizes($this->_item->getId());

		$this->assertEquals(
			array(
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
					'op'   => 'thumbnail|150',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|300',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|400',
				),
			),
			$sizes,
			'Derivative sizes after move 2'
		);
	}

	/**
	 * Test moving an item to a bogus destination
	 */
	public function testMoveItemIntoEmptyDestination() {
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][move]', 1);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemMoveSingle',
				),
				'status'   => array(),
				'error'    => array('form[error][destination][empty]'),
			),
			$results
		);
	}

	/**
	 * Test moving an item into itself
	 */
	public function testMoveItemIntoSelf() {
		GalleryUtilities::putRequestVariable('itemId', $this->_rootAlbum->getId());
		GalleryUtilities::putRequestVariable('form[action][move]', 1);
		GalleryUtilities::putRequestVariable('form[destination]', $this->_rootAlbum->getId());

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemMoveSingle',
				),
				'status'   => array(),
				'error'    => array('form[error][destination][selfMove]'),
			),
			$results
		);
	}

	/**
	 * Test moving an item into its own child
	 */
	public function testMoveItemIntoChild() {
		list($ret, $this->_childAlbum) = $this->_createRandomAlbum($this->_rootAlbum->getId());

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_rootAlbum->getId());
		GalleryUtilities::putRequestVariable('form[action][move]', 1);
		GalleryUtilities::putRequestVariable('form[destination]', $this->_childAlbum->getId());

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemMoveSingle',
				),
				'status'   => array(),
				'error'    => array('form[error][destination][selfMove]'),
			),
			$results
		);
	}

	/**
	 * Test moving an item into a container where we have no add permissions
	 */
	public function testMoveItemIntoAlbumWithNoPermissions() {
		global $gallery;

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][move]', 1);
		GalleryUtilities::putRequestVariable(
			'form[destination]',
			$this->_destinationAlbum->getId()
		);

		$ret = GalleryCoreApi::removeItemPermissions($this->_destinationAlbum->getId());

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addUserPermission(
			$this->_destinationAlbum->getId(),
			$gallery->getActiveUserId(),
			'core.view'
		);

		if ($ret) {
			return $ret;
		}

		// The UI never displays targets that we cannot add to
		$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
	}

	/**
	 * Test moving an item that we cannot delete
	 */
	public function testMoveItemWithNoDeletePermissions() {
		global $gallery;

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][move]', 1);
		GalleryUtilities::putRequestVariable(
			'form[destination]',
			$this->_destinationAlbum->getId()
		);

		$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$gallery->getActiveUserId(),
			'core.view'
		);

		if ($ret) {
			return $ret;
		}

		// The UI should not allow us to try to move an item that we cannot delete
		$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
	}

	/**
	 * Test moving an item with a cropped thumbnail; ensure crop operation is maintained
	 */
	public function testMoveItemWithCroppedThumbnail() {
		// Create derivatives according to prefs of original album
		$ret = GalleryCoreApi::addExistingItemToAlbum(
			$this->_item,
			$this->_rootAlbum->getId(),
			true
		);

		if ($ret) {
			return $ret;
		}

		// Add crop operation
		list($ret, $thumbnails) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item->getId()));

		if ($ret) {
			return $ret;
		}

		$thumb = $thumbnails[$this->_item->getId()];

		list($ret, $lockId) = GalleryCoreApi::acquireWriteLock($thumb->getId());

		if ($ret) {
			return $ret;
		}

		$thumb->setDerivativeOperations('crop|0,0,50,50;' . $thumb->getDerivativeOperations());

		$ret = $thumb->save();

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::releaseLocks($lockId);

		if ($ret) {
			return $ret;
		}

		// Verify derivatives were created ok
		$sizes = $this->_getDerivativeSizes($this->_item->getId());

		$this->assertEquals(
			array(
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
					'op'   => 'crop|0,0,50,50;thumbnail|150',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|300',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|400',
				),
			),
			$sizes,
			'Initial derivative sizes'
		);

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][move]', 1);
		GalleryUtilities::putRequestVariable(
			'form[destination]',
			$this->_destinationAlbum->getId()
		);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemMoveSingle',
					'itemId'  => $this->_item->getId(),
				),
				'status'   => array(
					'moved' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Verify derivatives were recreated with preferences of new parent album
		$sizes = $this->_getDerivativeSizes($this->_item->getId());

		$this->assertEquals(
			array(
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
					'op'   => 'crop|0,0,50,50;thumbnail|200',
				),
				// Order differs because old 400 kept as-is, and old 300 is reused for 600.
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|600',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|400',
				),
				array(
					'type' => DERIVATIVE_TYPE_IMAGE_RESIZE,
					'op'   => 'scale|800',
				),
			),
			$sizes,
			'Derivative sizes after move'
		);
	}
}

/**
 * Dummy test toolkit
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemMoveSingleTestToolkit extends GalleryToolkit {}
