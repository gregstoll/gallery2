<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
GalleryCoreApi::requireOnce('modules/core/classes/GalleryValidationPlugin.class');
GalleryCoreApi::requireOnce('modules/core/classes/helpers/UserRecoverPasswordHelper_simple.class');

/**
 * UserRecoverPassword controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class UserRecoverPasswordControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_authData;

	public function __construct($methodName) {
		parent::__construct($methodName, 'core.UserRecoverPassword');
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Create a new user
		list($ret, $this->_user) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_user);

		// Disable all plugins by default.
		$this->_controller->setPluginInstances(array());

		// We use this variable to let our mock platform signal to us what email was sent
		GalleryUtilities::putRequestVariable('mail', array());

		$this->_authData = 'abcdefghijklmnopqrstuvwxyz123456';
	}

	public function tearDown() {
		global $gallery;

		// Do cleanup
		$ret = GalleryCoreApi::removeMapEntry(
			'GalleryRecoverPasswordMap',
			array(
				'userName' => $this->_user->getUserName(),
			)
		);

		if ($ret) {
			$this->failWithStatus($ret);
		}

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testRecoverPassword() {
		global $gallery;

		$userName = $this->_user->getUserName();

		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $userName);
		GalleryUtilities::putRequestVariable('form[unitTest]', 1);

		$origPlatform         =& $gallery->getPlatform();
		$RecoverDummyPlatform = new RecoverDummyPlatform($origPlatform);

		$gallery->setPlatform($RecoverDummyPlatform);

		$controllerPhpVm = new RecoverPasswordControllerPhpVm();

		$controllerPhpVm->setMd5($this->_authData);

		$gallery->_phpVm = $controllerPhpVm;

		$ret = GalleryCoreApi::addMapEntry(
			'GalleryRecoverPasswordMap',
			array(
				'userName'       => $userName,
				'authString'     => $controllerPhpVm->md5($this->_authData),
				'requestExpires' => time() + (3 * 24 * 60 * 60) + (15 * 60),
			)
		);

		if ($ret) {
			return $ret;
		}

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(
					'requestSent' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		list($ret, $authString) = UserRecoverPasswordHelper_simple::getAuthString($userName);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			$this->_authData,
			$authString,
			'Recover Password md5 mismatch'
		);

		// Verify that we sent an email; should have full urls so check for http
		$session =& $gallery->getSession();
		$mail    = $session->get('RecoverDummyPlatform.mail');

		$this->assertTrue($mail, 'RecoverPasswordMailSent');

		$mail = unserialize($mail);

		$this->assertEquals(
			$this->_user->getEmail(),
			$mail['to'],
			'Address Match'
		);
		$this->assertTrue(
			strpos(
				serialize($mail['body']),
				'http'
			),
			'RecoverPasswordShouldHaveFullURLs'
		);

		/*
		 * Make sure the URLs in the email do not have a sessionId
		 * We do not want temp session id and do not need any session id at all.
		 * So force no session ids
		 */
		$this->assertEquals(
			false,
			strpos(
				serialize($mail['body']),
				$session->getKey()
			),
			'ShouldNotHaveSessionIDinURLs'
		);

		// Remove Mail Session Item
		$session->remove('RecoverDummyPlatform.mail');
		$gallery->setPlatform($origPlatform);
	}

	public function testRequestTooSoon() {
		global $gallery;

		$ret = GalleryCoreApi::addMapEntry(
			'GalleryRecoverPasswordMap',
			array(
				'userName'       => $this->_user->getUserName(),
				'authString'     => md5('12345'),
				'requestExpires' => time() + (7 * 24 * 60 * 60) + (15 * 60),
			)
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

		$origPlatform         =& $gallery->getPlatform();
		$RecoverDummyPlatform = new RecoverDummyPlatform($origPlatform);

		$gallery->setPlatform($RecoverDummyPlatform);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(
					'requestSent' => 1,
				),
				'error'    => array(),
			),
			$results,
			'Redirect incorrect'
		);

		// Verify that the auth string has not changed
		list($ret, $newAuthString) = UserRecoverPasswordHelper_simple::getAuthString(
			$this->_user->getUserName()
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(md5('12345'), $newAuthString, 'Auth String Incorrect');

		// Verify we did not send an email
		$session =& $gallery->getSession();
		$mail    = $session->get('RecoverDummyPlatform.mail');
		$mail    = unserialize($mail ?? '');
		$this->assertTrue($mail == null, 'RequestTooSoon Mail should be Empty');

		// Remove Mail Session Item
		$session->remove('RecoverDummyPlatform.mail');
		$gallery->setPlatform($origPlatform);
	}

	public function testRequestAgain() {
		global $gallery;

		$ret = GalleryCoreApi::addMapEntry(
			'GalleryRecoverPasswordMap',
			array(
				'userName'       => $this->_user->getUserName(),
				'authString'     => md5('12345'),
				'requestExpires' => time() - (22 * 60),
			)
		);

		if ($ret) {
			return $ret;
		}

		$userName = $this->_user->getUserName();

		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $userName);
		GalleryUtilities::putRequestVariable('form[unitTest]', 1);

		$origPlatform         =& $gallery->getPlatform();
		$RecoverDummyPlatform = new RecoverDummyPlatform($origPlatform);

		$gallery->setPlatform($RecoverDummyPlatform);

		$controllerPhpVm = new RecoverPasswordControllerPhpVm();

		$controllerPhpVm->setMd5($this->_authData);

		$gallery->_phpVm = $controllerPhpVm;

		list($ret, $authString) = UserRecoverPasswordHelper_simple::getAuthString($userName);

		if ($ret) {
			return $ret;
		}

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(
					'requestSent' => 1,
				),
				'error'    => array(),
			),
			$results,
			'Redirect incorrect'
		);

		// Verify that the auth string has changed
		list($ret, $newAuthString) = UserRecoverPasswordHelper_simple::getAuthString($userName);

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(
			$authString !== $newAuthString,
			'Auth String Changed'
		);

		// Verify that we sent an email; should have full urls so check for http
		$session =& $gallery->getSession();
		$mail    = $session->get('RecoverDummyPlatform.mail');

		$this->assertTrue(
			$mail,
			'RequestAgainMailSent'
		);

		$mail = unserialize($mail);

		$this->assertTrue(
			$this->_user->getEmail() == $mail['to'],
			'Consistent Email Address'
		);

		$this->assertTrue(
			strpos(
				serialize($mail['body']),
				'http'
			),
			'RequestAgainShouldHaveFullURLs'
		);

		// Remove Mail Session Item
		$session->remove('RecoverDummyPlatform.mail');
		$gallery->setPlatform($origPlatform);
	}

	/**
	 * Invalid usernames are treated just like regular usernames to avoid automated phishing
	 * attempts to get usernames.
	 */
	public function testInvalidUser() {
		global $gallery;

		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', 'recoverTest12345');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(
					'requestSent' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Verify that there is no auth string
		list($ret, $authString) = UserRecoverPasswordHelper_simple::getAuthString(
			$this->_user->getUserName()
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(null, $authString);

		// Verify we did not send an email
		$session =& $gallery->getSession();
		$mail    = $session->get('RecoverDummyPlatform.mail');
		$mail    = isset($mail) ? unserialize($mail) : null;
		$this->assertTrue($mail == null, 'Mail not Sent for Invalid User');

		// Remove Mail Session Item
		$session->remove('RecoverDummyPlatform.mail');
	}

	/**
	 * Usernames with missing email are treated just like regular usernames to avoid automated
	 * phishing attempts to get usernames.
	 */
	public function testEmailMissing() {
		global $gallery;

		list($ret, $lockId) = GalleryCoreApi::acquireWriteLock(
			$this->_user->getId()
		);

		if ($ret) {
			return $ret;
		}

		$this->_user->setEmail('');

		$ret = $this->_user->save();

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::releaseLocks($lockId);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(
					'requestSent' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Verify that there is no auth string
		list($ret, $authString) = UserRecoverPasswordHelper_simple::getAuthString(
			$this->_user->getUserName()
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(null, $authString);

		// Verify we did not send an email
		$session =& $gallery->getSession();
		$mail    = $session->get('RecoverDummyPlatform.mail');
		$mail    = isset($mail) ? unserialize($mail) : null;
		$this->assertTrue($mail == null, 'Mail not Sent for User Without Email Address');

		// Remove Mail Session Item
		$session->remove('RecoverDummyPlatform.mail');
	}

	public function testMissingInputs() {
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', '');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(),
				'error'    => array('form[error][userName][missing]'),
			),
			$results
		);
	}

	public function testCancel() {
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'return'   => 1,
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	/**
	 * Bogus user/password, and an error from the plugin.  Plugin set to halt on failure
	 * so we should not even try to recover which means we wo not see the invalid user error.
	 */
	public function testPlugins1() {
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', 'bogus-user');

		$plugin = new UserRecoverPasswordControllerTestPlugin();

		$plugin->setErrors(array('form[error][UserRecoverPasswordControllerTestPlugin][anError]'));
		$plugin->setContinue(false);
		$this->_controller->setPluginInstances(array($plugin));

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(),
				'error'    => array('form[error][UserRecoverPasswordControllerTestPlugin][anError]'),
			),
			$results
		);
	}

	/**
	 * Valid user, 2 plugins with errors
	 * the first plugin allows the flow to continue.  We should see the error from both plugins.
	 */
	public function testPlugins2() {
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

		$plugin1 = new UserRecoverPasswordControllerTestPlugin();

		$plugin1->setErrors(
			array('form[error][UserRecoverPasswordControllerTestPlugin1][anError]')
		);
		$plugin1->setContinue(true);

		$plugin2 = new UserRecoverPasswordControllerTestPlugin();

		$plugin2->setErrors(
			array('form[error][UserRecoverPasswordControllerTestPlugin2][anError]')
		);
		$plugin2->setContinue(false);
		$this->_controller->setPluginInstances(array($plugin1, $plugin2));

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(),
				'error'    => array(
					'form[error][UserRecoverPasswordControllerTestPlugin1][anError]',
					'form[error][UserRecoverPasswordControllerTestPlugin2][anError]',
				),
			),
			$results
		);
	}

	/**
	 * Valid user, 2 plugins with an error from the first plugin, and
	 * the first plugin stops the flow from continuing.  We should see the error from only the
	 * first plugin, and not the invalid password error.
	 */
	public function testPlugins3() {
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

		$plugin1 = new UserRecoverPasswordControllerTestPlugin();

		$plugin1->setErrors(
			array('form[error][UserRecoverPasswordControllerTestPlugin1][anError]')
		);
		$plugin1->setContinue(false);

		$plugin2 = new UserRecoverPasswordControllerTestPlugin();

		$plugin2->setErrors(
			array('form[error][UserRecoverPasswordControllerTestPlugin2][anError]')
		);
		$plugin2->setContinue(false);
		$this->_controller->setPluginInstances(array($plugin1, $plugin2));

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(),
				'error'    => array('form[error][UserRecoverPasswordControllerTestPlugin1][anError]'),
			),
			$results
		);
	}

	/**
	 * Correct password, but an error from the plugin
	 */
	public function testPlugins4() {
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

		$plugin = new UserRecoverPasswordControllerTestPlugin();

		$plugin->setErrors(array('form[error][UserRecoverPasswordControllerTestPlugin][anError]'));
		$plugin->setContinue(true);
		$this->_controller->setPluginInstances(array($plugin));

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(),
				'error'    => array('form[error][UserRecoverPasswordControllerTestPlugin][anError]'),
			),
			$results
		);
	}

	// Correct user, no plugin error
	public function testPlugins5() {
		global $gallery;

		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

		$plugin = new UserRecoverPasswordControllerTestPlugin();

		$plugin->setErrors(array());
		$plugin->setContinue(true);
		$this->_controller->setPluginInstances(array($plugin));

		$origPlatform         =& $gallery->getPlatform();
		$RecoverDummyPlatform = new RecoverDummyPlatform($origPlatform);

		$gallery->setPlatform($RecoverDummyPlatform);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPassword',
				),
				'status'   => array(
					'requestSent' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		$gallery->setPlatform($origPlatform);
	}

	/**
	 * Set the email address for 'admin'
	 *
	 * @param string $email email address
	 * @return array GalleryStatus
	 *               string previous email address
	 */
	public function _setAdminEmail($email) {
		list($ret, $user) = GalleryCoreApi::fetchUserByUsername('admin');

		if ($ret && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
			return array($ret, null);
		}

		list($ret, $lockId) = GalleryCoreApi::acquireWriteLock($user->getId());

		if ($ret) {
			return array($ret, null);
		}

		list($ret, $user) = $user->refresh();

		if ($ret) {
			return array($ret, null);
		}

		$oldEmail = $user->getEmail();

		$user->setEmail($email);

		$ret = $user->save();

		if ($ret) {
			return array($ret, null);
		}

		$ret = GalleryCoreApi::releaseLocks($lockId);

		if ($ret) {
			return array($ret, null);
		}

		return array(null, $oldEmail);
	}
}

/**
 * Mock ValidationPlugin
 */
class UserRecoverPasswordControllerTestPlugin extends GalleryValidationPlugin {
	/* deprecated dynamic properties in php 8.2 */
	public $_errors;
	public $_continue;

	public function setContinue($continue) {
		$this->_continue = $continue;
	}

	public function setErrors($errors) {
		$this->_errors = $errors;
	}

	public function performValidation(&$form, $options = array()) {
		return array(null, $this->_errors, $this->_continue);
	}
}

/**
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class RecoverDummyPlatform {
	/* deprecated dynamic properties in php 8.2 */
	public $_platform;

	public function __construct($platform) {
		$this->_platform = $platform;
	}

	public function sendEmail(
		$file,
		$body,
		$from,
		$to,
		$subject,
		$headers = null
	) {
		// Handle email..
		return $this->_handleMail($to, $subject, $body, $headers);
	}

	public function mail($to, $subject, $body, $headers = null) {
		// Handle email..
		return $this->_handleMail($to, $subject, $body, $headers);
	}

	protected function _handleMail($to, $subject, $body, $headers) {
		global $gallery;

		// Do not actually send email. Store in data session
		$mailData = array(
			'to'      => $to,
			'subject' => $subject,
			'body'    => $body,
			'headers' => $headers,
		);

		$mailData = serialize($mailData);
		$session  =& $gallery->getSession();

		$session->put('RecoverDummyPlatform.mail', $mailData);
		return true;
	}

	public function realpath($file) {
		return $this->_platform->realpath($file);
	}

	public function getDirectorySeparator() {
		return $this->_platform->getDirectorySeparator();
	}

	public function file_exists($filename) {
		return $this->_platform->file_exists($filename);
	}

	public function is_dir($filename) {
		return $this->_platform->is_dir($filename);
	}

	public function is_writeable($filename) {
		return $this->_platform->is_writeable($filename);
	}

	public function is_readable($filename) {
		return $this->_platform->is_readable($filename);
	}

	public function stat($filename) {
		return $this->_platform->stat($filename);
	}

	public function mkdir($path) {
		return $this->_platform->mkdir($path);
	}

	public function fopen($filename, $mode, $use_include_path = 0) {
		return $this->_platform->fopen($filename, $mode, $use_include_path);
	}

	public function recursiveRmdir($dirname) {
		return $this->_platform->recursiveRmdir($dirname);
	}

	public function fclose($handle) {
		return $this->_platform->fclose($handle);
	}

	public function flock($handle, $operation, &$wouldblock) {
		return $this->_platform->flock($handle, $operation, $wouldblock);
	}
}

class RecoverPasswordControllerPhpVm {
	/* deprecated dynamic properties in php 8.2 */
	public $_md5;

	public function setMd5($string) {
		$this->_md5 = $string;
	}

	public function md5($string) {
		return $this->_md5;
	}

	public function function_exists($functionName) {
		return true;
	}

	public function nl_langinfo($item) {
		return 'UTF-8';
	}

	public function iconv($inCharset, $outCharset, $string) {
		return $string;
	}
}
