<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/**
 * UserRecoverPassword controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Jay Rossiter <cryptographite@users.sf.net>
 * @version $Revision: 17580 $
 */
class UserRecoverPasswordAdminControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_admin;
	public $_savedAdminPassword;

	public function __construct($methodName) {
		parent::__construct($methodName, 'core.UserRecoverPasswordAdmin');
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $rootAlbumId) = GalleryCoreApi::getPluginParameter(
			'module',
			'core',
			'id.rootAlbum'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $rootAlbum) = GalleryCoreApi::loadEntitiesById(
			$rootAlbumId,
			'GalleryAlbumItem'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_admin) = GalleryCoreApi::loadEntitiesById(
			$rootAlbum->getOwnerId(),
			'GalleryUser'
		);

		if ($ret) {
			return $ret;
		}

		$this->_savedAdminPassword = $this->_admin->getHashedPassword();
		$session                   =& $gallery->getSession();

		$session->put(
			'core.UserRecoverPasswordAdminAuthKey',
			'abcdefghijklmnopqrstuvwxyz123456'
		);

		$platform      =& $gallery->getPlatform();
		$dummyPlatform = new UserRecoverPasswordAdminDummyPlatform(
			$platform,
			'abcdefghijklmnopqrstuvwxyz123456'
		);

		$gallery->setPlatform($dummyPlatform);
	}

	public function tearDown() {
		global $gallery;

		$session =& $gallery->getSession();

		if ($session->get('core.UserRecoverPasswordAdminAuthKey')) {
			$session->remove('core.UserRecoverPasswordAdminAuthKey');
		}

		$user =& $this->_admin;

		list($ret, $lockId) = GalleryCoreApi::acquireWriteLock($user->getId());

		if ($ret) {
			return $ret;
		}

		list($ret, $user) = $user->refresh();

		if ($ret) {
			return $ret;
		}

		$user->setHashedPassword($this->_savedAdminPassword);

		$ret = $user->save();

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::releaseLocks($lockId);

		if ($ret) {
			return $ret;
		}

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testRecoverAdminPassword() {
		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[userName]', $this->_admin->getUserName());
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[skipAuth]', true);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserLogin',
				),
				'status'   => array(
					'passwordRecovered' => 1,
				),
				'return'   => 0,
				'error'    => array(),
			),
			$results,
			'Recover Admin Password'
		);

		list($ret, $user) = $this->_admin->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($user->isCorrectPassword('abcdefg'), 'Password Incorrect');
	}

	public function testRecoverAdminPasswordAlternateUser() {
		list($ret, $user) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($user);

		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[userName]', $user->getUserName());
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[skipAuth]', true);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserLogin',
				),
				'status'   => array(
					'passwordRecovered' => 1,
				),
				'return'   => 0,
				'error'    => array(),
			),
			$results,
			'Recover Admin Password Alt User'
		);

		list($ret, $user) = $user->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($user->isCorrectPassword('abcdefg'), 'Password Incorrect');
	}

	public function testRecoverAdminPasswordBadAuth() {
		global $gallery;

		$platform      =& $gallery->getPlatform();
		$dummyPlatform = new UserRecoverPasswordAdminDummyPlatform(
			$platform,
			'123456abcdefghijklmnopqrstuvwxyz'
		);

		$gallery->setPlatform($dummyPlatform);

		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[skipAuth]', false);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordAdmin',
				),
				'status'   => array(),
				'error'    => array('form[error][authString][incorrect]'),
			),
			$results
		);
	}

	public function testRecoverAdminUsernameMissing() {
		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[userName]', '');
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[skipAuth]', true);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordAdmin',
				),
				'status'   => array(),
				'error'    => array('form[error][userName][missing]'),
			),
			$results
		);
	}

	public function testRecoverAdminUsernameIncorrect() {
		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[userName]', 'UserRecoverPasswordAdminUnitTest');
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[skipAuth]', true);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordAdmin',
				),
				'status'   => array(),
				'error'    => array('form[error][userName][incorrect]'),
			),
			$results
		);
	}

	public function testRecoverAdminPasswordMismatch() {
		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[userName]', 'admin');
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[password2]', 'abcdefghijklmn');
		GalleryUtilities::putRequestVariable('form[skipAuth]', true);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordAdmin',
				),
				'status'   => array(),
				'error'    => array('form[error][password][mismatch]'),
			),
			$results
		);
	}

	public function testRecoverAdminPasswordMissing() {
		global $gallery;

		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[userName]', 'admin');
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', '');
		GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[skipAuth]', true);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordAdmin',
				),
				'status'   => array(),
				'error'    => array('form[error][password][missing]'),
			),
			$results
		);

		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[password2]', '');
		GalleryUtilities::putRequestVariable('form[skipAuth]', true);

		$platform      =& $gallery->getPlatform();
		$dummyPlatform = new UserRecoverPasswordAdminDummyPlatform(
			$platform,
			'abcdefghijklmnopqrstuvwxyz123456'
		);

		$gallery->setPlatform($dummyPlatform);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordAdmin',
				),
				'status'   => array(),
				'error'    => array('form[error][password][missing]'),
			),
			$results
		);
	}

	public function testRecoverAdminPasswordCancel() {
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordAdmin',
				),
				'status'   => array(),
				'error'    => array(),
				'return'   => 1,
			),
			$results
		);
	}

	public function testRecoverAdminPasswordClearsFailedLogins() {
		list($ret, $user) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($user);

		$ret = GalleryCoreApi::addMapEntry(
			'FailedLoginsMap',
			array(
				'userName'    => $user->getUserName(),
				'count'       => 10,
				'lastAttempt' => time(),
			)
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
		GalleryUtilities::putRequestVariable('form[userName]', $user->getUserName());
		GalleryUtilities::putRequestVariable('form[action][recover]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');
		GalleryUtilities::putRequestVariable('form[skipAuth]', true);

		$results = $this->handleRequest();

		// We verified that password recovery works in another test
		list($ret, $searchResults) = GalleryCoreApi::getMapEntry(
			'FailedLoginsMap',
			array('userName'),
			array(
				'userName' => $user->getUserName(),
			)
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			0,
			$searchResults->resultCount(),
			'Clear Logins'
		);
	}
}

class UserRecoverPasswordAdminDummyPlatform {
	/* deprecated dynamic properties in php 8.2 */
	public $_authFileValue;
	public $_platform;

	public function __construct($platform, $authFileValue) {
		$this->_platform      = $platform;
		$this->_authFileValue = $authFileValue;
	}

	public function file_get_contents($file) {
		if ($file == (GALLERY_CONFIG_DIR . '/login.txt')) {
			$results = $this->_authFileValue;
		} else {
			$results = $this->_platform->file_get_contents($file);
		}

		return $results;
	}

	public function realpath($file) {
		return $this->_platform->realpath($file);
	}

	public function getDirectorySeparator() {
		return $this->_platform->getDirectorySeparator();
	}

	public function file_exists($filename) {
		return $this->_platform->file_exists($filename);
	}

	public function is_dir($filename) {
		return $this->_platform->is_dir($filename);
	}

	public function is_readable($filename) {
		if ($filename == GALLERY_CONFIG_DIR . '/login.txt') {
			return true;
		}

		return $this->_platform->is_readable($filename);
	}

	public function is_writeable($filename) {
		return $this->_platform->is_writeable($filename);
	}

	public function stat($filename) {
		return $this->_platform->stat($filename);
	}

	public function mkdir($path) {
		return $this->_platform->mkdir($path);
	}

	public function fopen($filename, $mode, $use_include_path = 0) {
		return $this->_platform->fopen(
			$filename,
			$mode,
			$use_include_path
		);
	}

	public function recursiveRmdir($dirname) {
		return $this->_platform->recursiveRmdir($dirname);
	}

	public function fclose($handle) {
		return $this->_platform->fclose($handle);
	}

	public function flock($handle, $operation, &$wouldblock) {
		return $this->_platform->flock(
			$handle,
			$operation,
			$wouldblock
		);
	}

	public function unlink($file) {
		return $this->_platform->unlink($file);
	}
}
