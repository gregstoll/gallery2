<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/**
 * Test main.php
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17714 $
 */
class MainTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$_SERVER['HTTP_HOST']   = 'example.com';
		$_SERVER['SERVER_PORT'] = 80;
		$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php';

		GalleryUtilities::putRequestVariable('view', 'core.Foo');

		$this->_urlGenerator = new GalleryUrlGenerator();

		$ret = $this->_urlGenerator->init('phpunit_test.php');

		if ($ret) {
			return $ret;
		}

		$this->_saveSession = $gallery->_session;
		$gallery->_phpVm    = new MainTestPhpVm();
		$gallery->_session  = new GallerySession();

		$gallery->setUrlGenerator($this->_urlGenerator);

		// Clear response headers
		$headers =& GalleryUtilities::_getResponseHeaders();
		$headers = array();
	}

	public function tearDown() {
		global $gallery;

		$gallery->_session = $this->_saveSession;

		list($ret, $languageCode) = $gallery->getActiveLanguageCode();

		if ($ret) {
			$this->failWithStatus($ret);
		} else {
			// Init a new translator so that we reset our locale
			$translator = GalleryTranslator::getMe();

			$translator->init($languageCode);
		}

		GalleryUtilities::removeRequestVariable('view');
		GalleryUtilities::removeRequestVariable('controller');

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function _getResponseHeaders() {
		$headers = GalleryUtilities::_getResponseHeaders();

		// We are not interested in the status header
		unset($headers['status']);

		return $headers;
	}

	/**
	 * Test embed-only mode with simple permission denied error.
	 */
	public function testEmbedOnly() {
		global $gallery;

		$gallery->setConfig('mode.embed.only', true);

		list($ret, $g2Data) = _GalleryMain();

		if ($ret && !($ret->getErrorCode() & ERROR_PERMISSION_DENIED)) {
			return $ret;
		}

		$this->assertEquals(GALLERY_ERROR | ERROR_PERMISSION_DENIED, $ret->getErrorCode());
	}

	/**
	 * Test embed-only mode with configured redirect URL.
	 */
	public function testEmbedOnlyUrl() {
		global $gallery;

		$urlGenerator =& $gallery->getUrlGenerator();
		$expectedUrl  = $urlGenerator->makeUrl('/embedApp/index.php');

		$gallery->setConfig('mode.embed.only', $expectedUrl);

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			return $ret;
		}

		// Verify the result
		$this->assertEquals(
			array(
				'location' => "Location: $expectedUrl",
			),
			$this->_getResponseHeaders(),
			'Wrong redirect URL'
		);
	}

	/**
	 * Test maintenance mode controller redirect with standard redirect URL.
	 */
	public function testMaintenanceMode() {
		global $gallery;

		$gallery->_session->_sessionId = 'fakeSID';

		$gallery->setConfig('mode.maintenance', true);

		$urlGenerator =& $gallery->getUrlGenerator();

		GalleryUtilities::putRequestVariable('controller', 'core.FooController');

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			return $ret;
		}

		// Verify the result
		$expectedUrl = $urlGenerator->generateUrl(
			array(
				'view' => 'core.MaintenanceMode',
			),
			array(
				'htmlEntities' => false,
				'forceFullUrl' => true,
			)
		);

		$this->assertEquals(
			array(
				'location' => "Location: $expectedUrl",
			),
			$this->_getResponseHeaders(),
			'Wrong redirect URL'
		);
	}

	/**
	 * Test maintenance mode view redirect with configured redirect URL.
	 */
	public function testMaintenanceModeUrl() {
		global $gallery;

		$urlGenerator =& $gallery->getUrlGenerator();
		$expectedUrl  = $urlGenerator->makeUrl('/maintenance.html');

		$gallery->setConfig('mode.maintenance', $expectedUrl);

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			return $ret;
		}

		// Verify the result
		$this->assertEquals(
			array(
				'location' => "Location: $expectedUrl",
			),
			$this->_getResponseHeaders(),
			'Wrong redirect URL'
		);
	}

	/**
	 * Test that we only append the GALLERYSID to Location URLs if really needed.
	 */
	public function testDoRedirectIisBugFix() {
		global $gallery;

		// Prepare test cases
		// IIS servers with a version < 6 are affected
		$buggyWebServers = array(
			'Microsoft-IIS/3.0',
			'Microsoft-IIS/4.0',
			'Microsoft-IIS/5.0',
			'Microsoft-IIS/3.5',
			'Microsoft-IIS/5.1',
			' Microsoft-IIS/5.2 ',
		);

		// All other webservers should be ignored
		$goodWebServers = array(
			'',
			'Apache/2.0.52 (Gentoo/Linux) PHP/4.4.0',
			'Apache/1.3.33',
			'Apache/2.0.52 No Microsoft-IIS/5.0',
			null,
			'Zeus',
		);

		// Controllers that should not trigger the fix, just a few samples
		$okControllers = array('core.ItemAdd', 'migrate.Redirect', null, 'core.ItemMove');

		// Controllers that should trigger the fix
		$needFixControllers = array('core.Logout', 'core.UserLogin', 'publishxp.Login');
		$protocol = GalleryUtilities::getProtocol();
		$base               = "$protocol://www.example.com/";
		$session            =& $gallery->getSession();

		$ret = $session->init();

		if ($ret) {
			return $ret;
		}

		$ret = $session->start();

		if ($ret) {
			return $ret;
		}

		$sessionId  = $session->getId();
		$sessionKey = $session->getKey();

		$this->assertTrue(
			!empty($sessionId) && !empty($sessionKey),
			'Initial session assertion failed'
		);

		$sessionParamString = GalleryUtilities::prefixFormVariable(urlencode($session->getKey())) . '=' .
		urlencode($session->getId());

		// URLs that should not be changed (because they already have the session param)
		$okUrls = array(
			"main.php?$sessionParamString",
			'main.php?g2_view=core.ShowItem&amp;' .
							$sessionParamString . '&amp;g2_navId=x7865x',
			"?$sessionParamString",
		);

		// URL that should be changed if the fix is applied
		$needFixUrls = array(
			'main.php',
			'main.php?g2_view=core.ShowItem&amp;g2_navId=x7865x',
			'?g2_controller=core.ItemEdit&amp;g2_itemId=13&amp;g2_returnUrl=' .
			urlencode("$base?$sessionParamString"),
		);

		// Run a quite exhaustive series of tests
		foreach (array_merge($goodWebServers, $buggyWebServers) as $server) {
			$_SERVER['SERVER_SOFTWARE'] = $server;

			foreach (array_merge($okControllers, $needFixControllers) as $controller) {
				foreach (array_merge($okUrls, $needFixUrls) as $url) {
					// Execute the function under test
					$this->assertEquals(
						array(
							null,
							array(
								'isDone' => true,
							),
						),
						_GalleryMain_doRedirect($base . $url, null, $controller),
						"Unexpected return value for $server, $url, $controller"
					);

					// Assemble expected result
					$expectedUrl = str_replace('&amp;', '&', $base . $url);

					// Check if this case needs the bugfix
					if (in_array($server, $buggyWebServers)
						&& in_array($controller, $needFixControllers)
						&& in_array($url, $needFixUrls)
					) {
						$expectedUrl .= strpos($expectedUrl, '?') ? '&' : '?';
						$expectedUrl .= $sessionParamString;
					}

					// Verify the result
					$this->assertEquals(
						array(
							'location' => "Location: $expectedUrl",
						),
						$this->_getResponseHeaders(),
						"Wrong header: $server, $url, $controller"
					);
				}
			}
		}
	}

	public function testDoRedirectConvertsToAbsoluteUrl() {
		global $gallery;

		// Ensure getCurrentRequestUri result is not cached
		GalleryDataCache::reset();

		// Make sure the redirect has no sessionId in it
		GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);

		unset($_COOKIE[SESSION_ID_PARAMETER], $_SERVER['HTTP_COOKIE']);
		$session = new GallerySession();

		$ret = $session->init();

		if ($ret) {
			return $ret;
		}

		$this->assertFalse($session->isUsingCookies(), 'isUsingCookies');
		$this->assertEquals(SESSION_TEMP_ID, $session->getId(), 'SESSION_TEMP_ID');

		// Execute the function under test - also checks trailing ? & and spaces are trimmed
		$this->assertEquals(
			array(
				null,
				array(
					'isDone' => true,
				),
			),
			_GalleryMain_doRedirect('main.php?&amp; '),
			'Unexpected return value'
		);

		$protocol = GalleryUtilities::getProtocol();
		// Verify the result
		$this->assertEquals(
			array(
				'location' => "Location: $protocol://example.com/gallery2/main.php",
			),
			$this->_getResponseHeaders(),
			'Wrong header'
		);
	}

	public function testDoRedirectRemoveTrailingQMark() {
		// Make sure the redirect has no sessionId in it
		GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);

		unset($_COOKIE[SESSION_ID_PARAMETER], $_SERVER['HTTP_COOKIE']);
		$session = new GallerySession();

		$ret = $session->init();

		if ($ret) {
			return $ret;
		}

		$this->assertFalse($session->isUsingCookies(), 'isUsingCookies');
		$this->assertEquals(SESSION_TEMP_ID, $session->getId(), 'SESSION_TEMP_ID');

		// Execute the function under test
		$this->assertEquals(
			array(
				null,
				array(
					'isDone' => true,
				),
			),
			_GalleryMain_doRedirect('http://example.com/main.php?&amp; '),
			'Unexpected return value'
		);

		// Verify the result
		$this->assertEquals(
			array(
				'location' => 'Location: http://example.com/main.php',
			),
			$this->_getResponseHeaders(),
			'Wrong header'
		);
	}

	public function testAuthTokenCheckIsEnforcedForControllers() {
		global $gallery;

		$session =& $gallery->getSession();

		GalleryUtilities::removeRequestVariable('view');
		GalleryUtilities::putRequestVariable('controller', 'core.UserPreferences');
		GalleryUtilities::removeRequestVariable('authToken');
		GalleryUtilities::removeRequestVariable('form[authToken]');

		$session->_isPersistent = true;

		list($ret, $g2Data) = _GalleryMain();

		if ($ret && $ret->getErrorCode() & ERROR_REQUEST_FORGED) {
			// this is what we expect
		} elseif ($ret) {
			return $ret;
		} else {
			$this->assertFalse(true, 'auth token check not executed');
		}
	}

	public function testAuthTokenCheckIsEnforcedForControllerLikeViews() {
		global $gallery;

		$session =& $gallery->getSession();

		GalleryUtilities::removeRequestVariable('controller');
		GalleryUtilities::putRequestVariable('view', 'core.SimpleCallback');
		GalleryUtilities::removeRequestVariable('authToken');
		GalleryUtilities::removeRequestVariable('form[authToken]');

		$session->_isPersistent = true;

		list($ret, $g2Data) = _GalleryMain();

		if ($ret && $ret->getErrorCode() & ERROR_REQUEST_FORGED) {
			// this is what we expect
		} elseif ($ret) {
			return $ret;
		} else {
			$this->assertFalse(true, 'auth token check not executed');
		}
	}

	public function testAuthTokenCheckIsOmittedForSpecificControllers() {
		global $gallery;

		$session =& $gallery->getSession();

		GalleryUtilities::removeRequestVariable('view');
		GalleryUtilities::putRequestVariable('controller', 'core.FooControllerController');
		GalleryUtilities::removeRequestVariable('authToken');
		GalleryUtilities::removeRequestVariable('form[authToken]');

		$session->_isPersistent = true;

		list($ret, $g2Data) = _GalleryMain();

		if ($ret && $ret->getErrorCode() & ERROR_BAD_PARAMETER) {
			// This is what we expect. The auth check has been omitted.
		} elseif ($ret) {
			return $ret;
		} else {
			$this->assertFalse(true, 'unexpected result');
		}
	}

	public function testRedirectViewForGuestWithoutPermissions() {
		global $gallery;

		$urlGenerator =& $gallery->getUrlGenerator();
		$session      =& $gallery->getSession();

		list($ret, $item) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($item);

		$ret = GalleryCoreApi::removeItemPermissions($item->getId());

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		GalleryUtilities::putRequestVariable('view', 'core.ShowItem');

		$ret = $session->init();

		if ($ret) {
			return $ret;
		}

		$ret = $this->_becomeGuestUser();

		if ($ret) {
			return $ret;
		}

		$session->doNotUseTempId();

		$expectedUrl = $urlGenerator->generateUrl(
			$gallery->getConfig('loginRedirect'),
			array(
				'forceFullUrl'   => true,
				'htmlEntities'   => false,
				'forceSessionId' => false,
			)
		);

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'isDone' => true,
			),
			$g2Data,
			'returned data'
		);

		$this->assertEquals(
			array(
				'location' => "Location: $expectedUrl",
			),
			$this->_getResponseHeaders(),
			'headers'
		);
	}

	public function testRedirectViewForAlternateGuestWithoutPermissions() {
		global $gallery;

		$urlGenerator =& $gallery->getUrlGenerator();
		$session      =& $gallery->getSession();

		list($ret, $item) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($item);

		$ret = GalleryCoreApi::removeItemPermissions($item->getId());

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		GalleryUtilities::putRequestVariable('view', 'core.ShowItem');

		$ret = $session->init();

		if ($ret) {
			return $ret;
		}

		$session->doNotUseTempId();

		$expectedUrl = $urlGenerator->generateUrl(
			$gallery->getConfig('loginRedirect'),
			array(
				'forceFullUrl'   => true,
				'htmlEntities'   => false,
				'forceSessionId' => false,
			)
		);

		$this->_becomeGuestUser();

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'isDone' => true,
			),
			$g2Data,
			'returned data'
		);

		$this->assertEquals(
			array(
				'location' => "Location: $expectedUrl",
			),
			$this->_getResponseHeaders(),
			'headers'
		);
	}

	public function testViewForUserWithoutPermission() {
		global $gallery;

		$session =& $gallery->getSession();

		list($ret, $item) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($item);

		list($ret, $user) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($user);

		// Verify registered user gets error page (used to redirect to root album)
		$ret = GalleryCoreApi::removeItemPermissions($item->getId());

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		GalleryUtilities::putRequestVariable('view', 'core.ShowItem');

		$ret = $session->init();

		if ($ret) {
			return $ret;
		}

		$gallery->setActiveUser($user);

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			$this->assertTrue(
				$ret->getErrorCode() & ERROR_PERMISSION_DENIED,
				'expect ERROR_PERMISSION_DENIED'
			);
			$this->assertTrue(
				$ret->getErrorCode() & ERROR_MISSING_OBJECT,
				'expect ERROR_MISSING_OBJECT'
			);

			if (!($ret->getErrorCode() & (ERROR_PERMISSION_DENIED | ERROR_MISSING_OBJECT))) {
				return $ret;
			}
		} else {
			$this->fail('Expected an error');
		}

		$this->assertEquals(null, $g2Data, 'returned data');
		$this->assertEquals(array(), $this->_getResponseHeaders(), 'headers');
	}

	public function testImmediateViewNormalizesError() {
		GalleryUtilities::putRequestVariable('view', 'core.MainTestImmediate');

		$ret = $this->_becomeGuestUser();

		if ($ret) {
			return $ret;
		}

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			$this->assertTrue(
				$ret->getErrorCode() & ERROR_PERMISSION_DENIED,
				'expect ERROR_PERMISSION_DENIED'
			);
			$this->assertTrue(
				$ret->getErrorCode() & ERROR_MISSING_OBJECT,
				'expect ERROR_MISSING_OBJECT'
			);

			if (!($ret->getErrorCode() & (ERROR_PERMISSION_DENIED | ERROR_MISSING_OBJECT))) {
				return $ret;
			}
		} else {
			$this->fail('Expected an error');
		}

		$this->assertEquals(null, $g2Data, 'returned data');
		$this->assertEquals(array(), $this->_getResponseHeaders(), 'headers');
	}

	public function testPostBeforeDisplayEvent() {
		GalleryUtilities::putRequestVariable('view', 'core.MainTest_Fake');

		$ret = $this->_registerFactoryImplementationForTest(
			'GalleryEventListener',
			'MainTest_BeforeDisplayListener',
			'MainTest_BeforeDisplayListener',
			__FILE__,
			'MainTest',
			array('Gallery::BeforeDisplay')
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $g2Data) = _GalleryMain(null, new MainTest_FakeTemplate());

		if ($ret) {
			return $ret;
		}

		$receivedEvent = $_GET['testEvent'];

		$this->assertEquals('Gallery::BeforeDisplay', $receivedEvent->getEventName());

		$receivedData = $receivedEvent->getData();

		$this->assertEquals(
			'gallery:themes',
			substr($receivedData['templatePath'], 0, 14),
			"Expected $receivedData[templatePath] to be a theme tpl path"
		);
		$this->assertEquals(
			'maintest_faketemplate',
			strtolower(get_class($receivedEvent->getEntity()))
		);
		$this->assertEquals('maintest_fakeview', strtolower(get_class($receivedData['view'])));
	}

	public function testImmediateViewRequestSetsCacheControl() {
		GalleryUtilities::putRequestVariable('view', 'core.MainTestImmediateItem');

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'isDone' => true,
			),
			$g2Data,
			'returned data'
		);

		$this->assertTrue(
			$this->_hasCacheControlNoCacheHeader($_REQUEST['header']),
			'wrong Cache-Control header: ' . implode(', ', $_REQUEST['header'])
		);
	}

	public function _hasCacheControlNoCacheHeader($headers) {
		foreach ($headers as $header) {
			if ($header === 'Cache-Control: no-cache') {
				return true;
			}
		}

		return false;
	}

	public function testImmediateViewRequestWithoutAutoCacheControl() {
		GalleryUtilities::putRequestVariable('view', 'core.MainTestImmediateItemNoAutoCache');

		$_REQUEST['header'] = array();

		list($ret, $g2Data) = _GalleryMain();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'isDone' => true,
			),
			$g2Data,
			'returned data'
		);

		$this->assertTrue(
			!$this->_hasCacheControlNoCacheHeader($_REQUEST['header']),
			'wrong Cache-Control header: ' . implode(', ', $_REQUEST['header'])
		);
	}
}

class MainTestPhpVm extends GalleryPhpVm {
	public function header($header, $replace = null) {
		// Avoid modifying actual header information
		$_REQUEST['header'][] = $header;
	}

	public function headers_sent() {
		return false;
	}
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryView.class');

class FooView extends GalleryView {}

/**
 * Fake view that returns a bogus body template path so that it seems like a real view.
 */
class MainTest_FakeView extends GalleryView {
	public function loadTemplate(&$template = null, &$form = null) {
		return array(
			null,
			array(
				'body' => 'anything.tpl',
			),
		);
	}
}

class MainTest_BeforeDisplayListener {
	public function handleEvent($event) {
		$_GET['testEvent'] = $event;

		return array(null, null);
	}
}

/**
 * Fake GalleryTemplate that does not actually fetch the data.
 */
class MainTest_FakeTemplate extends GalleryTemplate {
	public function __construct() {
		parent::__construct('.');
	}

	public function fetch($templateName = null) {
		return array(null, '');
	}
}

class MainTestImmediateView extends GalleryView {
	public function renderImmediate($status = null, $error = null) {
		return GalleryCoreApi::error(ERROR_MISSING_OBJECT);
	}

	public function isImmediate() {
		return true;
	}
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryController.class');

class FooControllerController extends GalleryController {
	public function omitAuthTokenCheck() {
		return true;
	}
}

class MainTestImmediateItemView extends GalleryView {
	public function getViewType() {
		return VIEW_TYPE_MODULE;
	}

	public function isImmediate() {
		return true;
	}
}

class MainTestImmediateItemNoAutoCacheView extends GalleryView {
	public function getViewType() {
		return VIEW_TYPE_MODULE;
	}

	public function isImmediate() {
		return true;
	}

	public function autoCacheControl() {
		return false;
	}
}
