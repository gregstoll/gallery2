<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
GalleryCoreApi::requireOnce('modules/core/classes/GalleryModule.class');
GalleryCoreApi::requireOnce('modules/core/classes/GalleryTheme.class');

/**
 * Test Web functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 20940 $
 */
class WebTest extends GalleryTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_outputFile;

	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$gallery->_platform = new WebTestPlatform($this);
	}

	public function testFetchWebPage() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://www.test.server/testFetchWebPage');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '5';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'test';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody) . "\n", $body);
		$this->assertEquals('http://www.test.server/testFetchWebPage', $actualUrl);
	}

	public function testFetchWebPageError404() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://www.test.server/testFetchWebPageNotExists');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '11';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'not found!';

		$this->assertFalse($success);
		$this->assertEquals($response, 'HTTP/1.1 404 NOT FOUND');
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody) . "\n", $body);
		$this->assertEquals('http://www.test.server/testFetchWebPageNotExists', $actualUrl);
	}

	public function testFetchWebPageError500() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://www.test.server/testFetchWebPageBadConfiguration');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '14';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'config error!';

		$this->assertFalse($success);
		$this->assertTrue($response, 'HTTP/1.1 500 INTERNAL SERVER ERROR');
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody) . "\n", $body);
		$this->assertEquals('http://www.test.server/testFetchWebPageBadConfiguration', $actualUrl);
	}

	public function testFetchWebPageWithSpaces() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://www.test.server/testFetchWebPage With Spaces');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '5';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'test';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody), $body);
		$this->assertEquals('http://www.test.server/testFetchWebPage%20With%20Spaces', $actualUrl);
	}

	public function testFetchWebPageExtraHeaders() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage(
			'http://www.test.server/testFetchWebPageExtraHeaders',
			array(
				'ExtraHeader' => 'ExtraValue',
			)
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '5';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';
		$expectedBody[]                         = 'test';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($success, 'fetch failed!');
		$this->assertEquals('HTTP/1.1 200 OK', $response, 'http response status');
		$this->assertEquals($expectedHeaders, $headers, 'http response headers');
		$this->assertEquals(implode("\n", $expectedBody), $body, 'body');
		$this->assertEquals('http://www.test.server/testFetchWebPageExtraHeaders', $actualUrl);
	}

	public function testFetchWebPageAlternatePort() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://www.test.server2:8080/testFetchWebPage');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '5';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'test';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody), $body);
		$this->assertEquals('http://www.test.server2:8080/testFetchWebPage', $actualUrl);
	}

	public function testFetchWebPageWithQueryString() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage(
			'http://www.test.server/testFetchWebPage?foo=bar&baz=blat&amp;hoho=blah'
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '5';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';
		$expectedBody[]                         = 'test';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody), $body);

		$this->assertEquals(
			'http://www.test.server/testFetchWebPage?foo=bar&baz=blat&hoho=blah',
			$actualUrl,
			'url; &amp; should be converted to & too'
		);
	}

	public function testFetchRedirectedWebPage() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://www.test.server/testFetchRedirectedWebPage');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '5';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'test';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody), $body);
		$this->assertEquals($actualUrl, 'http://www.test.server/testFetchWebPage');
	}

	public function testFetchRedirectedWebPageRelativeRedirect() {
		// Make sure we redirect ok if Location header is not absolute
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://my.test.server:81/testFetchRelativeRedirect');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '5';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'test';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(implode("\n", $expectedBody), $body);
		$this->assertEquals($actualUrl, 'http://www.test.server/testFetchWebPage');
	}

	public function testFetchWebPageTooManyRedirects() {
		GalleryCoreApi::requireOnce('modules/core/classes/helpers/WebHelper_simple.class');

		list($success, $body, $response, $headers, $actualUrl) = WebHelper_simple::fetchWebPage(
			'http://www.test.server/testFetchRedirectedWebPage',
			array(),
			6
		);

		$this->assertFalse($success);
		$this->assertEquals(null, $body);
		$this->assertEquals(null, $response);
		$this->assertEquals(null, $headers);
		$this->assertEquals(null, $actualUrl);
	}

	public function testFetchRedirectedDoubleLocation() {
		// Make sure we redirect ok if bad http response sends 2 Location headers
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://www.test.server/testFetchRedirectedWebPage2');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '5';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'test';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody), $body);
		$this->assertEquals($actualUrl, 'http://www.test.server/testFetchWebPage');
	}

	public function testFetchRepeatedHeader() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('http://www.test.server/testFetchCookieWebPage');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Set-Cookie']                         = array('sessionid=12345; Path=/', 'mycookie=foo; Path=/');
		$expectedHeaders['Content-Length']                     = '5';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';
		$expectedBody[]                                        = 'test';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody), $body);
		$this->assertEquals($actualUrl, 'http://www.test.server/testFetchCookieWebPage');
	}

	public function testPostToWebPage() {
		list($body, $response, $headers) = GalleryCoreApi::postToWebPage(
			'http://www.test.server/testPostToWebPage',
			array(
				'key1'  => 'value1',
				'key2'  => 'value 2',
				'key 3' => 'http://value:3/',
			)
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '15';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';
		$expectedBody[]                         = 'post successful';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody), $body);
	}

	public function testFetchWebFilePostData() {
		list($return, $response, $headers) = GalleryCoreApi::fetchWebFile(
			'http://www.test.server/testFetchWebFile'
			. '?coreApi=1.1&moduleApi=1.2s&themeApi=1.3',
			'testFetchWebFile.tmp',
			array(),
			array(
				'files[0]' => 'modules/test-11111-22222-base.package',
			)
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '5';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';
		$expectedBody[]                         = 'post successful';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertTrue($return);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals(
			"test\n",
			$this->_outputFile['testFetchWebFile.tmp']
		);
	}

	public function testFetchWebFile() {
		list($return, $response, $headers) = GalleryCoreApi::fetchWebFile(
			'http://www.test.server/testFetchWebFile?a=b&amp;c=d',
			'testFetchWebFile.tmp'
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '5';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';

		$this->assertTrue($return);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals(
			"test\n",
			$this->_outputFile['testFetchWebFile.tmp']
		);
	}

	public function testFetchWebFileExtraHeaders() {
		list($return, $response, $headers) = GalleryCoreApi::fetchWebFile(
			'http://www.test.server/testFetchWebFileExtraHeaders',
			'testFetchWebFile.tmp',
			array(
				'ExtraHeader' => 'ExtraValue',
			)
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '5';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';

		$this->assertTrue($return);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals(
			"test\n",
			$this->_outputFile['testFetchWebFile.tmp']
		);
	}

	public function testRequestWebPage() {
		list($status, $headers, $body) = GalleryCoreApi::requestWebPage(
			'http://www.test.server/testRequestWebPage',
			'OPTIONS',
			array(
				'ExtraHeader' => 'ExtraValue',
			),
			'request body'
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '15';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';
		$expectedBody[]                         = 'options successful';

		// newline at the end of the file
		$expectedBody[] = '';

		$this->assertEquals('HTTP/1.1 200 OK', $status);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals(join("\n", $expectedBody), $body);
	}

	public function testRequestWebPageWithBadChars() {
		// Verify requestWebPage translates spaces and &amp; (previously only fetch* did this)
		list($status, $headers, $body) = GalleryCoreApi::requestWebPage(
			'http://www.test.server/testFetchWebPage With Spaces?a=b&amp;c=d'
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '5';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';

		$this->assertEquals('HTTP/1.1 200 OK', $status);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals("test\n", $body);
	}

	public function testFetchHttpsWebPage() {
		list($success, $body, $response, $headers, $actualUrl) = GalleryCoreApi::fetchWebPage('https://secure.test.server/testFetchHttpsWebPage');
		$expectedHeaders['Connection']                         = 'close';
		$expectedHeaders['Date']                               = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']                      = 'bytes';
		$expectedHeaders['ETag']                               = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']                             = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']                     = '5';
		$expectedHeaders['Content-Type']                       = 'text/html';
		$expectedHeaders['Last-Modified']                      = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']                        = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']                        = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num']                = '1';

		$this->assertTrue($success);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals($expectedHeaders, $headers);
		$this->assertEquals("test\n", $body);
		$this->assertEquals('https://secure.test.server/testFetchHttpsWebPage', $actualUrl);
	}

	public function testFetchHttpsWebFile() {
		list($return, $response, $headers) = GalleryCoreApi::fetchWebFile(
			'https://secure.nice.server:83/testFetchHttpsWebFile',
			'testFetchHttpsWebFile.tmp'
		);

		$expectedHeaders['Connection']          = 'close';
		$expectedHeaders['Date']                = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Accept-Ranges']       = 'bytes';
		$expectedHeaders['ETag']                = '"122ae4-5-3fc199b0"';
		$expectedHeaders['Server']              = 'Apache/1.3.28 (Unix)';
		$expectedHeaders['Content-Length']      = '5';
		$expectedHeaders['Content-Type']        = 'text/html';
		$expectedHeaders['Last-Modified']       = 'Mon, 24 Nov 2003 05:40:00 GMT';
		$expectedHeaders['Client-Date']         = 'Mon, 24 Nov 2003 05:40:03 GMT';
		$expectedHeaders['Client-Peer']         = '209.237.226.157:80';
		$expectedHeaders['Client-Response-Num'] = '1';

		$this->assertTrue($return);
		$this->assertEquals('HTTP/1.1 200 OK', $response);
		$this->assertEquals(
			"test\n",
			$this->_outputFile['testFetchHttpsWebFile.tmp']
		);
	}
}

/**
 * Mock platform
 */
class WebTestPlatform {
	/* deprecated dynamic properties in php 8.2 */
	public $_fileBuffer;
	public $_testCase;
	public $_readBuffer;

	public function __construct(&$testCase) {
		$this->_testCase   =& $testCase;
		$this->_readBuffer = array();
	}

	public function fsockopen($target, $port, &$errno, &$errstr, $timeout) {
		if ($target == 'www.test.server' && $port == '80'
			|| $target == 'www.test.server2' && $port == '8080'
			|| $target == 'my.test.server' && $port == '81'
			|| $target == 'ssl://secure.test.server' && $port == '443'
			|| $target == 'ssl://secure.nice.server' && $port == '83'
		) {
			return 'test-resource-1';
		}

		$errno     = 1;
		$errstring = 'test failure';
	}

	public function fwrite($handle, $string, $length = 0) {
		if ($handle == 'test-resource-1') {
			switch ($string) {
				case "POST /testFetchWebFile?coreApi=1.1&moduleApi=1.2s&themeApi=1.3 HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"Content-Type: application/x-www-form-urlencoded\r\n" .
				"Content-Length: 52\r\n" .
				"\r\n" .
				'files%5B0%5D=modules%2Ftest-11111-22222-base.package':
				case "GET /testFetchWebPage HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
				case "GET /testFetchWebFile?a=b&c=d HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
				case "GET /testFetchWebPage%20With%20Spaces HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
				case "GET /testFetchWebPage%20With%20Spaces?a=b&c=d HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
				case "GET /testFetchWebPage HTTP/1.0\r\n" .
				"Host: www.test.server2\r\n" .
				"\r\n":
				case "GET /testFetchWebPage?foo=bar&baz=blat&hoho=blah HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
				case "GET /testFetchWebPageExtraHeaders HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"ExtraHeader: ExtraValue\r\n" .
				"\r\n":
				case "GET /testFetchWebFileExtraHeaders HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"ExtraHeader: ExtraValue\r\n" .
				"\r\n":
				case "GET /testFetchHttpsWebPage HTTP/1.0\r\n" .
				"Host: secure.test.server\r\n" .
				"\r\n":
				case "GET /testFetchHttpsWebFile HTTP/1.0\r\n" .
				"Host: secure.nice.server\r\n" .
				"\r\n":
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 200 OK';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Accept-Ranges: bytes';
					$buffer[]                   = 'ETag: "122ae4-5-3fc199b0"';
					$buffer[]                   = 'Server: Apache/1.3.28 (Unix)';
					$buffer[]                   = 'Content-Length: 5';
					$buffer[]                   = 'Content-Type: text/html';
					$buffer[]                   = 'Last-Modified: Mon, 24 Nov 2003 05:40:00 GMT';
					$buffer[]                   = 'Client-Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Client-Peer: 209.237.226.157:80';
					$buffer[]                   = 'Client-Response-Num: 1';
					$buffer[]                   = '';
					$buffer[]                   = 'test';
					$buffer[]                   = '';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				case "GET /testFetchWebPageNotExists HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 404 NOT FOUND';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Accept-Ranges: bytes';
					$buffer[]                   = 'ETag: "122ae4-5-3fc199b0"';
					$buffer[]                   = 'Server: Apache/1.3.28 (Unix)';
					$buffer[]                   = 'Content-Length: 11';
					$buffer[]                   = 'Content-Type: text/html';
					$buffer[]                   = 'Last-Modified: Mon, 24 Nov 2003 05:40:00 GMT';
					$buffer[]                   = 'Client-Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Client-Peer: 209.237.226.157:80';
					$buffer[]                   = 'Client-Response-Num: 1';
					$buffer[]                   = '';
					$buffer[]                   = 'not found!';
					$buffer[]                   = '';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				case "GET /testFetchWebPageBadConfiguration HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 500 INTERNAL SERVER ERROR';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Accept-Ranges: bytes';
					$buffer[]                   = 'ETag: "122ae4-5-3fc199b0"';
					$buffer[]                   = 'Server: Apache/1.3.28 (Unix)';
					$buffer[]                   = 'Content-Length: 14';
					$buffer[]                   = 'Content-Type: text/html';
					$buffer[]                   = 'Last-Modified: Mon, 24 Nov 2003 05:40:00 GMT';
					$buffer[]                   = 'Client-Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Client-Peer: 209.237.226.157:80';
					$buffer[]                   = 'Client-Response-Num: 1';
					$buffer[]                   = '';
					$buffer[]                   = 'config error!';
					$buffer[]                   = '';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				case "GET /testFetchRedirectedWebPage HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 302 Found';
					$buffer[]                   = 'Date: Mon, 24 Nov 2003 06:35:01 GMT';
					$buffer[]                   = 'Server: Apache/1.3.26 (Unix) PHP/4.1.2';
					$buffer[]                   = 'Location: http://www.test.server/testFetchWebPage';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Content-Type: text/html; charset=iso-8859-1';
					$buffer[]                   = '';
					$buffer[]                   = '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">';
					$buffer[]                   = '<HTML><HEAD>';
					$buffer[]                   = '<TITLE>302 Found</TITLE>';
					$buffer[]                   = '</HEAD><BODY>';
					$buffer[]                   = '<H1>Found</H1>';
					$buffer[]                   = 'The document has moved <A HREF="http://www.test.server' .
					'/testFetchWebPage">here</A>.<P>';
					$buffer[]                   = '<HR>';
					$buffer[]                   = '<ADDRESS>Apache/1.3.26 Server at www.test.server Port 80</ADDRESS>';
					$buffer[]                   = '</BODY></HTML>';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				case "GET /testFetchRelativeRedirect HTTP/1.0\r\n" .
				"Host: my.test.server\r\n" .
				"\r\n":
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 302 Found';
					$buffer[]                   = 'Date: Mon, 24 Nov 2003 06:35:01 GMT';
					$buffer[]                   = 'Server: Apache/1.3.26 (Unix) PHP/4.1.2';
					$buffer[]                   = 'Location: /testFetchRelativeRedirect2?query';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Content-Type: text/html; charset=iso-8859-1';
					$buffer[]                   = '';
					$buffer[]                   = '<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">';
					$buffer[]                   = '<HTML><HEAD>';
					$buffer[]                   = '<TITLE>302 Found</TITLE>';
					$buffer[]                   = '</HEAD><BODY>';
					$buffer[]                   = '<H1>Found</H1>';
					$buffer[]                   = 'The document has moved.';
					$buffer[]                   = '<HR>';
					$buffer[]                   = '<ADDRESS>Apache/1.3.26 Server at my.test.server Port 81</ADDRESS>';
					$buffer[]                   = '</BODY></HTML>';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				case "GET /testFetchRelativeRedirect2?query HTTP/1.0\r\n" .
				"Host: my.test.server\r\n" .
				"\r\n":
				case "GET /testFetchRedirectedWebPage2 HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 302 Found';
					$buffer[]                   = 'Date: Mon, 24 Nov 2004 06:35:02 GMT';
					$buffer[]                   = 'Server: Apache/1.3.33 (Unix) PHP/4.3.4';
					$buffer[]                   = 'Location: http://www.test.server/testFetchWebPage';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Content-Type: text/html; charset=iso-8859-1';
					$buffer[]                   = 'Location: http://www.test.server/testFetchNOTUsed';
					$buffer[]                   = '';
					$buffer[]                   = 'Moved.';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				case "GET /testFetchCookieWebPage HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"\r\n":
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 200 OK';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Accept-Ranges: bytes';
					$buffer[]                   = 'ETag: "122ae4-5-3fc199b0"';
					$buffer[]                   = 'Server: Apache/1.3.28 (Unix)';
					$buffer[]                   = 'Set-Cookie: sessionid=12345; Path=/';
					$buffer[]                   = 'Set-Cookie: mycookie=foo; Path=/';
					$buffer[]                   = 'Content-Length: 5';
					$buffer[]                   = 'Content-Type: text/html';
					$buffer[]                   = 'Last-Modified: Mon, 24 Nov 2003 05:40:00 GMT';
					$buffer[]                   = 'Client-Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Client-Peer: 209.237.226.157:80';
					$buffer[]                   = 'Client-Response-Num: 1';
					$buffer[]                   = '';
					$buffer[]                   = 'test';
					$buffer[]                   = '';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				case "POST /testPostToWebPage HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"Content-Type: application/x-www-form-urlencoded\r\n" .
				"Content-Length: 56\r\n" .
				"\r\n" .
				'key1=value1&key2=value+2&key+3=http%3A%2F%2Fvalue%3A3%2F':
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 200 OK';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Accept-Ranges: bytes';
					$buffer[]                   = 'ETag: "122ae4-5-3fc199b0"';
					$buffer[]                   = 'Server: Apache/1.3.28 (Unix)';
					$buffer[]                   = 'Content-Length: 15';
					$buffer[]                   = 'Content-Type: text/html';
					$buffer[]                   = 'Last-Modified: Mon, 24 Nov 2003 05:40:00 GMT';
					$buffer[]                   = 'Client-Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Client-Peer: 209.237.226.157:80';
					$buffer[]                   = 'Client-Response-Num: 1';
					$buffer[]                   = '';
					$buffer[]                   = 'post successful';
					$buffer[]                   = '';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				case "OPTIONS /testRequestWebPage HTTP/1.0\r\n" .
				"Host: www.test.server\r\n" .
				"ExtraHeader: ExtraValue\r\n" .
				"\r\n" .
				'request body':
					$buffer                     = array();
					$buffer[]                   = 'HTTP/1.1 200 OK';
					$buffer[]                   = 'Connection: close';
					$buffer[]                   = 'Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Accept-Ranges: bytes';
					$buffer[]                   = 'ETag: "122ae4-5-3fc199b0"';
					$buffer[]                   = 'Server: Apache/1.3.28 (Unix)';
					$buffer[]                   = 'Content-Length: 15';
					$buffer[]                   = 'Content-Type: text/html';
					$buffer[]                   = 'Last-Modified: Mon, 24 Nov 2003 05:40:00 GMT';
					$buffer[]                   = 'Client-Date: Mon, 24 Nov 2003 05:40:03 GMT';
					$buffer[]                   = 'Client-Peer: 209.237.226.157:80';
					$buffer[]                   = 'Client-Response-Num: 1';
					$buffer[]                   = '';
					$buffer[]                   = 'options successful';
					$buffer[]                   = '';
					$this->_readBuffer[$handle] = $buffer;

					return strlen($string);

				default:
					print "Unexpected write: $string";
			}
		}

		if (in_array($handle, array('testFetchWebFile.tmp', 'testFetchHttpsWebFile.tmp'))) {
			if (!isset($this->_testCase->_outputFile[$handle])) {
				$this->_testCase->_outputFile[$handle] = '';
			}

			$this->_testCase->_outputFile[$handle] .= $string;

			return strlen($string);
		}

		echo "Unexpected handle: [$handle]\n";

		return 0;
	}

	public function feof($handle) {
		return empty($this->_readBuffer[$handle]);
	}

	public function fgets($handle, $length = 0) {
		if (empty($this->_readBuffer[$handle])) {
			return null;
		}

		return array_shift($this->_readBuffer[$handle]) . "\n";
	}

	public function fread($handle, $length) {
		if (empty($this->_readBuffer[$handle])) {
			return null;
		}

		/*
		 * Return the number of bytes requested, or if that exceeds what we have available
		 * return what we have available.
		 */
		if ($length >= strlen(join("\n", $this->_readBuffer[$handle]))) {
			$tmp = join("\n", $this->_readBuffer[$handle]);
			unset($this->_readBuffer[$handle]);

			return $tmp;
		}

		$buf                        = join("\n", $this->_readBuffer[$handle]);
		$tmp                        = substr($buf, 0, $length);
		$this->_readBuffer[$handle] = explode("\n", substr($buf, $length + 1));

		return $tmp;
	}

	public function fclose($handle) {
		switch ($handle) {
			case 'test-resource-1':
				unset($this->_readBuffer[$handle]);

				return true;

			default:
				return false;
		}
	}

	public function fflush($handle) {
		switch ($handle) {
			case 'test-resource-1':
				return true;

			default:
				return false;
		}
	}

	public function filesize($file) {
		return filesize($file);
	}

	public function getDirectorySeparator() {
		return '/';
	}

	public function file_exists($path) {
		switch (realpath($path)) {
			case __FILE__:
			case realpath(__DIR__ . '/../../classes/GalleryAlbumItem.class'):
				return true;

			default:
				return false;
		}
	}

	public function fopen($filename, $modes) {
		if (in_array($filename, array('testFetchWebFile.tmp', 'testFetchHttpsWebFile.tmp'))
			&& $modes == 'wb'
		) {
			$this->_fileBuffer[$filename] = '';

			return $filename;
		}
	}

	public function realpath($file) {
		// These are used in testIsPathInList
		switch ($file) {
			case '/foo/bar':
			case '/foobar':
			case '/foo':
			case '/bar':
				return $file;
		}

		$path = realpath($file);

		// Stick with Unix slashes for the purpose of our tests
		return str_replace('\\', '/', $path);
	}
}
