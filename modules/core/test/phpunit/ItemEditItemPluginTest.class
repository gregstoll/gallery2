<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/**
 * ItemEditItem controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class ItemEditItemPluginTest extends ItemEditPluginTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_thumbnail;

	public function __construct($methodName) {
		parent::__construct($methodName, 'core', 'ItemEditItem');
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		for ($i = 0; $i < 2; $i++) {
			list($ret, $this->_item[$i]) = $this->_createRandomDataItem($this->_getRootId(), 'test/file');

			if ($ret) {
				return $ret;
			}

			$this->_markForCleanup($this->_item[$i]);
		}

		for ($i = 0; $i < 2; $i++) {
			list($ret, $this->_album[$i]) = $this->_createRandomAlbum($this->_getRootId());

			if ($ret) {
				return $ret;
			}

			$this->_markForCleanup($this->_album[$i]);
		}

		// Register a dummy toolkit
		$ret = GalleryCoreApi::registerFactoryImplementation(
			'GalleryToolkit',
			'ItemEditItemPluginTestToolkit',
			'ItemEditItemPluginTestToolkit',
			'modules/core/test/phpunit/ItemEditItemPluginTest.class',
			'coreTest',
			null
		);

		if ($ret) {
			return $ret;
		}

		$this->_markToolkitForCleanup('ItemEditItemPluginTestToolkit');

		// Register operations that we can perform on our mock data items
		$ret = GalleryCoreApi::registerToolkitOperation(
			'ItemEditItemPluginTestToolkit',
			array('test/file'),
			'convert-to-image/jpeg',
			array(),
			'test-description',
			'image/jpeg'
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::registerToolkitOperation(
			'ItemEditItemPluginTestToolkit',
			array('test/file'),
			'thumbnail',
			array(
				array(
					'type'        => 'int',
					'description' => 'test',
				),
				array(
					'type'        => 'int',
					'description' => 'test',
				),
			),
			'test-description',
			''
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_thumbnail) = $this->_createDerivative(
			$this->_item[0],
			$this->_item[0]->getId(),
			DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
			'thumbnail|200'
		);

		if ($ret) {
			return $ret;
		}

		$this->_preferred = null;
	}

	public function testUndo() {
		// Use valid inputs
		GalleryUtilities::putRequestVariable('form[action][undo]', 1);

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(array(array(), null), $results);
	}

	public function testEditItem() {
		// Use valid inputs
		$newPathComponent = $this->_item[0]->getPathComponent() . mt_rand();

		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', $newPathComponent);
		GalleryUtilities::putRequestVariable('form[title]', ' new title ');
		GalleryUtilities::putRequestVariable('form[summary]', ' new summary ');
		GalleryUtilities::putRequestVariable('form[keywords]', ' new keywords ');
		GalleryUtilities::putRequestVariable('form[description]', ' new description ');
		GalleryUtilities::putRequestVariable(
			'form[serialNumber]',
			$this->_item[0]->getSerialNumber()
		);
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', '400');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(
			array(array(), $this->_translate('Changes saved successfully')),
			$results
		);

		list($ret, $this->_item[0]) = $this->_item[0]->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals('new title', $this->_item[0]->getTitle());
		$this->assertEquals('new summary', $this->_item[0]->getSummary());
		$this->assertEquals('new keywords', $this->_item[0]->getKeywords());
		$this->assertEquals('new description', $this->_item[0]->getDescription());

		// Examine the thumbnail and make sure it lines up
		list($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item[0]->getId()));

		if ($ret) {
			return $ret;
		}

		if (isset($thumbTable[$this->_item[0]->getId()])) {
			$this->assertEquals(
				'thumbnail|400',
				$thumbTable[$this->_item[0]->getId()]->getDerivativeOperations()
			);
		} else {
			$this->assertFalse(true, 'thumbnail missing');
		}
	}

	public function testMaliciousMarkup() {
		$item = $this->_item[0];

		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', $item->getPathComponent());
		GalleryUtilities::putRequestVariable(
			'form[title]',
			'new[color="><script>alert(\'hi\')</script><"green]foo[/color] title'
		);
		GalleryUtilities::putRequestVariable(
			'form[summary]',
			' summary <a href="" onclick="alert(1)">hi</a>foo'
		);
		GalleryUtilities::putRequestVariable('form[keywords]', '');
		GalleryUtilities::putRequestVariable('form[description]', 'description<object>.</object>');
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', '400');

		foreach (array('html', 'bbcode') as $i => $markup) {
			$ret = $this->_setMarkupType($markup, $i == 0);

			if ($ret) {
				return $ret;
			}

			GalleryUtilities::putRequestVariable('form[serialNumber]', $item->getSerialNumber());

			$results = $this->handleRequest($item, $this->_preferred);

			$this->assertEquals(
				array(array(), $this->_translate('Changes saved successfully')),
				$results,
				$markup
			);

			list($ret, $item) = $item->refresh();

			if ($ret) {
				return $ret;
			}

			$value = $markup == 'html' ? 'new[color=&quot;&gt;&amp;lt;&quot;green]foo[/color] title' : 'new[color=&quot;&gt;&lt;script&gt;alert(\'hi\')&lt;/script&gt;'
			. '&lt;&quot;green]foo[/color] title';

			$this->assertEquals($value, $item->getTitle(), "title $markup");

			$value = $markup == 'html' ? 'summary &lt;a href=&quot;&quot;&gt;hi&lt;/a&gt;foo' : 'summary &lt;a href=&quot;&quot; onclick=&quot;alert(1)&quot;&gt;hi&lt;/a&gt;foo';

			$this->assertEquals($value, $item->getSummary(), "summary $markup");

			$value = $markup == 'html' ? 'description.' : 'description&lt;object&gt;.&lt;/object&gt;';

			$this->assertEquals($value, $item->getDescription(), "description $markup");
		}
	}

	public function testInvalidPathComponent() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', '%W$%W?$%W%/');
		GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item[0]->getSerialNumber());

		// Perform the request and verify that we failed
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(
		    array (0 => array (), 1 => 'Changes saved successfully',),
			$results
		);
	}

	public function testInvalidPathComponentDisallowedFileExtension() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', 'test_new.php');
		GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item[0]->getSerialNumber());
		// Perform the request and verify that we fail
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(
		    array (0 => array (), 1 => 'Changes saved successfully',),
			$results
		);
	}

	public function testMissingPathComponent() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::removeRequestVariable('form[pathComponent]');

		// Perform the request and verify that we failed
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(
			array(array('form[error][pathComponent][missing]'), null),
			$results
		);
	}

	public function testPathCollisionItem() {
		global $gallery;

		// Use invalid inputs
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable(
			'form[pathComponent]',
			$this->_item[1]->getPathComponent()
		);
		GalleryUtilities::putRequestVariable('form[title]', 'new title');
		GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
		GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
		GalleryUtilities::putRequestVariable('form[description]', 'new description');
		GalleryUtilities::putRequestVariable(
			'form[serialNumber]',
			$this->_item[0]->getSerialNumber()
		);

		// Perform the request and verify success (the controller works around the collision)
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(
			array(array(), $this->_translate('Changes saved successfully')),
			$results
		);

		// Make sure the object has been renamed to something similar to the new path
		list($ret, $this->_item[0]) = $this->_item[0]->refresh();

		if ($ret) {
			return $ret;
		}

		list($ret, $newPath) = $this->_item[0]->fetchPath();

		if ($ret) {
			return $ret;
		}

		list($ret, $comparePath) = $this->_item[1]->fetchPath();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals($comparePath . '_001', $newPath);

		// Make sure that the file was moved
		$platform =& $gallery->getPlatform();

		$this->assertTrue($platform->file_exists($newPath));
	}

	public function testMissingRootTitle() {
		list($ret, $rootAlbum) = GalleryCoreApi::loadEntitiesById($this->_getRootId(), 'GalleryAlbumItem');

		if ($ret) {
			return $ret;
		}

		$originalTitle = $rootAlbum->getTitle();

		// Use invalid title (missing)
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', $rootAlbum->getPathComponent());
		GalleryUtilities::putRequestVariable('form[title]', '');
		GalleryUtilities::putRequestVariable('form[summary]', $rootAlbum->getSummary());
		GalleryUtilities::putRequestVariable('form[keywords]', $rootAlbum->getKeywords());
		GalleryUtilities::putRequestVariable('form[description]', $rootAlbum->getDescription());
		GalleryUtilities::putRequestVariable('form[serialNumber]', $rootAlbum->getSerialNumber());

		// Perform the request and verify that we failed
		$results = $this->handleRequest($rootAlbum, $this->_preferred);

		$this->assertEquals(
			array(array('form[error][title][missingRootTitle]'), null),
			$results
		);

		// Make sure the title was not changed
		list($ret, $rootAlbum) = $rootAlbum->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals($originalTitle, $rootAlbum->getTitle());
	}

	public function testRenameRoot() {
		list($ret, $rootAlbum) = GalleryCoreApi::loadEntitiesById($this->_getRootId(), 'GalleryAlbumItem');

		if ($ret) {
			return $ret;
		}

		// Use invalid inputs
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', 'floort');
		GalleryUtilities::putRequestVariable('form[title]', $rootAlbum->getTitle());
		GalleryUtilities::putRequestVariable('form[summary]', $rootAlbum->getSummary());
		GalleryUtilities::putRequestVariable('form[keywords]', $rootAlbum->getKeywords());
		GalleryUtilities::putRequestVariable('form[description]', $rootAlbum->getDescription());
		GalleryUtilities::putRequestVariable('form[serialNumber]', $rootAlbum->getSerialNumber());

		// there is no UI for renaming the root album so this returns a bad parameter.
		$results = $this->handleRequest($rootAlbum, $this->_preferred, ERROR_BAD_PARAMETER);

		// Verify that the path component is still the same
		list($ret, $rootAlbum) = $rootAlbum->refresh();

		if ($ret) {
			return $ret;
		}

		// For Oracle, null is replaced with '' when loading data from the database
		$this->assertTrue(in_array($rootAlbum->getPathComponent(), array(null, '')));
	}

	public function testMissingRootTitle2() {
		list($ret, $rootAlbum) = GalleryCoreApi::loadEntitiesById($this->_getRootId(), 'GalleryAlbumItem');

		if ($ret) {
			return $ret;
		}

		$originalTitle = $rootAlbum->getTitle();

		// Use invalid title
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', $rootAlbum->getPathComponent());
		GalleryUtilities::putRequestVariable('form[title]', ' ');
		GalleryUtilities::putRequestVariable('form[summary]', $rootAlbum->getSummary());
		GalleryUtilities::putRequestVariable('form[keywords]', $rootAlbum->getKeywords());
		GalleryUtilities::putRequestVariable('form[description]', $rootAlbum->getDescription());
		GalleryUtilities::putRequestVariable('form[serialNumber]', $rootAlbum->getSerialNumber());

		list($ret, $rootAlbum) = $rootAlbum->refresh();

		// Perform the request and verify that we failed
		$results = $this->handleRequest($rootAlbum, $this->_preferred);

		$this->assertEquals(
			array(array('form[error][title][missingRootTitle]'), null),
			$results
		);

		// Make sure the title was not changed
		list($ret, $rootAlbum) = $rootAlbum->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals($originalTitle, $rootAlbum->getTitle());
	}

	public function testPathCollisionAlbum() {
		global $gallery;

		// Use invalid inputs
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable(
			'form[pathComponent]',
			$this->_album[1]->getPathComponent()
		);
		GalleryUtilities::putRequestVariable('form[title]', 'new title');
		GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
		GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
		GalleryUtilities::putRequestVariable('form[description]', 'new description');
		GalleryUtilities::putRequestVariable('form[serialNumber]', 1);

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest($this->_album[0], $this->_preferred);

		$this->assertEquals(
			array(array(), $this->_translate('Changes saved successfully')),
			$results
		);

		// The object is in the new path, but with a trailing _001 in the name to disambiguate it
		list($ret, $this->_album[0]) = $this->_album[0]->refresh();

		if ($ret) {
			return $ret;
		}

		list($ret, $newPath) = $this->_album[0]->fetchPath();

		if ($ret) {
			return $ret;
		}

		list($ret, $targetPath) = $this->_album[1]->fetchPath();

		if ($ret) {
			return $ret;
		}

		// Verify that the new path is correct
		$platform   =& $gallery->getPlatform();
		$slash      = $platform->getDirectorySeparator();
		$targetPath = sprintf(
			'%s%s%s_001%s',
			dirname($targetPath),
			$slash,
			basename($targetPath),
			$slash
		);

		$this->assertEquals($targetPath, $newPath);

		// Make sure that the dir was actually moved
		$this->assertTrue($platform->file_exists($targetPath));
	}

	public function testInvalidSerialNumber() {
		// Use an invalid Serial
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable(
			'form[pathComponent]',
			$this->_item[0]->getPathComponent()
		);
		GalleryUtilities::putRequestVariable('form[title]', 'new title');
		GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
		GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
		GalleryUtilities::putRequestVariable('form[description]', 'new description');
		GalleryUtilities::putRequestVariable('form[serialNumber]', -1);

		$results = $this->handleRequest($this->_item[0], $this->_preferred, ERROR_OBSOLETE_DATA);
	}

	public function testMoveItemWithInvalidSerialNumber() {
		global $gallery;

		// Get some stats on the file before we try moving
		$platform =& $gallery->getPlatform();

		list($ret, $originalPath) = $this->_item[0]->fetchPath();

		if ($ret) {
			return $ret;
		}

		// Use an invalid Serial
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', 'new' . mt_rand(0, 1000));
		GalleryUtilities::putRequestVariable('form[title]', 'new title');
		GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
		GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
		GalleryUtilities::putRequestVariable('form[description]', 'new description');
		GalleryUtilities::putRequestVariable('form[serialNumber]', -1);

		$results = $this->handleRequest($this->_item[0], $this->_preferred, ERROR_OBSOLETE_DATA);

		// Make sure the object is still in the original path
		list($ret, $this->_item[0]) = $this->_item[0]->refresh();

		if ($ret) {
			return $ret;
		}

		list($ret, $newPath) = $this->_item[0]->fetchPath();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals($originalPath, $newPath);

		// Make sure that the file was not moved
		$this->assertTrue($platform->file_exists($originalPath), 'File should not have been moved');
	}

	public function testMoveAlbumWithInvalidSerialNumber() {
		global $gallery;

		// Get some stats on the file before we try moving
		$platform =& $gallery->getPlatform();

		list($ret, $originalPath) = $this->_album[0]->fetchPath();

		if ($ret) {
			return $ret;
		}

		// Use an invalid Serial
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[pathComponent]', 'new' . mt_rand(0, 1000));
		GalleryUtilities::putRequestVariable('form[title]', 'new title');
		GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
		GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
		GalleryUtilities::putRequestVariable('form[description]', 'new description');
		GalleryUtilities::putRequestVariable('form[serialNumber]', -1);

		$results = $this->handleRequest($this->_album[0], $this->_preferred, ERROR_OBSOLETE_DATA);

		// Make sure the object is still in the original path
		list($ret, $this->_album[0]) = $this->_album[0]->refresh();

		if ($ret) {
			return $ret;
		}

		list($ret, $newPath) = $this->_album[0]->fetchPath();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals($originalPath, $newPath);

		// Make sure that the file was not moved
		$this->assertTrue($platform->file_exists($originalPath), 'Album should not have been moved');
	}

	public function testEditOriginationTimestamp() {
		// Use valid inputs
		GalleryUtilities::putRequestVariable('form[action][save]', 1);

		$this->_putItemRequestVariables($this->_item[0]);

		GalleryUtilities::putRequestVariable('form[originationTimestampSplit][Date_Month]', '08');
		GalleryUtilities::putRequestVariable('form[originationTimestampSplit][Date_Day]', '09');
		GalleryUtilities::putRequestVariable('form[originationTimestampSplit][Date_Year]', '2003');
		GalleryUtilities::putRequestVariable('form[originationTimestampSplit][Time_Hour]', '22');
		GalleryUtilities::putRequestVariable('form[originationTimestampSplit][Time_Minute]', '50');
		GalleryUtilities::putRequestVariable('form[originationTimestampSplit][Time_Second]', '59');

		// Perform the request and verify that we are ok
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(
			array(array(), $this->_translate('Changes saved successfully')),
			$results
		);
		$this->assertEquals(mktime(22, 50, 59, 8, 9, 2003), $this->_item[0]->getOriginationTimestamp());
	}

	public function testCreateThumbnail() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', 200);

		$this->_putItemRequestVariables($this->_item[1]);

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest($this->_item[1], $this->_preferred);

		$this->assertEquals(
			array(array(), $this->_translate('Changes saved successfully')),
			$results
		);

		// Verify thumbnail
		list($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item[1]->getId()));

		if ($ret) {
			return $ret;
		}

		if (isset($thumbTable[$this->_item[1]->getId()])) {
			// convert-to-image/jpeg is added to make thumbnail a viewable mime type
			$this->assertEquals(
				'thumbnail|200;convert-to-image/jpeg',
				$thumbTable[$this->_item[1]->getId()]->getDerivativeOperations()
			);
		} else {
			$this->assertTrue(false, 'We should have a thumbnail');
		}
	}

	public function testCreateAlbumHighlight() {
		list($ret, $item) = $this->_createRandomDataItem($this->_album[0]->getId(), 'test/file');

		if ($ret) {
			return $ret;
		}

		// Verify we do not have a highlight
		list($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_album[0]->getId()));

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(empty($thumbTable), 'We should not have a thumbnail');

		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', 200);

		$this->_putItemRequestVariables($this->_album[0]);

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest($this->_album[0], $this->_preferred);

		$this->assertEquals(
			array(array(), $this->_translate('Changes saved successfully')),
			$results
		);

		// Verify thumbnail
		list($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_album[0]->getId()));

		if ($ret) {
			return $ret;
		}

		if (isset($thumbTable[$this->_album[0]->getId()])) {
			$this->assertEquals(
				'thumbnail|200',
				$thumbTable[$this->_album[0]->getId()]->getDerivativeOperations()
			);
		} else {
			$this->assertTrue(false, 'We should have a thumbnail');
		}
	}

	public function testRemoveThumbnail() {
		// Verify we have a thumbnail
		list($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item[0]->getId()));

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(isset($thumbTable[$this->_item[0]->getId()]), 'We should have a thumbnail');

		// Use valid inputs
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', '');

		$this->_putItemRequestVariables($this->_item[0]);

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(
			array(array(), $this->_translate('Changes saved successfully')),
			$results
		);

		// Verify we have no more thumbnail
		list($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item[0]->getId()));

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(
			!isset($thumbTable[$this->_item[0]->getId()]),
			'We should not have a thumbnail'
		);
	}

	public function testZeroThumbnail() {
		// Size zero should remove thumbnail, just like empty value
		list($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item[0]->getId()));

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(isset($thumbTable[$this->_item[0]->getId()]), 'We should have a thumbnail');

		// Use valid inputs
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', '0');

		$this->_putItemRequestVariables($this->_item[0]);

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(
			array(array(), $this->_translate('Changes saved successfully')),
			$results
		);

		// Verify we have no more thumbnail
		list($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item[0]->getId()));

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(
			!isset($thumbTable[$this->_item[0]->getId()]),
			'We should not have a thumbnail'
		);
	}

	public function testInvalidThumbnailSize() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', 'xyz');

		$this->_putItemRequestVariables($this->_item[0]);

		// Perform the request and verify that we failed
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(array(array('form[error][thumbnail][size][invalid]'), null), $results);
	}

	public function testNegativeThumbnailSize() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', '-100');

		$this->_putItemRequestVariables($this->_item[0]);

		// Perform the request and verify that we failed
		$results = $this->handleRequest($this->_item[0], $this->_preferred);

		$this->assertEquals(array(array('form[error][thumbnail][size][invalid]'), null), $results);
	}

	public function testThumbnailForEmptyAlbum() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[thumbnail][size]', '120');

		$this->_putItemRequestVariables($this->_album[0]);

		// Perform the request and verify that we failed
		$results = $this->handleRequest($this->_album[0], $this->_preferred);

		$this->assertEquals(
			array(array('form[error][thumbnail][create][forAlbum]'), null),
			$results
		);
	}

	public function _putItemRequestVariables(&$item) {
		// Put item attributes into request
		GalleryUtilities::putRequestVariable('form[pathComponent]', $item->getPathComponent());
		GalleryUtilities::putRequestVariable('form[title]', $item->getTitle());
		GalleryUtilities::putRequestVariable('form[summary]', $item->getSummary());
		GalleryUtilities::putRequestVariable('form[keywords]', $item->getKeywords());
		GalleryUtilities::putRequestVariable('form[description]', $item->getDescription());
		GalleryUtilities::putRequestVariable('form[serialNumber]', $item->getSerialNumber());
	}
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryToolkit.class');

/**
 * Test toolkit
 */
class ItemEditItemPluginTestToolkit extends GalleryToolkit {
	/**
	 * @see GalleryToolkit::performOperation
	 * Dummy operation
	 */
	public function performOperation(
		$mimeType,
		$operationName,
		$sourceFilename,
		$destFilename,
		$parameters,
		$context = array()
	) {
		global $gallery;

		$platform =& $gallery->getPlatform();

		if ($sourceFilename != $destFilename) {
			$platform->copy($sourceFilename, $destFilename);
		}

		$fd = $platform->fopen($destFilename, 'a');

		$platform->fwrite($fd, $operationName);
		$platform->fclose($fd);

		return array(null, $mimeType, $context);
	}

	/**
	 * @see GalleryToolkit::mergeOperations
	 * Dummy operation
	 */
	public function mergeOperations($operation1, $args1, $operation2, $args2) {
		// Do something stupid, but predictable
		return array(
			null,
			$operation1 . '+' . $operation2,
			array_merge($args1, array('+'), $args2),
		);
	}
}
