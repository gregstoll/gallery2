<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/**
 * UserRecoverPassword controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class UserRecoverPasswordConfirmControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_hashedPassword;

	public function __construct($methodName) {
		parent::__construct($methodName, 'core.UserRecoverPasswordConfirm');
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Create a new user
		list($ret, $this->_user) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_user);

		$this->_hashedPassword = $this->_user->getHashedPassword();
	}

	public function testRecoverPassword() {
		global $gallery;

		$ret = GalleryCoreApi::addMapEntry(
			'GalleryRecoverPasswordMap',
			array(
				'userName'       => $this->_user->getUserName(),
				'authString'     => md5('12345'),
				'requestExpires' => time() + 60,
			)
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('form[action][submit]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
		GalleryUtilities::putRequestVariable('form[authString]', md5('12345'));
		GalleryUtilities::putRequestVariable('form[password1]', 'recoverConfirmPass');
		GalleryUtilities::putRequestVariable('form[password2]', 'recoverConfirmPass');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserLogin',
				),
				'return'   => 0,
				'status'   => array(
					'passwordRecovered' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		list($ret, $this->_user) = $this->_user->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			true,
			$this->_user->isCorrectPassword('recoverConfirmPass'),
			'Password not changed'
		);

		$ret = $this->_verifyMapEntryRemoved();

		if ($ret) {
			return $ret;
		}
	}

	public function testRecoverPasswordClearsFailedLogins() {
		global $gallery;

		$ret = GalleryCoreApi::addMapEntry(
			'GalleryRecoverPasswordMap',
			array(
				'userName'       => $this->_user->getUserName(),
				'authString'     => md5('12345'),
				'requestExpires' => time() + 60,
			)
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addMapEntry(
			'FailedLoginsMap',
			array(
				'userName'    => $this->_user->getUserName(),
				'count'       => 10,
				'lastAttempt' => time(),
			)
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('form[action][submit]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
		GalleryUtilities::putRequestVariable('form[authString]', md5('12345'));
		GalleryUtilities::putRequestVariable('form[password1]', 'recoverConfirmPass');
		GalleryUtilities::putRequestVariable('form[password2]', 'recoverConfirmPass');

		$results = $this->handleRequest();

		// We verified that password recovery works in another test
		list($ret, $searchResults) = GalleryCoreApi::getMapEntry(
			'FailedLoginsMap',
			array('userName'),
			array(
				'userName' => $this->_user->getUserName(),
			)
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(0, $searchResults->resultCount());
	}

	public function testRequestTooOld() {
		global $gallery;

		$ret = GalleryCoreApi::addMapEntry(
			'GalleryRecoverPasswordMap',
			array(
				'userName'       => $this->_user->getUserName(),
				'authString'     => md5('12345'),
				'requestExpires' => mktime(0, 0, 0, 1, 4, 2005),
			)
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('form[action][submit]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
		GalleryUtilities::putRequestVariable('form[authString]', md5('12345'));
		GalleryUtilities::putRequestVariable('form[password1]', 'password');
		GalleryUtilities::putRequestVariable('form[password2]', 'password');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordConfirm',
				),
				'status'   => array(),
				'error'    => array('form[error][request][tooOld]'),
			),
			$results
		);

		$ret = $this->_verifyMapEntryRemoved();

		if ($ret) {
			return $ret;
		}

		$this->_verifyNoPasswordChange();
	}

	public function testRequestMissing() {
		GalleryUtilities::putRequestVariable('form[action][submit]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', 'recoverTest12345');
		GalleryUtilities::putRequestVariable('form[authString]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'password');
		GalleryUtilities::putRequestVariable('form[password2]', 'password');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordConfirm',
				),
				'status'   => array(),
				'error'    => array('form[error][request][missing]'),
			),
			$results
		);

		$this->_verifyNoPasswordChange();
	}

	public function testPasswordMismatch() {
		GalleryUtilities::putRequestVariable('form[action][submit]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', 'recoverTest12345');
		GalleryUtilities::putRequestVariable('form[authString]', 1);
		GalleryUtilities::putRequestVariable('form[password1]', 'password');
		GalleryUtilities::putRequestVariable('form[password2]', 'mismatch');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordConfirm',
				),
				'status'   => array(),
				'error'    => array('form[error][password][mismatch]'),
			),
			$results
		);

		$this->_verifyNoPasswordChange();
	}

	public function testMissingInputs() {
		GalleryUtilities::putRequestVariable('form[action][submit]', 1);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordConfirm',
				),
				'status'   => array(),
				'error'    => array(
					'form[error][userName][missing]',
					'form[error][authString][missing]',
					'form[error][password][missing]',
				),
			),
			$results
		);

		$this->_verifyNoPasswordChange();
	}

	public function testCancel() {
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'return'   => 1,
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserRecoverPasswordConfirm',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		$this->_verifyNoPasswordChange();
	}

	public function _verifyNoPasswordChange() {
		$this->assertEquals(
			$this->_hashedPassword,
			$this->_user->getHashedPassword(),
			'Passwords changed'
		);
	}

	public function _verifyMapEntryRemoved() {
		global $gallery;

		$query = '
	    SELECT
		[GalleryRecoverPasswordMap::userName]
	    FROM
		[GalleryRecoverPasswordMap]
	    WHERE
		[GalleryRecoverPasswordMap::userName] = ?
	';

		$data = array($this->_user->getUserName());

		list($ret, $searchResults) = $gallery->search($query, $data);

		if ($ret) {
			return $ret;
		}

		if ($results = $searchResults->nextResult()) {
			$this->assertTrue($results[0], 'RecoverMap entry was not purged during password reset');
		}

		return null;
	}
}
