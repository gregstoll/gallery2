<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
GalleryCoreApi::requireOnce('modules/core/classes/helpers/GalleryCharsetHelper_simple.class');
GalleryCoreApi::requireOnce('modules/core/classes/helpers/GalleryCharsetHelper_medium.class');

/**
 * Test character set helper
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class CharsetTest extends GalleryTestCase {
	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		GalleryDataCache::reset();
	}

	public function testAssertMbFunctionOverloadingDisabled() {
		// Assert that we are not accidentaly using mb_ functions in our fallback
		$mbFuncOverload = (int)ini_get('mbstring.func_overload');

		$this->assertTrue(
			!($mbFuncOverload & 2),
			'mb function overload str functions. ' .
			'Please disable mbstring.func_overload to test PHP fallback.'
		);
	}

	public function testConvertToUtf8UsingIconv() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);
		$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
	}

	public function testConvertFromUtf8UsingIconv() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);
		$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-1//IGNORE', 'foo'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
	}

	public function testConvertToUtf8UsingMbConvertEncoding() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', true);
		$phpVm->setFunctionExists('recode_string', false);
		$phpVm->setReturn('mb_convert_encoding', array('foo', 'UTF-8', 'ISO-8859-1'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
	}

	public function testConvertFromUtf8UsingMbConvertEncoding() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', true);
		$phpVm->setFunctionExists('recode_string', false);
		$phpVm->setReturn('mb_convert_encoding', array('foo', 'ISO-8859-1', 'UTF-8'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
	}

	public function testConvertToUtf8UsingRecodeString() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', true);
		$phpVm->setReturn('recode_string', array('ISO-8859-1..UTF-8', 'foo'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
	}

	public function testConvertFromUtf8UsingRecodeString() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', true);
		$phpVm->setReturn('recode_string', array('UTF-8..ISO-8859-1', 'foo'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
	}

	public function testConvertToUtf8UsingPurePhp() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(
			chr(195) . chr(181),
			GalleryCoreApi::convertToUtf8(chr(245), 'ISO-8859-1')
		);
	}

	public function testConvertFromUtf8UsingPurePhp() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(
			chr(245),
			GalleryCoreApi::convertFromUtf8(chr(195) . chr(181), 'ISO-8859-1')
		);
	}

	public function testWindowsAndCodePageAreSynonyms() {
		global $gallery;

		// Force it to use our PHP charset tables
		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(
			"\xe2\x80\xa0",
			GalleryCoreApi::convertToUtf8(chr(134), 'Windows-1252'),
			'Windows-1252'
		);
		$this->assertEquals(
			"\xe2\x80\xa0",
			GalleryCoreApi::convertToUtf8(chr(134), 'CP1252'),
			'CP1252'
		);
	}

	// Iconv fails, so we use mb_convert_encoding instead
	public function testConvertToUtf8UsingIconvFallback1() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setFunctionExists('mb_convert_encoding', true);
		$phpVm->setFunctionExists('recode_string', false);
		$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);
		$phpVm->setReturn('mb_convert_encoding', array('foo', 'UTF-8', 'ISO-8859-1'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
	}

	// Iconv fails, so we use mb_convert_encoding instead
	public function testConvertFromUtf8UsingIconvFallback1() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setFunctionExists('mb_convert_encoding', true);
		$phpVm->setFunctionExists('recode_string', false);
		$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-1//IGNORE', 'foo'), false);
		$phpVm->setReturn('mb_convert_encoding', array('foo', 'ISO-8859-1', 'UTF-8'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
	}

	// Iconv fails, so we use recode_string instead
	public function testConvertToUtf8UsingIconvFallback2() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', true);
		$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);
		$phpVm->setReturn('recode_string', array('ISO-8859-1..UTF-8', 'foo'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
	}

	// Iconv fails, so we use recode_string instead
	public function testConvertFromUtf8UsingIconvFallback2() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', true);
		$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-1//IGNORE', 'foo'), false);
		$phpVm->setReturn('recode_string', array('UTF-8..ISO-8859-1', 'foo'), 'success');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
	}

	// Iconv fails, so we use PHP instead
	public function testConvertToUtf8UsingIconvFallback3() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);
		$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(
			chr(195) . chr(181),
			GalleryCoreApi::convertToUtf8(chr(245), 'ISO-8859-1')
		);
	}

	// Iconv fails, so we use PHP instead
	public function testConvertFromUtf8UsingIconvFallback3() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);
		$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-1//IGNORE', 'foo'), false);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(
			chr(245),
			GalleryCoreApi::convertFromUtf8(chr(195) . chr(181), 'ISO-8859-1')
		);
	}

	// Unknown source encoding; pure php punts and returns original string
	public function testConvertToUtf8UsingPurePhpUnknownSourceEncoding() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(chr(245), GalleryCoreApi::convertToUtf8(chr(245), 'ISO-BOGO-9000'));
	}

	// Unknown source encoding; pure php punts and returns original string
	public function testConvertFromUtf8UsingPurePhpUnknownSourceEncoding() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('iconv', false);
		$phpVm->setFunctionExists('mb_convert_encoding', false);
		$phpVm->setFunctionExists('recode_string', false);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(chr(245), GalleryCoreApi::convertFromUtf8(chr(245), 'ISO-BOGO-9000'));
	}

	public function testDetectSourceEncodingWithNlLangInfo() {
		global $gallery;

		// On windows boxes, we do not have the CODESET constant, so fake it
		if (!defined('CODESET')) {
			define('CODESET', 'CODESET');
		}

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('nl_langinfo', true);
		$phpVm->setReturn('nl_langinfo', array(CODESET), 'UTF-8');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('UTF-8', GalleryCharsetHelper_simple::detectSystemCharset());

		GalleryDataCache::reset();

		$phpVm->setReturn('nl_langinfo', array(CODESET), 'Windows-1252');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('Windows-1252', GalleryCharsetHelper_simple::detectSystemCharset());

		// Verify value is cached
		$phpVm->setReturn('nl_langinfo', array(CODESET), 'abc123');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('Windows-1252', GalleryCharsetHelper_simple::detectSystemCharset());

		// FreeBSD may return charset with missing hyphen; verify we remap this
		GalleryDataCache::reset();

		$phpVm->setReturn('nl_langinfo', array(CODESET), 'ISO8859-1');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('ISO-8859-1', GalleryCharsetHelper_simple::detectSystemCharset());

		// Gentoo may return ANSI_X3.4-1968 which is just ASCII
		GalleryDataCache::reset();

		$phpVm->setReturn('nl_langinfo', array(CODESET), 'ANSI_X3.4-1968');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('ASCII', GalleryCharsetHelper_simple::detectSystemCharset());

		// We can override what the system tells us using $gallery->setConfig
		$gallery->setConfig('systemCharset', 'xyz123');

		GalleryDataCache::reset();

		$this->assertEquals('xyz123', GalleryCharsetHelper_simple::detectSystemCharset());
		$gallery->setConfig('systemCharset', null);
	}

	public function testDetectSourceEncodingWithoutNlLangInfo() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('nl_langinfo', false);

		$phpVm->setReturn(
			'setlocale',
			array(LC_ALL, '0'),
			'LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=C'
		);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('UTF-8', GalleryCharsetHelper_simple::detectSystemCharset());

		// Verify we map 1252 from setlocale to full charset name
		GalleryDataCache::reset();

		$phpVm->setReturn(
			'setlocale',
			array(LC_ALL, '0'),
			'LC_CTYPE=English_United States.1252;LC_NUMERIC=C;LC_TIME=C'
		);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('Windows-1252', GalleryCharsetHelper_simple::detectSystemCharset());

		// Sometimes we just get French_France.1252 instead of LC_CTYPE=...
		GalleryDataCache::reset();

		$phpVm->setReturn('setlocale', array(LC_ALL, '0'), 'German_Switzerland.1252');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(
			'Windows-1252',
			GalleryCharsetHelper_simple::detectSystemCharset(),
			'short format'
		);

		// Sometimes we just get French_France.1252 instead of LC_CTYPE=...
		GalleryDataCache::reset();

		$phpVm->setReturn('setlocale', array(LC_ALL, '0'), 'German_Switzerland.1252');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(
			'Windows-1252',
			GalleryCharsetHelper_simple::detectSystemCharset(),
			'short format'
		);

		// All .125x charsets should get converted to CP125x
		GalleryDataCache::reset();

		$phpVm->setReturn(
			'setlocale',
			array(LC_ALL, '0'),
			'LC_CTYPE=Russian_Russia.1251;LC_NUMERIC=C;LC_TIME=C'
		);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('CP1251', GalleryCharsetHelper_simple::detectSystemCharset());

		// All .125x charsets should get converted to CP125x
		GalleryDataCache::reset();

		$phpVm->setReturn(
			'setlocale',
			array(LC_ALL, '0'),
			'LC_CTYPE=Whatever.1258;LC_NUMERIC=C;LC_TIME=C'
		);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('CP1258', GalleryCharsetHelper_simple::detectSystemCharset());

		// On windows boxes, we do not have the CODESET constant, so fake it
		if (!defined('CODESET')) {
			define('CODESET', 'CODESET');
		}

		/*
		 * Windows may return true for function_exists('nl_langinfo') and then print
		 * a warning message when the function is called:
		 * Warning: nl_langinfo() is not supported in this PHP build
		 */
		GalleryDataCache::reset();

		$phpVm->setFunctionExists('nl_langinfo', true);
		$phpVm->setReturn('nl_langinfo', array(CODESET), false);

		$phpVm->setReturn(
			'setlocale',
			array(LC_ALL, '0'),
			'LC_CTYPE=Russian_Russia.1251;LC_NUMERIC=C;LC_TIME=C'
		);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals(
			'CP1251',
			GalleryCharsetHelper_simple::detectSystemCharset(),
			'Wrong system charset'
		);

		// We can override what the system tells us using $gallery->setConfig
		$gallery->setConfig('systemCharset', 'xyz123');

		GalleryDataCache::reset();

		$this->assertEquals('xyz123', GalleryCharsetHelper_simple::detectSystemCharset());
		$gallery->setConfig('systemCharset', null);
	}

	public function testDetectSourceEncodingWithOpenBSDBug() {
		// nl_langinfo(CODESET) on OpenBSD 3.7 returns the wrong value (D_T_FMT value instead)
		global $gallery;

		// On windows boxes, we do not have the CODESET constant, so fake it
		if (!defined('CODESET')) {
			define('CODESET', 'CODESET');
		}

		if (!defined('D_T_FMT')) {
			define('D_T_FMT', 'D_T_FMT');
		}

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('nl_langinfo', true);
		$phpVm->setReturn('nl_langinfo', array(CODESET), '%a %b %d %H:%M:%S %Y');
		$phpVm->setReturn('nl_langinfo', array(D_T_FMT), '%a %b %d %H:%M:%S %Y');

		$phpVm->setReturn(
			'setlocale',
			array(LC_ALL, '0'),
			'LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=C'
		);

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('UTF-8', GalleryCharsetHelper_simple::detectSystemCharset());
	}

	public function testConvertToUtf8SystemCharset() {
		global $gallery;

		// On windows boxes, we do not have the CODESET constant, so fake it
		if (!defined('CODESET')) {
			define('CODESET', 'CODESET');
		}

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('nl_langinfo', true);
		$phpVm->setReturn('nl_langinfo', array(CODESET), 'ISO-8859-2');
		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setReturn('iconv', array('ISO-8859-2', 'UTF-8', 'foo'), 'bar');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('bar', GalleryCoreApi::convertToUtf8('foo'));
	}

	public function testConvertFromUtf8SystemCharset() {
		global $gallery;

		// On windows boxes, we do not have the CODESET constant, so fake it
		if (!defined('CODESET')) {
			define('CODESET', 'CODESET');
		}

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('nl_langinfo', true);
		$phpVm->setReturn('nl_langinfo', array(CODESET), 'ISO-8859-2');
		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-2//IGNORE', 'foo'), 'bar');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('bar', GalleryCoreApi::convertFromUtf8('foo'));
	}

	public function testConvertToUtf8UnknownSystemCharset() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('nl_langinfo', false);
		$phpVm->setReturn('setlocale', array(LC_ALL, '0'), 'no_CLUE');
		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setReturn('iconv', array(null, 'UTF-8', 'foo'), 'iconv should not be called');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('foo', GalleryCoreApi::convertToUtf8('foo'));
	}

	public function testConvertFromUtf8UnknownSystemCharset() {
		global $gallery;

		$phpVm = new CharsetTestPhpVm();

		$phpVm->setFunctionExists('nl_langinfo', false);
		$phpVm->setReturn('setlocale', array(LC_ALL, '0'), 'no_CLUE');
		$phpVm->setFunctionExists('iconv', true);
		$phpVm->setReturn('iconv', array('UTF-8', null, 'foo'), 'iconv should not be called');

		$gallery->_phpVm = $phpVm;

		$this->assertEquals('foo', GalleryCoreApi::convertFromUtf8('foo'));
	}

	public function testUtf8Substring() {
		// Russian
		$utf8 = ("\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0" .
		 "\xb8\xd0\xb9\xd0\x97\xd0\xb4\xd1\x80\xd0\xb0" .
		 "\xd0\xb2\xd1\x81\xd1\x82\xd0\xb2\xd1\x83");

		$this->assertEquals(
			"\xd0\xa0",
			GalleryCoreApi::utf8Substring($utf8, 0, 1),
			'1 char (ru), standard version'
		);
		$this->assertEquals(
			"\xd0\xa0",
			GalleryCharsetHelper_medium::phpUtf8Substring($utf8, 0, 1),
			'1 char (ru), php version'
		);
		$this->assertEquals(
			"\xd0\xa0\xd1\x83\xd1\x81\xd1\x81",
			GalleryCoreApi::utf8Substring($utf8, 0, 4),
			'4 chars (ru), standard version'
		);
		$this->assertEquals(
			"\xd0\xa0\xd1\x83\xd1\x81\xd1\x81",
			GalleryCharsetHelper_medium::phpUtf8Substring($utf8, 0, 4),
			'4 chars (ru), php version'
		);

		// Hebrew
		$utf8 = ("\xd7\x90\xd7\xa0\xd7\x99 \xd7\x99\xd7\x9b\xd7\x95\xd7" .
		 "\x9c \xd7\x9c\xd7\x90\xd7\x9b\xd7\x95\xd7\x9c \xd7\x96" .
		 "\xd7\x9b\xd7\x95\xd7\x9b\xd7\x99\xd7\xaa \xd7\x95\xd7" .
		 "\x96\xd7\x94 \xd7\x9c\xd7\x90 \xd7\x9e\xd7\x96\xd7\x99");

		$this->assertEquals(
			"\xd7\x90",
			GalleryCoreApi::utf8Substring($utf8, 0, 1),
			'1 char (he), standard version'
		);
		$this->assertEquals(
			"\xd7\x90",
			GalleryCharsetHelper_medium::phpUtf8Substring($utf8, 0, 1),
			'1 char (he), php version'
		);
		$this->assertEquals(
			"\xd7\x90\xd7\xa0\xd7\x99 ",
			GalleryCoreApi::utf8Substring($utf8, 0, 4),
			'4 chars (he), standard version'
		);
		$this->assertEquals(
			"\xd7\x90\xd7\xa0\xd7\x99 ",
			GalleryCharsetHelper_medium::phpUtf8Substring($utf8, 0, 4),
			'4 chars (he), php version'
		);

		// Test some special characters
		$utf8 = 'apo\'strophe.jpg "quotes"';

		$this->assertEquals(
			'apo\'strophe.jpg "quotes"',
			GalleryCoreApi::utf8Substring($utf8, 0, 24),
			'special chars, standard version'
		);
		$this->assertEquals(
			'apo\'strophe.jpg "quotes"',
			GalleryCharsetHelper_medium::phpUtf8Substring($utf8, 0, 24),
			'special chars, php version'
		);

		$utf8 = 'e&amp;f';

		$this->assertEquals('e', GalleryCoreApi::utf8Substring($utf8, 0, 4), 'std');
		$this->assertEquals(
			'e&am',
			GalleryCharsetHelper_medium::phpUtf8Substring($utf8, 0, 4),
			'php; html entity not truncated because this preg is in ::utf8Substring'
		);

		// Test incomplete html entity at end of string is truncated
		$utf8 = '1234567890- &amp;';

		$this->assertEquals('67890- ', GalleryCoreApi::utf8Substring($utf8, 5, 9), 'entity');
	}

	public function testUtf8SubstringOfOneCharacter() {
		$this->assertEquals('t', GalleryCoreApi::utf8Substring('t', 0, 24), 'standard version');
		$this->assertEquals(
			't',
			GalleryCharsetHelper_medium::phpUtf8Substring('t', 0, 24),
			'php version'
		);
	}

	public function testUtf8SubstringOfNumber() {
		$this->assertEquals('15', GalleryCoreApi::utf8Substring(15, 0, 24), 'standard version');
		$this->assertEquals(
			'15',
			GalleryCharsetHelper_medium::phpUtf8Substring(15, 0, 24),
			'php version'
		);
	}

	public function testUtf8Strcut() {
		// Russian
		$utf8 = ("\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba\xd0" .
		 "\xb8\xd0\xb9\xd0\x97\xd0\xb4\xd1\x80\xd0\xb0" .
		 "\xd0\xb2\xd1\x81\xd1\x82\xd0\xb2\xd1\x83");

		$this->assertEquals(
			"\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba",
			$result = GalleryCoreApi::utf8Strcut($utf8, 0, 10),
			'standard version'
		);

		$this->assertEquals(10, strlen($result), 'length with standard version');
		$this->assertEquals(
			"\xd0\xa0\xd1\x83\xd1\x81\xd1\x81\xd0\xba",
			GalleryCharsetHelper_medium::phpUtf8Strcut($utf8, 0, 10),
			'PHP version'
		);

		// With byte offset
		$this->assertEquals(
			"\xd1\x81\xd1\x82\xd0\xb2",
			GalleryCoreApi::utf8Strcut($utf8, 24, 7),
			'standard version with offset'
		);
		$this->assertEquals(
			"\xd1\x81\xd1\x82\xd0\xb2",
			GalleryCharsetHelper_medium::phpUtf8Strcut($utf8, 24, 7),
			'PHP version with offset'
		);

		// With byte offset and length matching total length
		$this->assertEquals(
			"\xd1\x81\xd1\x82\xd0\xb2\xd1\x83",
			GalleryCoreApi::utf8Strcut($utf8, 24, 8),
			'standard version with offset up to end'
		);
		$this->assertEquals(
			"\xd1\x81\xd1\x82\xd0\xb2\xd1\x83",
			GalleryCharsetHelper_medium::phpUtf8Strcut($utf8, 24, 8),
			'PHP version with offset up to end'
		);

		// Start position larger than string
		$this->assertEquals(
			'',
			GalleryCoreApi::utf8Strcut('short', 20, 5),
			'standard version with too large start position'
		);
		$this->assertEquals(
			'',
			GalleryCharsetHelper_medium::phpUtf8Strcut('short', 20, 5),
			'PHP version with too large start position'
		);

		// Test some special characters
		$utf8 = 'apo\'strophe.jpg "quotes"';

		$this->assertEquals(
			'apo\'strophe.jpg "quote',
			GalleryCoreApi::utf8Strcut($utf8, 0, 22),
			'standard version special characters'
		);
		$this->assertEquals(
			'apo\'strophe.jpg "quote',
			GalleryCharsetHelper_medium::phpUtf8Strcut($utf8, 0, 22),
			'php version special characters'
		);

		$utf8 = 'e&amp;f';

		$this->assertEquals('e', GalleryCoreApi::utf8Strcut($utf8, 0, 4), 'std');
		$this->assertEquals(
			'e&am',
			GalleryCharsetHelper_medium::phpUtf8Strcut($utf8, 0, 4),
			'php; html entity not truncated because this preg is in ::utf8Strcut'
		);

		// Test incomplete html entity at end of string is truncated
		$utf8 = '1234567890- &amp;';

		$this->assertEquals('67890- ', GalleryCoreApi::utf8Strcut($utf8, 5, 9), 'entity');
	}

	public function testUtf8StrcutOfOneCharacter() {
		$this->assertEquals('t', GalleryCoreApi::utf8Strcut('t', 0, 24), 'standard version');
		$this->assertEquals(
			't',
			GalleryCharsetHelper_medium::phpUtf8Strcut('t', 0, 24),
			'php version'
		);
	}

	public function testUtf8StrcutOfNumber() {
		$this->assertEquals('15', GalleryCoreApi::utf8Strcut(15, 0, 24), 'standard version');
		$this->assertEquals(
			'15',
			GalleryCharsetHelper_medium::phpUtf8Strcut(15, 0, 24),
			'php version'
		);
	}
}

class CharsetTestPhpVm {
	/* deprecated dynamic properties in php 8.2 */
	public $_function_exists;
	public $_returns;

	public function setFunctionExists($functionName, $bool) {
		$this->_function_exists[$functionName] = $bool;
	}

	public function function_exists($functionName) {
		return $this->_function_exists[$functionName];
	}

	public function setReturn($function, $args, $return) {
		$this->_returns[$function][implode(',', $args)] = $return;
	}

	public function iconv($arg1, $arg2, $arg3) {
		if (isset($this->_returns['iconv']["$arg1,$arg2,$arg3"])) {
			return $this->_returns['iconv']["$arg1,$arg2,$arg3"];
		}

		return false;
	}

	public function mb_convert_encoding($arg1, $arg2, $arg3) {
		if (isset($this->_returns['mb_convert_encoding']["$arg1,$arg2,$arg3"])) {
			return $this->_returns['mb_convert_encoding']["$arg1,$arg2,$arg3"];
		}
	}

	public function recode_string($arg1, $arg2) {
		if (isset($this->_returns['recode_string']["$arg1,$arg2"])) {
			return $this->_returns['recode_string']["$arg1,$arg2"];
		}
	}

	public function nl_langinfo($item) {
		if (isset($this->_returns['nl_langinfo'][$item])) {
			return $this->_returns['nl_langinfo'][$item];
		}
	}

	public function setlocale($category, $locale) {
		if (isset($this->_returns['setlocale']["$category,$locale"])) {
			return $this->_returns['setlocale']["$category,$locale"];
		}
	}
}
