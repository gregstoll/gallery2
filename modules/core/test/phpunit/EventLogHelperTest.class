<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

/**
 * Test the GalleryEventLogHelper code
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class EventLogHelperTest extends GalleryTestCase {
	/* deprecated dynamic properties in ph 8.2 */
	public $_location;

	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$gallery->_storage       = new UnitTestStorage();
		$this->_storage          =& $gallery->getStorage();
		$gallery->_phpVm         = new EventLogHelperTestPhpVm();
		$urlGenerator            =& $gallery->getUrlGenerator();
		$this->_location         = $urlGenerator->getCurrentUrl();
		$_SERVER['HTTP_REFERER'] = 'REFERER';
	}

	public function tearDown() {
		$this->assertTrue($this->_storage->isComplete(), $this->_storage->getRemaining());

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testAddEventLogEntryRowExists() {
		global $gallery;

		// getUniqueId returns 3007, which mod 1000 == 7
		$this->_storage->setReply(
			'getUniqueId',
			array(DATABASE_SEQUENCE_EVENT_LOG),
			array(null, 3007)
		);

		$this->_storage->setReply(
			'updateMapEntry',
			array(
				'EventLogMap',
				array(
					'id' => 7,
				),
				array(
					'userId'    => $gallery->getActiveUserId(),
					'type'      => 'TYPE',
					'summary'   => 'SUMMARY',
					'details'   => 'DETAILS',
					'location'  => $this->_location,
					'client'    => GalleryUtilities::getRemoteHostAddress(),
					'timestamp' => 12345,
					'referer'   => 'REFERER',
				),
				true,
			),
			null
		);

		$this->_storage->setReply(
			'getAffectedRows',
			array(true),
			array(null, 1)
		);

		$ret = GalleryCoreApi::addEventLogEntry('TYPE', 'SUMMARY', 'DETAILS');

		if ($ret) {
			return $ret;
		}

		// tearDown will assert that the test storage is complete, meaning everything worked
	}

	public function testAddEventLogEntryNewRow() {
		global $gallery;

		// getUniqueId returns 3007, which mod 1000 == 7
		$this->_storage->setReply(
			'getUniqueId',
			array(DATABASE_SEQUENCE_EVENT_LOG),
			array(null, 3007)
		);

		$this->_storage->setReply(
			'updateMapEntry',
			array(
				'EventLogMap',
				array(
					'id' => 7,
				),
				array(
					'userId'    => $gallery->getActiveUserId(),
					'type'      => 'TYPE',
					'summary'   => 'SUMMARY',
					'details'   => 'DETAILS',
					'location'  => $this->_location,
					'client'    => GalleryUtilities::getRemoteHostAddress(),
					'timestamp' => 12345,
					'referer'   => 'REFERER',
				),
				true,
			),
			null
		);

		$this->_storage->setReply(
			'getAffectedRows',
			array(true),
			array(null, 0)
		);

		$this->_storage->setReply(
			'addMapEntry',
			array(
				'EventLogMap',
				array(
					'id'        => 7,
					'userId'    => $gallery->getActiveUserId(),
					'type'      => 'TYPE',
					'summary'   => 'SUMMARY',
					'details'   => 'DETAILS',
					'location'  => $this->_location,
					'client'    => GalleryUtilities::getRemoteHostAddress(),
					'timestamp' => 12345,
					'referer'   => 'REFERER',
				),
				true,
			),
			null
		);

		$ret = GalleryCoreApi::addEventLogEntry('TYPE', 'SUMMARY', 'DETAILS');

		if ($ret) {
			return $ret;
		}

		// tearDown will assert that the test storage is complete, meaning everything worked
	}
}

class EventLogHelperTestPhpVm {
	public function time() {
		return 12345;
	}
}

