<?php

/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */
GalleryCoreApi::requireOnce('modules/core/classes/DeleteSessionsTask.class');

/**
 * Test the DeleteSessions maintenance task functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Andy Staudacher <ast@gmx.ch>
 * @version $Revision: 17580 $
 */
class DeleteSessionsTaskTest extends GalleryTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_core;

	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$this->_task = new DeleteSessionsTask();

		list($ret, $this->_core) = GalleryCoreApi::loadPlugin('module', 'core');

		if ($ret) {
			return $ret;
		}

		$this->_origSession = $gallery->_session;
	}

	public function tearDown() {
		global $gallery;

		$gallery->_session = $this->_origSession;

		return parent::tearDown();
	}

	public function testRun() {
		global $gallery;

		$gallery->_templateAdapter = new MockTemplateAdapter();
		$mockAdapter               =& $gallery->_templateAdapter;
		$gallery->_session         = new DeleteSessionsTaskTestSession();
		$session                   =& $gallery->getSession();
		$gallery->_phpVm           = new UnitTestPhpVm();
		$phpVm                     = $gallery->getPhpVm();

		list($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'core');

		if ($ret) {
			return $ret;
		}

		$inactivityTimeout = (int)$params['session.inactivityTimeout'];
		$lifetime          = (int)$params['session.lifetime'];

		list($ret, $anonymousUserId) = GalleryCoreApi::getAnonymousUserId();

		if ($ret) {
			return $ret;
		}

		$currentTime = 123456789;
		$data        = array(
			$currentTime - $inactivityTimeout,
			$currentTime - $lifetime,
			$anonymousUserId,
			$currentTime - (7 * 86400),
		);

		for ($i = 0; $i < 5; $i++) {
			$phpVm->setReply('time', array(), $currentTime, true);
		}

		$gallery->_storage = new UnitTestStorage();
		$storage           =& $gallery->getStorage();

		$query = '
	SELECT COUNT([GallerySessionMap::id])
	FROM [GallerySessionMap]
	WHERE [GallerySessionMap::modificationTimestamp] < ? OR
	      [GallerySessionMap::creationTimestamp] < ? OR
	      ([GallerySessionMap::userId] = ? AND [GallerySessionMap::creationTimestamp] < ?)
	';

		$storage->setReply(
			'search',
			array($query, $data, array()),
			array(null, new UnitTestStorageSearchResults(array(array(1500))))
		);

		list($ret, $success, $details) = $this->_task->run();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($success);

		$this->assertEquals(
			array(
				$this->_core->translate(
					array(
						'text' => 'Deleted %d sessions.',
						'arg1' => 1500,
					)
				),
			),
			$details
		);

		$this->assertEquals(2, $session->callCount, 'call count of _expireSessions()');
	}
}

class DeleteSessionsTaskTestSession extends GallerySession {
	public $callCount = 0;

	public function _expireSessions() {
		$this->callCount++;

		return null;
	}

	public function save($useNonTransactionalConnection = false) {
		return null;
	}
}
