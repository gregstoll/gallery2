<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * A framework for doing platform specific tasks.  This is an abstract class that implements many
 * basic tasks that are different from platform to platform.
 * @package GalleryCore
 * @subpackage Classes
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 20954 $
 * @abstract
 */
class GalleryPlatform {

    /**
     * List of file extensions that are disallowed for server and/or client security reasons.
     * @var array
     * @deprecated This list will be made configurable by merging it into the mime-map data.
     */
    var $_blacklistedFileExtensions = array(
	'php', 'php2', 'php3', 'php4', 'php5', 'php6', 'cgi', 'inc', 'phps', 'pwml', 'phtml',
	'html', 'js', 'htm', 'shtml', 'vbs', 'dll', 'jsp' , 'cfm', 'reg', 'shtm', 'phtm', 'exe',
	'bat', 'sh', 'cmd', 'install', 'pl', 'tcl', 'py', 'com', 'rb', 'asp', 'aspx', 'ascx');

    /* deprecated dynamic properties in php 8.2 */
    var $_filePerms;
    var $_dirPerms;
    var $_umask;

    /**
     * Copy a file.
     * @param string $source the source file
     * @param string $dest the destination file
     * @return boolean true if the copy succeeded, false otherwise
     */
    function copy($source, $dest) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("copy($source, $dest)");
	}

	if (is_uploaded_file($source)) {
	    $results = move_uploaded_file($source, $dest);
	    if (!$results) {
		return $results;
	    }
	    $results = $this->chmod($dest);
	} else {
	    if (!isset($this->_umask)) {
		$this->_loadPermissionPreferences();
	    }
	    $umask = umask($this->_umask);
	    $results = copy($source, $dest);
	    umask($umask);
	}

	return $results;
    }

    /**
     * Symlink a file.
     * @param string $source the source file
     * @param string $dest the destination file
     * @return boolean true if the copy succeeded, false otherwise
     */
    function symlink($source, $dest) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("symlink($source, $dest)");
	}

	if (!isset($this->_umask)) {
	    $this->_loadPermissionPreferences();
	}
	$umask = umask($this->_umask);
	$results = symlink($source, $dest);
	umask($umask);

	return $results;
    }

    /**
     * Move an uploaded file to a new location and return the new location.  If the second filename
     * is not provided, a new file is created in the Gallery temporary directory.
     * @return string the new file name, if the move was successful
     */
    function move_uploaded_file($filename, $newFilename=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("move_uploaded_file($filename, $newFilename)");
	}

	if (empty($newFilename)) {
	    $tmpDir = $gallery->getConfig('data.gallery.tmp');
	    $newFilename = tempnam($tmpDir, 'MUF_');
	    if ($newFilename == null) {
		return null;
	    }
	    if ($gallery->getDebug()) {
		$gallery->debug("chose new file name: $newFilename");
	    }
	}

	if (move_uploaded_file($filename, $newFilename)) {
	    return $newFilename;
	} else {
	    return null;
	}
    }

    /**
     * Create a file with a unique file name.
     * @param string $dir target dir
     * @param string $prefix file prefix
     */
    function tempnam($dir, $prefix) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("tempnam($dir, $prefix)");
	}

	$slash = $this->getDirectorySeparator();
	$dir = $dir[strlen($dir) - 1] == $slash ? substr($dir, 0, strlen($dir) - 1) : $dir;

	$tempfile = tempnam($dir, $prefix);
	if ($tempfile !== false) {
	    $dirname = dirname($tempfile);
	    if ($dirname !== $dir) {
		$tempfile = $dir . $slash . basename($tempfile);
	    }
	}

	return $tempfile;
    }

    /**
     * Does the given file exist?
     * @param string $filename full filesystem path to a file
     * @return boolean true if the file exists, false otherwise
     */
    function file_exists($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("file_exists($filename)");
	}

	return is_uploaded_file($filename) || file_exists($filename);
    }

    /**
     * Is the given path a symbolic link?
     * @param string $filename a filesystem path
     * @return boolean true if the file is a link, false otherwise
     */
    function is_link($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("is_link($filename)");
	}

	return is_link($filename);
    }

    /**
     * Is the given path a directory?
     * @param string $filename a filesystem path
     * @return boolean true if the path is a directory, false otherwise
     */
    function is_dir($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("is_dir($filename)");
	}

	return is_dir($filename);
    }

    /**
     * Is the given path a normal file?
     * @param string $filename a filesystem path
     * @return boolean true if the path is a file, false otherwise
     */
    function is_file($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("is_file($filename)");
	}

	return is_file($filename);
    }

    /**
     * Is the given path a writeable file?
     * @param string $filename a filesystem path
     * @return boolean true if the path is writeable, false otherwise
     */
    function is_writeable($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("is_writeable($filename)");
	}

	return is_writeable($filename);
    }

    /**
     * Is the given path a readable file?
     * @param string $filename a filesystem path
     * @return boolean true if the path is readable, false otherwise
     */
    function is_readable($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("is_readable($filename)");
	}

	return is_readable($filename);
    }

    /**
     * Is the given path an uploaded file?
     * @param string $filename a filesystem path
     * @return boolean true if the path is an uploaded file, false otherwise
     */
    function is_uploaded_file($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("is_uploaded_file($filename)");
	}

	return is_uploaded_file($filename);
    }

    /**
     * Is the given path an executable file?
     * @param string $filename a filesystem path
     * @return boolean true if the path is an executable file, false otherwise
     */
    function is_executable($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("is_executable($filename)");
	}
	$perms = fileperms($filename) & 0x0049;
	return !empty($perms);
    }

    /**
     * How large is the given file?
     * @param string $filename full filesystem path to a file
     * @return int the size in bytes
     */
    function filesize($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("filesize($filename)");
	}

	return filesize($filename);
    }

    /**
     * Clear the stat cache.
     */
    function clearstatcache() {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug('clearstatcache()');
	}

	return clearstatcache();
    }

    /**
     * Return a file as an array.
     * @param string $filename a file path or URL
     * @param int $use_include_path if this is set to 1, search the include path also
     * @return array of lines
     */
    static function file($filename, $use_include_path=false) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("file($filename, $use_include_path)");
	}

	return file($filename, $use_include_path);
    }

    /**
     * Output a file.
     * @param string $filename a file path or URL
     * @param int $use_include_path if this is set to 1, search the include path also
     * @return int the number of bytes read from the file
     */
    function readfile($filename, $use_include_path=false) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("readfile($filename, $use_include_path)");
	}
	return readfile($filename, $use_include_path);
    }

    /**
     * Reads the entire contents of the specified file into a string.
     * @param string $path file path
     * @return string file contents or boolean false on failure
     */
    function file_get_contents($path) {
	return file_get_contents($path);
    }

    /**
     * Open a file or URL.
     * @param string $filename a file path or URL
     * @param string $mode a file mode
     * @param int $use_include_path if this is set to 1, search the include path also
     * @return resource a file descriptor
     */
    function fopen($filename, $mode, $use_include_path=0) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("fopen($filename, $mode, $use_include_path)");
	}

	return fopen($filename, $mode, $use_include_path);
    }

    /**
     * flock -- Portable advisory file locking.
     * @param resource $handle a file handle
     * @param int $operation (LOCK_SH, LOCK_EX, LOCK_UN) [ | LOCK_NB]
     * @param boolean $wouldblock set to true if the operation would have blocked
     * @return true or false
     */
    function flock($handle, $operation, &$wouldblock) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("flock($handle, $operation, $wouldblock)");
	}

	return flock($handle, $operation, $wouldblock);
    }

    /**
     * Perform an atomic write to a file.  This guarantees that the data written is not corrupted
     * (but it does not prevent another process from immediately replacing the file with its own
     * version).
     * @param string $filename
     * @param string $data data to be written
     * @return boolean success or failure
     */
    function atomicWrite($filename, $data) {
	list ($success, $ignored) = GalleryUtilities::guaranteeDirExists(dirname($filename));
	if (!$success) {
	    global $gallery;
	    $gallery->debug("atomicWrite($filename): parent directory could not be created");
	    return false;
	}

	$tempFile = tempnam(dirname($filename), basename($filename));
	$fd = fopen($tempFile, 'wb');
	$success = false;
	if ($fd) {
	    if (!isset($this->_filePerms)) {
		$this->_loadPermissionPreferences();
	    }
	    chmod($tempFile, $this->_filePerms);
	    $bytesWritten = fwrite($fd, $data);
	    if ($bytesWritten == strlen($data)) {
		$success = true;
	    }
	    fclose($fd);
	}

	if ($success) {
	    return $this->rename($tempFile, $filename);
	} else {
	    @unlink($tempFile);
	    return false;
	}
    }

    /**
     * Open a file or URL.
     * @param string $path a file path
     * @return resource a directory descriptor
     */
    function opendir($path) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("opendir($path)");
	}

	return opendir($path);
    }

    /**
     * Return the next file resource from a directory.
     * @param resource $resource a directory resource
     */
    function readdir($resource) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("readdir($resource)");
	}

	return readdir($resource);
    }

    /**
     * Close a directory resource.
     * @param resource $resource a directory resource
     */
    function closedir($resource) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("closedir($resource)");
	}

	return closedir($resource);
    }

    /**
     * Rename a file/dir.
     *
     * As a side bonus, create a backup of the original file.
     *
     * @param string $oldname original file/dir name
     * @param string $newname new file/dir name
     * @return boolean true on success, false on failure
     */
    function rename($oldname, $newname) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("rename($oldname, $newname)");
	}

	return rename($oldname, $newname);
    }

    /**
     * Get information about a file.
     * @param string $filename file/dir name
     * @return array the statistics of the file
     */
    function stat($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("stat($filename)");
	}

	return stat($filename);
    }

    /**
     * Get size information about an image.
     * @param string $filename the image file name
     * @return array with 4 elements.  Index 0 contains the width of the image in pixels.  Index 1
     *         contains the height.  Index 2 is a flag indicating the type of the image: 1 = GIF, 2
     *         = JPG, 3 = PNG, 4 = SWF, 5 = PSD, 6 = BMP, 7 = TIFF(intel byte order), 8 =
     *         TIFF(motorola byte order), 9 = JPC, 10 = JP2, 11 = JPX, 12 = JB2, 13 = SWC, 14 = IFF.
     *         These values correspond to the IMAGETYPE constants that were added in PHP 4.3.  Index
     *         3 is a text string with the correct height="yyy" width="xxx" string that can be used
     *         directly in an IMG tag.
     */
    function getimagesize($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("getimagesize($filename)");
	}

	/*
	 * getimagesize() returns an E_WARNING if the file is unreadable or not an image.  We'd
	 * rather that it just returned false without the warning.
	 */
	return @getimagesize($filename);
    }

    /**
     * Delete a file.
     * @param string $filename
     * @return boolean true on success, false on failure
     */
    function unlink($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("unlink($filename)");
	}

	return unlink($filename);
    }

    /**
     * Delete a directory.
     * @param string $filename directory name
     * @return boolean true on success, false on failure
     */
    function rmdir($filename) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("rmdir($filename)");
	}

	return rmdir($filename);
    }

    /**
     * Delete a directory, and all its contents.
     * @param string $dirname directory name
     * @return boolean true on success, false on failure
     */
    function recursiveRmdir($dirname) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("recursiveRmdir($dirname)");
	}

	if ($dirname[strlen($dirname)-1] != $this->getDirectorySeparator()) {
	    $dirname .= $this->getDirectorySeparator();
	}

	if (!($fd = $this->opendir($dirname))) {
	    return false;
	}

	while (($filename = $this->readdir($fd)) !== false) {
	    if (!strcmp($filename, '.') || !strcmp($filename, '..')) {
		continue;
	    }
	    $path = $dirname . $filename;

	    if ($this->is_dir($path)) {
		$ret = $this->recursiveRmdir($path);
	    } else {
		$ret = $this->unlink($path);
	    }

	    if ($ret == false) {
		return false;
	    }
	}
	closedir($fd);

	return $this->rmdir($dirname);
    }

    /**
     * Create a new directory.
     * @param string $path a filesystem path
     * @param string $stringPerms permissions of the newly created directory
     * @return boolean true on success, false on failure
     */
    function mkdir($path, $stringPerms=null) {
	global $gallery;

	if (empty($stringPerms)) {
	    if (!isset($this->_filePerms) || !isset($this->_dirPerms)) {
		$this->_loadPermissionPreferences();
	    }
	    $octalPerms = $this->_dirPerms;
	} else {
	    /* Convert string permission representation to octal */
	    $octalPerms = octdec($stringPerms);
	}
	if ($gallery->getDebug()) {
	    $gallery->debug(sprintf("mkdir(%s, %o)", $path, $octalPerms));
	}

	$umask = umask(0);
	$results = mkdir($path, $octalPerms);
	umask($umask);
	return $results;
    }

    /**
     * Return true if the path component specified is composed of legal characters.
     * @param string $component the path component (must not contain path separators)
     * @param boolean $forDirectory (optional) Whether the path component is for a directory.
     *        Defaults to false. Periods are allowed anywhere in directories.
     * @return true if yes
     */
    function isLegalPathComponent($component, $forDirectory=false) {
	return !strcmp($this->legalizePathComponent($component, $forDirectory), $component);
    }

    /**
     * Legal characters on all systems: A-Z a-z 0-9 # _ . -
     *
     * Specific platform implementations can override this.
     *
     * @return string a string composed of all legal path characters
     */
    function getLegalPathCharacters() {
	/*
	 * Keep the hyphen at the end of this string, else preg functions will complain if you use
	 * this in a bracket expression.
	 */
	return 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789# _.-';
    }

    /**
     * Remove any illegal characters from the path component.
     * @param string $component the path component (must not contain path separators)
     * @param boolean $forDirectory (optional) Whether the path component is for a directory.
     *        Defaults to false. Periods are allowed anywhere in directories.
     * @return array|GalleryStatus|string
     */
    function legalizePathComponent($component, $forDirectory=false)
    {
	    list ($ret, $slugMode) = GalleryCoreApi::getPluginParameter('module', 'core', 'slug.mode');
	    if ($ret) {
		    return $ret;
	    }
	    $slugMode = $slugMode ?? 'modern';
	    return $this->legalizePathComponentHelper($component, $forDirectory, $slugMode);
    }
    /**
     * Remove any illegal characters from the path component.
     * @param string $component the path component (must not contain path separators)
     * @param boolean $forDirectory (optional) Whether the path component is for a directory.
     *        Defaults to false. Periods are allowed anywhere in directories.
     * @return string the legalized path component
     */
    function legalizePathComponentClassic($component, $forDirectory=false) {
	global $gallery;

	$legalChars = $this->getLegalPathCharacters();

	/* Scrub out all the illegal characters */
	$component = preg_replace("/[^$legalChars]/", '_', $component);

	if (!$forDirectory) {
	    /* Break it into filebase and extension */
	    list ($fileBase, $extension) = GalleryUtilities::getFileNameComponents($component);

	    /*
	     * Convert all dots to underscores in the fileBase.  This prevents malicious users from
	     * uploading files like 'foo.php.jpg' which will be treated like a JPEG by Gallery, but
	     * could be treated like a .php file by Apache opening a security hole.
	     */
	    $fileBase = str_replace('.', '_', $fileBase);

	    $blacklistKey = 'GalleryPlatform::blacklistedFileExtensions';
	    if (GalleryDataCache::containsKey($blacklistKey)) {
		$blacklistedExtensions = GalleryDataCache::get($blacklistKey);
	    } else {
		$blacklistedExtensions = array_flip($this->_blacklistedFileExtensions);
		GalleryDataCache::put($blacklistKey, $blacklistedExtensions);
	    }

	    /*
	     * If we don't know exactly what type this file is, we have to assume that it's
	     * something malicious.  In that case, it might be a server side script of some kind and
	     * we don't want that to wind up in the albums directory in a pure state because it may
	     * open up a security hole on systems that have placed the gallery data directory inside
	     * the document root.  So mangle the extension to make sure that the webserver doesn't
	     * execute it.
	     */
	    list ($ret, $tmp) = GalleryCoreApi::convertExtensionToMime($extension);
	    if ($ret && $gallery->getDebug()) {
		$gallery->debug('Error: convertExtensionToMime in ' .
				'GalleryPlatform::legalizePathComponent');
	    }
	    if (!empty($extension) && ($ret || $tmp == 'application/unknown'
		    || isset($blacklistedExtensions[GalleryUtilities::strToLower($extension)]))) {
		$fileBase = $fileBase . '_' . $extension;
		$extension = null;
	    }

	    /* Rebuild the baseName according to our transforms above */
	    if (!empty($extension)) {
		$fileBase .= '.' . $extension;
	    }
	    $component = $fileBase;
	}

	return $component;
    }


	/**
	 * Remove any illegal characters from the path component using a slugify format.
	 * @param string $component the path component (must not contain path separators)
	 * @param boolean $forDirectory (optional) Whether the path component is for a directory.
	 *        Defaults to false. Periods are allowed anywhere in directories.
	 * @return string the legalized path component
	 */
	function legalizePathComponentWithSlug(string $component, bool $forDirectory=false): string
	{
		global $gallery;

		$gallery->debug('Legalizing PathComponent With Slug "$component"');
		$component = GalleryPlatform::sanitize_file_name($component);
		$gallery->debug('New PathComponent "$component"');

		if (!$forDirectory) {
			/* Break it into filebase and extension */
			list ($fileBase, $extension) = GalleryUtilities::getFileNameComponents($component);

			/*
			 * Convert all dots to dashes in the fileBase.  This prevents malicious users from
			 * uploading files like 'foo.php.jpg' which will be treated like a JPEG by Gallery, but
			 * could be treated like a .php file by Apache opening a security hole.
			 */
			$fileBase = str_replace('.', '-', $fileBase);

			$blacklistKey = 'GalleryPlatform::blacklistedFileExtensions';
			if (GalleryDataCache::containsKey($blacklistKey)) {
				$blacklistedExtensions = GalleryDataCache::get($blacklistKey);
			} else {
				$blacklistedExtensions = array_flip($this->_blacklistedFileExtensions);
				GalleryDataCache::put($blacklistKey, $blacklistedExtensions);
			}

			/*
			 * If we don't know exactly what type this file is, we have to assume that it's
			 * something malicious.  In that case, it might be a server side script of some kind and
			 * we don't want that to wind up in the albums directory in a pure state because it may
			 * open up a security hole on systems that have placed the gallery data directory inside
			 * the document root.  So mangle the extension to make sure that the webserver doesn't
			 * execute it.
			 */
			list ($ret, $tmp) = GalleryCoreApi::convertExtensionToMime($extension);
			if ($ret) {
				$gallery->debug('Error: convertExtensionToMime in ' .
				    'GalleryPlatform::legalizePathComponent');
			}
			if (!empty($extension) && ($ret || $tmp == 'application/unknown'
				|| isset($blacklistedExtensions[GalleryUtilities::strToLower($extension)]))) {
				$fileBase = $fileBase . '-' . $extension;
				$extension = null;
			}

			/* Rebuild the baseName according to our transforms above */
			if (!empty($extension)) {
				$fileBase .= '.' . $extension;
			}
			$component = $fileBase;
		}

		return $component;
	}

    /**
     * Execute a command and record the results and status.
     * @param array $cmdArray array(array('cmd', 'arg'), ...)
     * @return array(boolean true if the command succeeded, false otherwise,
     *               array standard output from the command
     *               array error output from the command)
     */
    function exec($cmdArray) {
	/* This must be implemented in a platform specific way */
	assert(false);
    }

    /**
     * Return the filesystem specific directory separator.
     * @return string directory separator
     */
    function getDirectorySeparator() {
	return DIRECTORY_SEPARATOR;
    }

    /**
     * Return true if the path provided is not allowed by the current open_basedir configuration.
     * @return true if the path is restricted
     */
    function isRestrictedByOpenBaseDir($path) {
	/*
	 * This must be implemented in a platform specific way due to the fact that different PHP
	 * platforms use different separators in the basedir path, and since case sensitivity of
	 * path elements is not relevant on all platforms.
	 */
	assert(false);
    }

    /**
     * Check if path is allowed by open_basedir, given platform path separator & case sensitivity.
     * @access protected
     */
    function _isRestrictedByOpenBaseDir($path, $separator, $caseSensitive) {
	global $gallery;
	$slash = $this->getDirectorySeparator();
	$phpVm = $gallery->getPhpVm();
	$openBasedir = $phpVm->ini_get('open_basedir');
	if (empty($openBasedir)) {
	    return false;
	}

	if (($realpath = @$this->realpath($path)) === false) {
	    /*
	     * PHP's open_basedir will actually take an invalid path, resolve relative paths, parse
	     * out .. and . and then check against the dir list.  Here we do an ok job of doing the
	     * same, though it isn't perfect.
	     */
	    $s = '\\\/';  /* Do this by hand because preg_quote() isn't reliable */
	    if (!preg_match("{^([a-zA-Z]+:)?[$s]}", $path)) {
		$path = $this->getcwd() . $slash . $path;
	    }
	    for ($realpath = $path, $lastpath = ''; $realpath != $lastpath;) {
		$realpath = preg_replace("#[$s]\.([$s]|\$)#", $slash, $lastpath = $realpath);
	    }

	    for ($lastpath = ''; $realpath != $lastpath;) {
		$realpath = preg_replace("#[$s][^$s]+[$s]\.\.([$s]|\$)#",
					 $slash, $lastpath = $realpath);
	    }
	}

	$function = $caseSensitive ? 'strncmp' : 'strncasecmp';
	foreach (explode($separator, $openBasedir) as $baseDir) {
	    if (($baseDirMatch = $this->realpath($baseDir)) === false) {
		$baseDirMatch = $baseDir;
	    } else if (substr($baseDir, -1) == $slash && substr($baseDirMatch, -1) != $slash) {
		/* Realpath will remove a trailing slash, add it back to avoid prefix match */
		$baseDirMatch .= $slash;
	    }
	    /* Add slash on path so /dir is accepted if /dir/ is a valid basedir */
	    if (!$function($baseDirMatch, $realpath . $slash, strlen($baseDirMatch))) {
		return false;
	    }
	}

	return true;
    }

    /**
     * Initiates a socket connection to the resource specified by target.
     * @param string $target the hostname
     * @param int $port the port
     * @param int $errno the error number (out)
     * @param string $errstr the error string (out)
     * @param int $timeout the timeout
     * @return resource a file descriptor
     * @see http://php.net/fsockopen
     */
    function fsockopen($target, $port, &$errno, &$errstr, $timeout) {
	global $gallery;
        $gallery->debug("fsockopen($target, $port, $errno, $errstr, $timeout)");
	return fsockopen($target, $port, $errno, $errstr, $timeout);
    }

    /**
     * Write the contents of string to the file stream pointed to by handle.
     * @param resource $handle the handle
     * @param string $string the buffer
     * @param int $length how many bytes to write (optional)
     * @return int the number of bytes written
     */
    function fwrite($handle, $string, $length=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("fwrite($handle, ..., $length)");
	}

	if (isset($length)) {
	    return fwrite($handle, $string, $length);
	} else {
	    return fwrite($handle, $string);
	}
    }

    /**
     * Writes specified data to file.  Uses PHP's file_put_contents() function if it is available.
     * @param string $path output file path
     * @param string $data data to write
     * @return boolean true on success, false on failure
     */
    function file_put_contents($path, $data) {
	if (function_exists('file_put_contents')) {
	    return file_put_contents($path, $data);
	}

	if (false === ($file = fopen($path, 'w')) || false === fwrite($file, $data)) {
	    return false;
	}
	fclose($file);
	return true;
    }

    /**
     * Closes an open file pointer.
     * @param resource $handle
     * @return boolean true on success, false on failure
     */
    function fclose($handle) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("fclose($handle)");
	}

	return fclose($handle);
    }

    /**
     * Flush an open file pointer.
     * @param resource $handle
     * @return boolean true on success, false on failure
     */
    function fflush($handle) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("fflush($handle)");
	}

	return fflush($handle);
    }

    /**
     * Tests for end-of-file on a file pointer.
     * @param resource $handle
     * @return boolean true if the file pointer is at EOF
     */
    function feof($handle) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("feof($handle)");
	}

	return feof($handle);
    }

    /**
     * Reads data from an open file handle.
     * @param resource $handle
     * @param int $length
     * @return string the bytes read
     */
    function fread($handle, $length) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("fread($handle, $length)");
	}

	return fread($handle, $length);
    }

    /**
     * Seeks on a file pointer.
     * @param resource $handle
     * @param int $offset
     * @param int $whence
     * @return int 0 upon success, otherwise -1
     */
    function fseek($handle, $offset, $whence = SEEK_SET) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("fseek($handle, $offset, $whence)");
	}

	return fseek($handle, $offset, $whence);
    }

    /**
     * Truncates a file to a given length.
     * @param resource $handle
     * @param int $size
     * @return boolean success?
     */
    function ftruncate($handle, $size) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("ftruncate($handle, $size)");
	}

	$ret = ftruncate($handle, $size);
	if ($ret === 1) {
	    /*
	     * Prior to PHP 4.3.3, ftruncate() returns an integer value of 1 on success, instead of
	     * boolean true. We correct this here.
	     */
	    return true;
	}
	return $ret;
    }

    /**
     * Gets line from file pointer.
     * @param resource $handle
     * @param int $length the optional max line length
     * @return string|bool the string or false on eof
     */
    function fgets($handle, $length=0) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("fgets($handle, $length)");
	}

	return fgets($handle, $length);
    }

    /**
     * Expand all symbolic links and resolve references to '/./', '/../' and extra '/' characters in
     * the input path and return the canonicalized absolute pathname.  The resulting path will have
     * no symbolic link, '/./' or '/../' components.  [cribbed from http://php.net/realpath]
     * @return false on failure, eg. if the file does not exists
     */
    function realpath($file) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("realpath($file)");
	}

	return realpath($file);
    }

    /**
     * touch -- Sets access and modification time of file.
     *
     * Attempts to set the access and modification time of the file named by filename to the value
     * given by time. If the option time is not given, uses the present time. This is equivalent to
     * what utime (sometimes referred to as utimes) does. If the third option atime is present, the
     * access time of the given filename is set to the value of atime. Note that the access time is
     * always modified, regardless of the number of parameters.
     *
     * @param string $file the file path
     * @param int $time (optional) the modification time
     * @param int $atime (optional) the access time
     */
    function touch($file, $time=null, $atime=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("touch($file, $time, $atime)");
	}

	$exists = $this->file_exists($file);
	if (isset($atime)) {
	    touch($file, $time, $atime);
	} else if (isset($time)) {
	    touch($file, $time);
	} else {
	    touch($file);
	}

	if (empty($exists)) {
	    $this->chmod($file);
	}
    }

    /**
     * mail -- Send an email.  Lines in the headers and body should be terminated with \r\n in
     * accordance with RFC2821.
     * @param string $to to address(es) (comma separated)
     * @param string $subject
     * @param string $body
     * @param string $headers (optional) additional headers (\r\n separated)
     * @return boolean true on success
     */
    function mail($to, $subject, $body, $headers=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("mail($to, $subject, $body, $headers)");
	}

	$config = array();
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'core');
	if (!$ret) {
	    foreach ($params as $key => $value) {
		if (strncmp($key, 'smtp.', 5) == 0) {
		    $config[$key] = $value;
		}
	    }
	}

	if (!empty($config['smtp.host'])) {
	    GalleryCoreApi::requireOnce('lib/smtp/smtp.php');
	    $ret = smtpmail($config, $to, $subject, $body, $headers);
	    if ($ret && $gallery->getDebug()) {
		$gallery->debug("smtpmail error: " . $ret->getAsText());
	    }
	    return !$ret;
	} else {
	    $phpVm = $gallery->getPhpVm();
	    /* Convert \r\n to the appropriate line ending style */
	    if ($this->getLineEnding() == "\n") {
		if (isset($headers)) {
		    $headers = preg_replace("#\r\n#s", "\n", $headers);
		}
		$body = preg_replace("#\r\n#s", "\n", $body);
	    }

	    if (isset($headers)) {
		return $phpVm->mail($to, $subject, $body, $headers);
	    } else {
		return $phpVm->mail($to, $subject, $body);
	    }
	}
    }

    /**
     * Split path into component elements.  Include root path for absolute paths.
     * eg. /tmp -> array('/', 'tmp')
     *     rela/tive/path -> array('rela', 'tive', 'path')
     *     C:\Test\File.txt -> array('C:\', 'Test', 'File.txt')
     *
     * @param string $path
     * @return array (path elements) first item is "root" if path is absolute
     */
    function splitPath($path) {
	/* This must be implemented in a platform specific way */
	assert(false);
    }


    /**
     * Return a boolean specifying whether or not this platform can perform a symbolic link
     * (symlink) command.
     * @return boolean true if the platform supports symlinks
     */
    function isSymlinkSupported() {
	/* This must be implemented in a platform specific way */
	assert(false);
    }

    /**
     * Return the string of characters which represent the line ending on this platform.
     * @return string Line ending
     */
    function getLineEnding() {
	/* This must be implemented in a platform specific way */
	assert(false);
    }

    /**
     * chdir -- change working directory.
     * @param string $path directory
     * @return boolean true on success
     */
    function chdir($path) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("chdir($path)");
	}
	return chdir($path);
    }

    /**
     * getcwd -- gets the current working directory.
     * @return string|bool the current working directory, or false on failure.
     */
    function getcwd() {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("getcwd()");
	}
	return getcwd();
    }

    /**
     * Load preferences for file/dir permissions and calculate umask.
     * @access private
     */
    function _loadPermissionPreferences() {
	static $cacheKey = 'GalleryPlatform::_loadPermissionPreferences';
	$this->_filePerms = 0644;
	$this->_dirPerms = 0755;

	if (GalleryDataCache::containsKey($cacheKey)) {
	    list ($this->_filePerms, $this->_dirPerms) = GalleryDataCache::get($cacheKey);
	} else {
	    /* To avoid looping if getPluginParameter calls platform functions */
	    GalleryDataCache::put($cacheKey, array($this->_filePerms, $this->_dirPerms));

	    list ($ret, $filePerms) =
		GalleryCoreApi::getPluginParameter('module', 'core', 'permissions.file');
	    if (!$ret && !empty($filePerms)) {
		$this->_filePerms = octdec($filePerms);
	    }
	    list ($ret, $dirPerms) =
		GalleryCoreApi::getPluginParameter('module', 'core', 'permissions.directory');
	    if (!$ret && !empty($dirPerms)) {
		$this->_dirPerms = octdec($dirPerms);
	    }
	    GalleryDataCache::put($cacheKey, array($this->_filePerms, $this->_dirPerms));
	}
	$this->_umask = 0777 - $this->_filePerms;
    }

    /**
     * Set filesystem permissions; mode defaults to system preference for file/dir permissions.
     * @param string $path path to file or directory
     * @param int $mode (optional) mode; defaults to system preference
     * @return boolean true on success
     */
    function chmod($path, $mode=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("chmod($path, $mode)");
	}

	if (!isset($mode)) {
	    if (!isset($this->_filePerms) || !isset($this->_dirPerms)) {
		$this->_loadPermissionPreferences();
	    }
	    $mode = $this->is_dir($path) ? $this->_dirPerms : $this->_filePerms;
	}
	return chmod($path, $mode);
    }

    /**
     * Recursively set filesystem permissions.  Modes default to system preferences for file/dir
     * permissions.
     * @param string $path path to directory
     * @param int $dirMode (optional) mode for dirs or -1 to skip chmod of dirs
     * @param int $fileMode (optional) mode for files or -1 to skip chmod of files
     * @return boolean true on success
     */
    function recursiveChmod($path, $dirMode=null, $fileMode=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("recursiveChmod($path, $dirMode, $fileMode)");
	}

	if (!isset($this->_filePerms) || !isset($this->_dirPerms)) {
	    $this->_loadPermissionPreferences();
	}
	if (!isset($dirMode)) {
	    $dirMode = $this->_dirPerms;
	}
	if (!isset($fileMode)) {
	    $fileMode = $this->_filePerms;
	}
	return $this->_recursiveChmod($path, $dirMode, $fileMode);
    }

    /**
     * Helper for recursiveChmod.
     * @access private
     */
    function _recursiveChmod($path, $dirMode, $fileMode) {
	if ($this->is_dir($path)) {
	    if ($dirMode >= 0 && !$this->chmod($path, $dirMode)) {
		return false;
	    }
	    if (!($dir = $this->opendir($path))) {
		return false;
	    }
	    $slash = $this->getDirectorySeparator();
	    $list = array();
	    while ($file = $this->readdir($dir)) {
		if ($file != '.' && $file != '..') {
		    $list[] = $path . $slash . $file;
		}
	    }
	    $this->closedir($dir);
	    foreach ($list as $path) {
		if (!$this->_recursiveChmod($path, $dirMode, $fileMode)) {
		    return false;
		}
	    }
	} else if ($fileMode >= 0 && !$this->chmod($path, $fileMode)) {
	    return false;
	}
	return true;
    }

    /**
     * Fixes the directory permissions (as eg. unzip creates them with file permissions because of
     * the umask).
     * @param string $path $path the directory which should be fixed
     * @return boolean true if all went well, false if there was an error.
     * @deprecated -- TODO: remove at the next major version bump of core API
     */
    function recursiveFixDirPermissions($path) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("recursiveFixDirPermissions($path)");
	}

	if (!$this->is_dir($path)) {
	    return true;
	} else if (!$this->chmod($path)) {
	    return false;
	}
	$dir = $this->opendir($path);
	if (!$dir) {
	    return false;
	}
	$slash = $this->getDirectorySeparator();
	while ($file = $this->readdir($dir)) {
	    if ($file != '.' && $file != '..' &&
		    !$this->recursiveFixDirPermissions($path . $slash . $file)) {
		return false;
	    }
	}
	$this->closedir($dir);
	return true;
    }

    /**
     * Format a local time/date according to locale settings.  Converts any text output from
     * strftime tokens to UTF-8.
     * @param string $format
     * @param int $timestamp (optional)
     * @return string
     */
    function date($format, $timestamp=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("date($format, $timestamp)");
	}
    return GalleryCoreApi::convertToUtf8(isset($timestamp) ? date($format, $timestamp) : date($format));
    }

    /**
     * Format a local time/date according to locale settings.  Converts any text output from
     * strftime tokens to UTF-8.
     * @param string $format
     * @param int $timestamp (optional)
     * @return string
     */
    function strftime($format, $timestamp=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("strftime($format, $timestamp)");
	}
    GalleryCoreApi::requireOnce(
        'modules/core/classes/helpers/php-8.1-strftime-modified.class');

	$i = 0;
	$newFormat = '';
	$textPieces = array();
	/* Separate text and tokens so we can convert only token output to UTF-8 */
	foreach (preg_split('{(%.)}', $format, -1, PREG_SPLIT_DELIM_CAPTURE) as $piece) {
	    if (++$i % 2) {
		$textPieces[] = $piece;
		$newFormat .= '&%%&s';
	    } else {
		$newFormat .= $piece;
	    }
	}
	/* Call strftime and convert to UTF-8; escape % characters before sprintf */
	$newFormat = str_replace(array('%', '&%%&'), array('%%', '%'),
	    GalleryCoreApi::convertToUtf8(
		isset($timestamp) ? PHP81_BC\strftime_modified($newFormat, $timestamp) : PHP81_BC\strftime_modified($newFormat)));
		//isset($timestamp) ? strftime($newFormat, $timestamp) : strftime($newFormat)));
	return vsprintf($newFormat, $textPieces);
    }

    /**
     * The glob() function searches for all the pathnames matching pattern according to the rules
     * used by the libc glob() function, which is similar to the rules used by common shells.  No
     * tilde expansion or parameter substitution is done.
     * @param string pattern
     * @param int flags (optional)
     * @return array containing the matched files/directories or FALSE on error.
     */
    function glob($pattern, $flags=null) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("glob($pattern, $flags)");
	}

	if (isset($flags)) {
	    return glob($pattern, $flags);
	} else {
	    return glob($pattern);
	}
    }

    /**
     * Clear any cached saved state in this platform.
     */
    function resetPlatform() {
	unset($this->_umask);
	unset($this->_filePerms);
	unset($this->_dirPerms);
	GalleryDataCache::remove('GalleryPlatform::_loadPermissionPreferences');
    }


	/**
	 * Converts all accent characters to ASCII characters.
	 * This code is from WordPress source code.
	 *
	 * If there are no accent characters, then the string given is just returned.
	 *
	 * **Accent characters converted:**
	 *
	 * Currency signs:
	 *
	 * |   Code   | Glyph | Replacement |     Description     |
	 * | -------- | ----- | ----------- | ------------------- |
	 * | U+00A3   | £     | (empty)     | British Pound sign  |
	 * | U+20AC   | €     | E           | Euro sign           |
	 *
	 * Decompositions for Latin-1 Supplement:
	 *
	 * |  Code   | Glyph | Replacement |               Description              |
	 * | ------- | ----- | ----------- | -------------------------------------- |
	 * | U+00AA  | ª     | a           | Feminine ordinal indicator             |
	 * | U+00BA  | º     | o           | Masculine ordinal indicator            |
	 * | U+00C0  | À     | A           | Latin capital letter A with grave      |
	 * | U+00C1  | Á     | A           | Latin capital letter A with acute      |
	 * | U+00C2  | Â     | A           | Latin capital letter A with circumflex |
	 * | U+00C3  | Ã     | A           | Latin capital letter A with tilde      |
	 * | U+00C4  | Ä     | A           | Latin capital letter A with diaeresis  |
	 * | U+00C5  | Å     | A           | Latin capital letter A with ring above |
	 * | U+00C6  | Æ     | AE          | Latin capital letter AE                |
	 * | U+00C7  | Ç     | C           | Latin capital letter C with cedilla    |
	 * | U+00C8  | È     | E           | Latin capital letter E with grave      |
	 * | U+00C9  | É     | E           | Latin capital letter E with acute      |
	 * | U+00CA  | Ê     | E           | Latin capital letter E with circumflex |
	 * | U+00CB  | Ë     | E           | Latin capital letter E with diaeresis  |
	 * | U+00CC  | Ì     | I           | Latin capital letter I with grave      |
	 * | U+00CD  | Í     | I           | Latin capital letter I with acute      |
	 * | U+00CE  | Î     | I           | Latin capital letter I with circumflex |
	 * | U+00CF  | Ï     | I           | Latin capital letter I with diaeresis  |
	 * | U+00D0  | Ð     | D           | Latin capital letter Eth               |
	 * | U+00D1  | Ñ     | N           | Latin capital letter N with tilde      |
	 * | U+00D2  | Ò     | O           | Latin capital letter O with grave      |
	 * | U+00D3  | Ó     | O           | Latin capital letter O with acute      |
	 * | U+00D4  | Ô     | O           | Latin capital letter O with circumflex |
	 * | U+00D5  | Õ     | O           | Latin capital letter O with tilde      |
	 * | U+00D6  | Ö     | O           | Latin capital letter O with diaeresis  |
	 * | U+00D8  | Ø     | O           | Latin capital letter O with stroke     |
	 * | U+00D9  | Ù     | U           | Latin capital letter U with grave      |
	 * | U+00DA  | Ú     | U           | Latin capital letter U with acute      |
	 * | U+00DB  | Û     | U           | Latin capital letter U with circumflex |
	 * | U+00DC  | Ü     | U           | Latin capital letter U with diaeresis  |
	 * | U+00DD  | Ý     | Y           | Latin capital letter Y with acute      |
	 * | U+00DE  | Þ     | TH          | Latin capital letter Thorn             |
	 * | U+00DF  | ß     | s           | Latin small letter sharp s             |
	 * | U+00E0  | à     | a           | Latin small letter a with grave        |
	 * | U+00E1  | á     | a           | Latin small letter a with acute        |
	 * | U+00E2  | â     | a           | Latin small letter a with circumflex   |
	 * | U+00E3  | ã     | a           | Latin small letter a with tilde        |
	 * | U+00E4  | ä     | a           | Latin small letter a with diaeresis    |
	 * | U+00E5  | å     | a           | Latin small letter a with ring above   |
	 * | U+00E6  | æ     | ae          | Latin small letter ae                  |
	 * | U+00E7  | ç     | c           | Latin small letter c with cedilla      |
	 * | U+00E8  | è     | e           | Latin small letter e with grave        |
	 * | U+00E9  | é     | e           | Latin small letter e with acute        |
	 * | U+00EA  | ê     | e           | Latin small letter e with circumflex   |
	 * | U+00EB  | ë     | e           | Latin small letter e with diaeresis    |
	 * | U+00EC  | ì     | i           | Latin small letter i with grave        |
	 * | U+00ED  | í     | i           | Latin small letter i with acute        |
	 * | U+00EE  | î     | i           | Latin small letter i with circumflex   |
	 * | U+00EF  | ï     | i           | Latin small letter i with diaeresis    |
	 * | U+00F0  | ð     | d           | Latin small letter Eth                 |
	 * | U+00F1  | ñ     | n           | Latin small letter n with tilde        |
	 * | U+00F2  | ò     | o           | Latin small letter o with grave        |
	 * | U+00F3  | ó     | o           | Latin small letter o with acute        |
	 * | U+00F4  | ô     | o           | Latin small letter o with circumflex   |
	 * | U+00F5  | õ     | o           | Latin small letter o with tilde        |
	 * | U+00F6  | ö     | o           | Latin small letter o with diaeresis    |
	 * | U+00F8  | ø     | o           | Latin small letter o with stroke       |
	 * | U+00F9  | ù     | u           | Latin small letter u with grave        |
	 * | U+00FA  | ú     | u           | Latin small letter u with acute        |
	 * | U+00FB  | û     | u           | Latin small letter u with circumflex   |
	 * | U+00FC  | ü     | u           | Latin small letter u with diaeresis    |
	 * | U+00FD  | ý     | y           | Latin small letter y with acute        |
	 * | U+00FE  | þ     | th          | Latin small letter Thorn               |
	 * | U+00FF  | ÿ     | y           | Latin small letter y with diaeresis    |
	 *
	 * Decompositions for Latin Extended-A:
	 *
	 * |  Code   | Glyph | Replacement |                    Description                    |
	 * | ------- | ----- | ----------- | ------------------------------------------------- |
	 * | U+0100  | Ā     | A           | Latin capital letter A with macron                |
	 * | U+0101  | ā     | a           | Latin small letter a with macron                  |
	 * | U+0102  | Ă     | A           | Latin capital letter A with breve                 |
	 * | U+0103  | ă     | a           | Latin small letter a with breve                   |
	 * | U+0104  | Ą     | A           | Latin capital letter A with ogonek                |
	 * | U+0105  | ą     | a           | Latin small letter a with ogonek                  |
	 * | U+01006 | Ć     | C           | Latin capital letter C with acute                 |
	 * | U+0107  | ć     | c           | Latin small letter c with acute                   |
	 * | U+0108  | Ĉ     | C           | Latin capital letter C with circumflex            |
	 * | U+0109  | ĉ     | c           | Latin small letter c with circumflex              |
	 * | U+010A  | Ċ     | C           | Latin capital letter C with dot above             |
	 * | U+010B  | ċ     | c           | Latin small letter c with dot above               |
	 * | U+010C  | Č     | C           | Latin capital letter C with caron                 |
	 * | U+010D  | č     | c           | Latin small letter c with caron                   |
	 * | U+010E  | Ď     | D           | Latin capital letter D with caron                 |
	 * | U+010F  | ď     | d           | Latin small letter d with caron                   |
	 * | U+0110  | Đ     | D           | Latin capital letter D with stroke                |
	 * | U+0111  | đ     | d           | Latin small letter d with stroke                  |
	 * | U+0112  | Ē     | E           | Latin capital letter E with macron                |
	 * | U+0113  | ē     | e           | Latin small letter e with macron                  |
	 * | U+0114  | Ĕ     | E           | Latin capital letter E with breve                 |
	 * | U+0115  | ĕ     | e           | Latin small letter e with breve                   |
	 * | U+0116  | Ė     | E           | Latin capital letter E with dot above             |
	 * | U+0117  | ė     | e           | Latin small letter e with dot above               |
	 * | U+0118  | Ę     | E           | Latin capital letter E with ogonek                |
	 * | U+0119  | ę     | e           | Latin small letter e with ogonek                  |
	 * | U+011A  | Ě     | E           | Latin capital letter E with caron                 |
	 * | U+011B  | ě     | e           | Latin small letter e with caron                   |
	 * | U+011C  | Ĝ     | G           | Latin capital letter G with circumflex            |
	 * | U+011D  | ĝ     | g           | Latin small letter g with circumflex              |
	 * | U+011E  | Ğ     | G           | Latin capital letter G with breve                 |
	 * | U+011F  | ğ     | g           | Latin small letter g with breve                   |
	 * | U+0120  | Ġ     | G           | Latin capital letter G with dot above             |
	 * | U+0121  | ġ     | g           | Latin small letter g with dot above               |
	 * | U+0122  | Ģ     | G           | Latin capital letter G with cedilla               |
	 * | U+0123  | ģ     | g           | Latin small letter g with cedilla                 |
	 * | U+0124  | Ĥ     | H           | Latin capital letter H with circumflex            |
	 * | U+0125  | ĥ     | h           | Latin small letter h with circumflex              |
	 * | U+0126  | Ħ     | H           | Latin capital letter H with stroke                |
	 * | U+0127  | ħ     | h           | Latin small letter h with stroke                  |
	 * | U+0128  | Ĩ     | I           | Latin capital letter I with tilde                 |
	 * | U+0129  | ĩ     | i           | Latin small letter i with tilde                   |
	 * | U+012A  | Ī     | I           | Latin capital letter I with macron                |
	 * | U+012B  | ī     | i           | Latin small letter i with macron                  |
	 * | U+012C  | Ĭ     | I           | Latin capital letter I with breve                 |
	 * | U+012D  | ĭ     | i           | Latin small letter i with breve                   |
	 * | U+012E  | Į     | I           | Latin capital letter I with ogonek                |
	 * | U+012F  | į     | i           | Latin small letter i with ogonek                  |
	 * | U+0130  | İ     | I           | Latin capital letter I with dot above             |
	 * | U+0131  | ı     | i           | Latin small letter dotless i                      |
	 * | U+0132  | Ĳ     | IJ          | Latin capital ligature IJ                         |
	 * | U+0133  | ĳ     | ij          | Latin small ligature ij                           |
	 * | U+0134  | Ĵ     | J           | Latin capital letter J with circumflex            |
	 * | U+0135  | ĵ     | j           | Latin small letter j with circumflex              |
	 * | U+0136  | Ķ     | K           | Latin capital letter K with cedilla               |
	 * | U+0137  | ķ     | k           | Latin small letter k with cedilla                 |
	 * | U+0138  | ĸ     | k           | Latin small letter Kra                            |
	 * | U+0139  | Ĺ     | L           | Latin capital letter L with acute                 |
	 * | U+013A  | ĺ     | l           | Latin small letter l with acute                   |
	 * | U+013B  | Ļ     | L           | Latin capital letter L with cedilla               |
	 * | U+013C  | ļ     | l           | Latin small letter l with cedilla                 |
	 * | U+013D  | Ľ     | L           | Latin capital letter L with caron                 |
	 * | U+013E  | ľ     | l           | Latin small letter l with caron                   |
	 * | U+013F  | Ŀ     | L           | Latin capital letter L with middle dot            |
	 * | U+0140  | ŀ     | l           | Latin small letter l with middle dot              |
	 * | U+0141  | Ł     | L           | Latin capital letter L with stroke                |
	 * | U+0142  | ł     | l           | Latin small letter l with stroke                  |
	 * | U+0143  | Ń     | N           | Latin capital letter N with acute                 |
	 * | U+0144  | ń     | n           | Latin small letter N with acute                   |
	 * | U+0145  | Ņ     | N           | Latin capital letter N with cedilla               |
	 * | U+0146  | ņ     | n           | Latin small letter n with cedilla                 |
	 * | U+0147  | Ň     | N           | Latin capital letter N with caron                 |
	 * | U+0148  | ň     | n           | Latin small letter n with caron                   |
	 * | U+0149  | ŉ     | n           | Latin small letter n preceded by apostrophe       |
	 * | U+014A  | Ŋ     | N           | Latin capital letter Eng                          |
	 * | U+014B  | ŋ     | n           | Latin small letter Eng                            |
	 * | U+014C  | Ō     | O           | Latin capital letter O with macron                |
	 * | U+014D  | ō     | o           | Latin small letter o with macron                  |
	 * | U+014E  | Ŏ     | O           | Latin capital letter O with breve                 |
	 * | U+014F  | ŏ     | o           | Latin small letter o with breve                   |
	 * | U+0150  | Ő     | O           | Latin capital letter O with double acute          |
	 * | U+0151  | ő     | o           | Latin small letter o with double acute            |
	 * | U+0152  | Œ     | OE          | Latin capital ligature OE                         |
	 * | U+0153  | œ     | oe          | Latin small ligature oe                           |
	 * | U+0154  | Ŕ     | R           | Latin capital letter R with acute                 |
	 * | U+0155  | ŕ     | r           | Latin small letter r with acute                   |
	 * | U+0156  | Ŗ     | R           | Latin capital letter R with cedilla               |
	 * | U+0157  | ŗ     | r           | Latin small letter r with cedilla                 |
	 * | U+0158  | Ř     | R           | Latin capital letter R with caron                 |
	 * | U+0159  | ř     | r           | Latin small letter r with caron                   |
	 * | U+015A  | Ś     | S           | Latin capital letter S with acute                 |
	 * | U+015B  | ś     | s           | Latin small letter s with acute                   |
	 * | U+015C  | Ŝ     | S           | Latin capital letter S with circumflex            |
	 * | U+015D  | ŝ     | s           | Latin small letter s with circumflex              |
	 * | U+015E  | Ş     | S           | Latin capital letter S with cedilla               |
	 * | U+015F  | ş     | s           | Latin small letter s with cedilla                 |
	 * | U+0160  | Š     | S           | Latin capital letter S with caron                 |
	 * | U+0161  | š     | s           | Latin small letter s with caron                   |
	 * | U+0162  | Ţ     | T           | Latin capital letter T with cedilla               |
	 * | U+0163  | ţ     | t           | Latin small letter t with cedilla                 |
	 * | U+0164  | Ť     | T           | Latin capital letter T with caron                 |
	 * | U+0165  | ť     | t           | Latin small letter t with caron                   |
	 * | U+0166  | Ŧ     | T           | Latin capital letter T with stroke                |
	 * | U+0167  | ŧ     | t           | Latin small letter t with stroke                  |
	 * | U+0168  | Ũ     | U           | Latin capital letter U with tilde                 |
	 * | U+0169  | ũ     | u           | Latin small letter u with tilde                   |
	 * | U+016A  | Ū     | U           | Latin capital letter U with macron                |
	 * | U+016B  | ū     | u           | Latin small letter u with macron                  |
	 * | U+016C  | Ŭ     | U           | Latin capital letter U with breve                 |
	 * | U+016D  | ŭ     | u           | Latin small letter u with breve                   |
	 * | U+016E  | Ů     | U           | Latin capital letter U with ring above            |
	 * | U+016F  | ů     | u           | Latin small letter u with ring above              |
	 * | U+0170  | Ű     | U           | Latin capital letter U with double acute          |
	 * | U+0171  | ű     | u           | Latin small letter u with double acute            |
	 * | U+0172  | Ų     | U           | Latin capital letter U with ogonek                |
	 * | U+0173  | ų     | u           | Latin small letter u with ogonek                  |
	 * | U+0174  | Ŵ     | W           | Latin capital letter W with circumflex            |
	 * | U+0175  | ŵ     | w           | Latin small letter w with circumflex              |
	 * | U+0176  | Ŷ     | Y           | Latin capital letter Y with circumflex            |
	 * | U+0177  | ŷ     | y           | Latin small letter y with circumflex              |
	 * | U+0178  | Ÿ     | Y           | Latin capital letter Y with diaeresis             |
	 * | U+0179  | Ź     | Z           | Latin capital letter Z with acute                 |
	 * | U+017A  | ź     | z           | Latin small letter z with acute                   |
	 * | U+017B  | Ż     | Z           | Latin capital letter Z with dot above             |
	 * | U+017C  | ż     | z           | Latin small letter z with dot above               |
	 * | U+017D  | Ž     | Z           | Latin capital letter Z with caron                 |
	 * | U+017E  | ž     | z           | Latin small letter z with caron                   |
	 * | U+017F  | ſ     | s           | Latin small letter long s                         |
	 * | U+01A0  | Ơ     | O           | Latin capital letter O with horn                  |
	 * | U+01A1  | ơ     | o           | Latin small letter o with horn                    |
	 * | U+01AF  | Ư     | U           | Latin capital letter U with horn                  |
	 * | U+01B0  | ư     | u           | Latin small letter u with horn                    |
	 * | U+01CD  | Ǎ     | A           | Latin capital letter A with caron                 |
	 * | U+01CE  | ǎ     | a           | Latin small letter a with caron                   |
	 * | U+01CF  | Ǐ     | I           | Latin capital letter I with caron                 |
	 * | U+01D0  | ǐ     | i           | Latin small letter i with caron                   |
	 * | U+01D1  | Ǒ     | O           | Latin capital letter O with caron                 |
	 * | U+01D2  | ǒ     | o           | Latin small letter o with caron                   |
	 * | U+01D3  | Ǔ     | U           | Latin capital letter U with caron                 |
	 * | U+01D4  | ǔ     | u           | Latin small letter u with caron                   |
	 * | U+01D5  | Ǖ     | U           | Latin capital letter U with diaeresis and macron  |
	 * | U+01D6  | ǖ     | u           | Latin small letter u with diaeresis and macron    |
	 * | U+01D7  | Ǘ     | U           | Latin capital letter U with diaeresis and acute   |
	 * | U+01D8  | ǘ     | u           | Latin small letter u with diaeresis and acute     |
	 * | U+01D9  | Ǚ     | U           | Latin capital letter U with diaeresis and caron   |
	 * | U+01DA  | ǚ     | u           | Latin small letter u with diaeresis and caron     |
	 * | U+01DB  | Ǜ     | U           | Latin capital letter U with diaeresis and grave   |
	 * | U+01DC  | ǜ     | u           | Latin small letter u with diaeresis and grave     |
	 *
	 * Decompositions for Latin Extended-B:
	 *
	 * |   Code   | Glyph | Replacement |                Description                |
	 * | -------- | ----- | ----------- | ----------------------------------------- |
	 * | U+0218   | Ș     | S           | Latin capital letter S with comma below   |
	 * | U+0219   | ș     | s           | Latin small letter s with comma below     |
	 * | U+021A   | Ț     | T           | Latin capital letter T with comma below   |
	 * | U+021B   | ț     | t           | Latin small letter t with comma below     |
	 *
	 * Vowels with diacritic (Chinese, Hanyu Pinyin):
	 *
	 * |   Code   | Glyph | Replacement |                      Description                      |
	 * | -------- | ----- | ----------- | ----------------------------------------------------- |
	 * | U+0251   | ɑ     | a           | Latin small letter alpha                              |
	 * | U+1EA0   | Ạ     | A           | Latin capital letter A with dot below                 |
	 * | U+1EA1   | ạ     | a           | Latin small letter a with dot below                   |
	 * | U+1EA2   | Ả     | A           | Latin capital letter A with hook above                |
	 * | U+1EA3   | ả     | a           | Latin small letter a with hook above                  |
	 * | U+1EA4   | Ấ     | A           | Latin capital letter A with circumflex and acute      |
	 * | U+1EA5   | ấ     | a           | Latin small letter a with circumflex and acute        |
	 * | U+1EA6   | Ầ     | A           | Latin capital letter A with circumflex and grave      |
	 * | U+1EA7   | ầ     | a           | Latin small letter a with circumflex and grave        |
	 * | U+1EA8   | Ẩ     | A           | Latin capital letter A with circumflex and hook above |
	 * | U+1EA9   | ẩ     | a           | Latin small letter a with circumflex and hook above   |
	 * | U+1EAA   | Ẫ     | A           | Latin capital letter A with circumflex and tilde      |
	 * | U+1EAB   | ẫ     | a           | Latin small letter a with circumflex and tilde        |
	 * | U+1EA6   | Ậ     | A           | Latin capital letter A with circumflex and dot below  |
	 * | U+1EAD   | ậ     | a           | Latin small letter a with circumflex and dot below    |
	 * | U+1EAE   | Ắ     | A           | Latin capital letter A with breve and acute           |
	 * | U+1EAF   | ắ     | a           | Latin small letter a with breve and acute             |
	 * | U+1EB0   | Ằ     | A           | Latin capital letter A with breve and grave           |
	 * | U+1EB1   | ằ     | a           | Latin small letter a with breve and grave             |
	 * | U+1EB2   | Ẳ     | A           | Latin capital letter A with breve and hook above      |
	 * | U+1EB3   | ẳ     | a           | Latin small letter a with breve and hook above        |
	 * | U+1EB4   | Ẵ     | A           | Latin capital letter A with breve and tilde           |
	 * | U+1EB5   | ẵ     | a           | Latin small letter a with breve and tilde             |
	 * | U+1EB6   | Ặ     | A           | Latin capital letter A with breve and dot below       |
	 * | U+1EB7   | ặ     | a           | Latin small letter a with breve and dot below         |
	 * | U+1EB8   | Ẹ     | E           | Latin capital letter E with dot below                 |
	 * | U+1EB9   | ẹ     | e           | Latin small letter e with dot below                   |
	 * | U+1EBA   | Ẻ     | E           | Latin capital letter E with hook above                |
	 * | U+1EBB   | ẻ     | e           | Latin small letter e with hook above                  |
	 * | U+1EBC   | Ẽ     | E           | Latin capital letter E with tilde                     |
	 * | U+1EBD   | ẽ     | e           | Latin small letter e with tilde                       |
	 * | U+1EBE   | Ế     | E           | Latin capital letter E with circumflex and acute      |
	 * | U+1EBF   | ế     | e           | Latin small letter e with circumflex and acute        |
	 * | U+1EC0   | Ề     | E           | Latin capital letter E with circumflex and grave      |
	 * | U+1EC1   | ề     | e           | Latin small letter e with circumflex and grave        |
	 * | U+1EC2   | Ể     | E           | Latin capital letter E with circumflex and hook above |
	 * | U+1EC3   | ể     | e           | Latin small letter e with circumflex and hook above   |
	 * | U+1EC4   | Ễ     | E           | Latin capital letter E with circumflex and tilde      |
	 * | U+1EC5   | ễ     | e           | Latin small letter e with circumflex and tilde        |
	 * | U+1EC6   | Ệ     | E           | Latin capital letter E with circumflex and dot below  |
	 * | U+1EC7   | ệ     | e           | Latin small letter e with circumflex and dot below    |
	 * | U+1EC8   | Ỉ     | I           | Latin capital letter I with hook above                |
	 * | U+1EC9   | ỉ     | i           | Latin small letter i with hook above                  |
	 * | U+1ECA   | Ị     | I           | Latin capital letter I with dot below                 |
	 * | U+1ECB   | ị     | i           | Latin small letter i with dot below                   |
	 * | U+1ECC   | Ọ     | O           | Latin capital letter O with dot below                 |
	 * | U+1ECD   | ọ     | o           | Latin small letter o with dot below                   |
	 * | U+1ECE   | Ỏ     | O           | Latin capital letter O with hook above                |
	 * | U+1ECF   | ỏ     | o           | Latin small letter o with hook above                  |
	 * | U+1ED0   | Ố     | O           | Latin capital letter O with circumflex and acute      |
	 * | U+1ED1   | ố     | o           | Latin small letter o with circumflex and acute        |
	 * | U+1ED2   | Ồ     | O           | Latin capital letter O with circumflex and grave      |
	 * | U+1ED3   | ồ     | o           | Latin small letter o with circumflex and grave        |
	 * | U+1ED4   | Ổ     | O           | Latin capital letter O with circumflex and hook above |
	 * | U+1ED5   | ổ     | o           | Latin small letter o with circumflex and hook above   |
	 * | U+1ED6   | Ỗ     | O           | Latin capital letter O with circumflex and tilde      |
	 * | U+1ED7   | ỗ     | o           | Latin small letter o with circumflex and tilde        |
	 * | U+1ED8   | Ộ     | O           | Latin capital letter O with circumflex and dot below  |
	 * | U+1ED9   | ộ     | o           | Latin small letter o with circumflex and dot below    |
	 * | U+1EDA   | Ớ     | O           | Latin capital letter O with horn and acute            |
	 * | U+1EDB   | ớ     | o           | Latin small letter o with horn and acute              |
	 * | U+1EDC   | Ờ     | O           | Latin capital letter O with horn and grave            |
	 * | U+1EDD   | ờ     | o           | Latin small letter o with horn and grave              |
	 * | U+1EDE   | Ở     | O           | Latin capital letter O with horn and hook above       |
	 * | U+1EDF   | ở     | o           | Latin small letter o with horn and hook above         |
	 * | U+1EE0   | Ỡ     | O           | Latin capital letter O with horn and tilde            |
	 * | U+1EE1   | ỡ     | o           | Latin small letter o with horn and tilde              |
	 * | U+1EE2   | Ợ     | O           | Latin capital letter O with horn and dot below        |
	 * | U+1EE3   | ợ     | o           | Latin small letter o with horn and dot below          |
	 * | U+1EE4   | Ụ     | U           | Latin capital letter U with dot below                 |
	 * | U+1EE5   | ụ     | u           | Latin small letter u with dot below                   |
	 * | U+1EE6   | Ủ     | U           | Latin capital letter U with hook above                |
	 * | U+1EE7   | ủ     | u           | Latin small letter u with hook above                  |
	 * | U+1EE8   | Ứ     | U           | Latin capital letter U with horn and acute            |
	 * | U+1EE9   | ứ     | u           | Latin small letter u with horn and acute              |
	 * | U+1EEA   | Ừ     | U           | Latin capital letter U with horn and grave            |
	 * | U+1EEB   | ừ     | u           | Latin small letter u with horn and grave              |
	 * | U+1EEC   | Ử     | U           | Latin capital letter U with horn and hook above       |
	 * | U+1EED   | ử     | u           | Latin small letter u with horn and hook above         |
	 * | U+1EEE   | Ữ     | U           | Latin capital letter U with horn and tilde            |
	 * | U+1EEF   | ữ     | u           | Latin small letter u with horn and tilde              |
	 * | U+1EF0   | Ự     | U           | Latin capital letter U with horn and dot below        |
	 * | U+1EF1   | ự     | u           | Latin small letter u with horn and dot below          |
	 * | U+1EF2   | Ỳ     | Y           | Latin capital letter Y with grave                     |
	 * | U+1EF3   | ỳ     | y           | Latin small letter y with grave                       |
	 * | U+1EF4   | Ỵ     | Y           | Latin capital letter Y with dot below                 |
	 * | U+1EF5   | ỵ     | y           | Latin small letter y with dot below                   |
	 * | U+1EF6   | Ỷ     | Y           | Latin capital letter Y with hook above                |
	 * | U+1EF7   | ỷ     | y           | Latin small letter y with hook above                  |
	 * | U+1EF8   | Ỹ     | Y           | Latin capital letter Y with tilde                     |
	 * | U+1EF9   | ỹ     | y           | Latin small letter y with tilde                       |
	 *
	 * German (`de_DE`), German formal (`de_DE_formal`), German (Switzerland) formal (`de_CH`),
	 * and German (Switzerland) informal (`de_CH_informal`) locales:
	 *
	 * |   Code   | Glyph | Replacement |               Description               |
	 * | -------- | ----- | ----------- | --------------------------------------- |
	 * | U+00C4   | Ä     | Ae          | Latin capital letter A with diaeresis   |
	 * | U+00E4   | ä     | ae          | Latin small letter a with diaeresis     |
	 * | U+00D6   | Ö     | Oe          | Latin capital letter O with diaeresis   |
	 * | U+00F6   | ö     | oe          | Latin small letter o with diaeresis     |
	 * | U+00DC   | Ü     | Ue          | Latin capital letter U with diaeresis   |
	 * | U+00FC   | ü     | ue          | Latin small letter u with diaeresis     |
	 * | U+00DF   | ß     | ss          | Latin small letter sharp s              |
	 *
	 * Danish (`da_DK`) locale:
	 *
	 * |   Code   | Glyph | Replacement |               Description               |
	 * | -------- | ----- | ----------- | --------------------------------------- |
	 * | U+00C6   | Æ     | Ae          | Latin capital letter AE                 |
	 * | U+00E6   | æ     | ae          | Latin small letter ae                   |
	 * | U+00D8   | Ø     | Oe          | Latin capital letter O with stroke      |
	 * | U+00F8   | ø     | oe          | Latin small letter o with stroke        |
	 * | U+00C5   | Å     | Aa          | Latin capital letter A with ring above  |
	 * | U+00E5   | å     | aa          | Latin small letter a with ring above    |
	 *
	 * Catalan (`ca`) locale:
	 *
	 * |   Code   | Glyph | Replacement |               Description               |
	 * | -------- | ----- | ----------- | --------------------------------------- |
	 * | U+00B7   | l·l   | ll          | Flown dot (between two Ls)              |
	 *
	 * Serbian (`sr_RS`) and Bosnian (`bs_BA`) locales:
	 *
	 * |   Code   | Glyph | Replacement |               Description               |
	 * | -------- | ----- | ----------- | --------------------------------------- |
	 * | U+0110   | Đ     | DJ          | Latin capital letter D with stroke      |
	 * | U+0111   | đ     | dj          | Latin small letter d with stroke        |
	 *
	 * @since 1.2.1
	 * @since 4.6.0 Added locale support for `de_CH`, `de_CH_informal`, and `ca`.
	 * @since 4.7.0 Added locale support for `sr_RS`.
	 * @since 4.8.0 Added locale support for `bs_BA`.
	 *
	 * @param string $string Text that might have accent characters
	 * @return string Filtered string with replaced "nice" characters.
	 */
	static function remove_accents( $string ) {
		global $gallery;

		if ( !preg_match('/[\x80-\xff]/', $string) )
			return $string;

		if (GalleryPlatform::seems_utf8($string)) {
			if ($gallery->getDebug()) {
				$gallery->debug("seems utf8");
			}

			$chars = array(
				// MacOS UTF-8 Chars
				// Accute accent
			    "\x61\xcc\x81" => 'a',
			    "\x65\xcc\x81" => 'e',
			    "\x69\xcc\x81" => 'i',
			    "\x6f\xcc\x81" => 'o',
			    "\x75\xcc\x81" => 'u',

			    "\x41\xcc\x81" => 'A',
			    "\x45\xcc\x81" => 'E',
			    "\x49\xcc\x81" => 'I',
			    "\x4f\xcc\x81" => 'O',
			    "\x55\xcc\x81" => 'U',

				// Grave accent
			    "\x61\xcc\x80" => 'a',
			    "\x65\xcc\x80" => 'e',
			    "\x69\xcc\x80" => 'i',
			    "\x6f\xcc\x80" => 'o',
			    "\x75\xcc\x80" => 'u',

			    "\x41\xcc\x80" => 'A',
			    "\x45\xcc\x80" => 'E',
			    "\x49\xcc\x80" => 'I',
			    "\x4f\xcc\x80" => 'O',
			    "\x55\xcc\x80" => 'U',

				// Dieresis
			    "\x61\xcc\x88" => 'a',
			    "\x65\xcc\x88" => 'e',
			    "\x69\xcc\x88" => 'i',
			    "\x6f\xcc\x88" => 'o',
			    "\x75\xcc\x88" => 'u',

			    "\x41\xcc\x88" => 'A',
			    "\x45\xcc\x88" => 'E',
			    "\x49\xcc\x88" => 'I',
			    "\x4f\xcc\x88" => 'O',
			    "\x55\xcc\x88" => 'U',

				// Cedilla
			    "\x63\xcc\xa7" => 'c',
			    "\x43\xcc\xa7" => 'C',

				// L llaminada
			    "\x6c\xc2\xb7" => 'l',
			    "\x4c\xc2\xb7" => 'L',

				// N tilde
			    "\x6e\xcc\x83" => 'n',
			    "\x4e\xcc\x83" => 'N',

				// Decompositions for Latin-1 Supplement
			    'ª' => 'a', 'º' => 'o',
			    'À' => 'A', 'Á' => 'A',
			    'Â' => 'A', 'Ã' => 'A',
			    'Ä' => 'A', 'Å' => 'A',
			    'Æ' => 'AE','Ç' => 'C',
			    'È' => 'E', 'É' => 'E',
			    'Ê' => 'E', 'Ë' => 'E',
			    'Ì' => 'I', 'Í' => 'I',
			    'Î' => 'I', 'Ï' => 'I',
			    'Ð' => 'D', 'Ñ' => 'N',
			    'Ò' => 'O', 'Ó' => 'O',
			    'Ô' => 'O', 'Õ' => 'O',
			    'Ö' => 'O', 'Ù' => 'U',
			    'Ú' => 'U', 'Û' => 'U',
			    'Ü' => 'U', 'Ý' => 'Y',
			    'Þ' => 'TH','ß' => 's',
			    'à' => 'a', 'á' => 'a',
			    'â' => 'a', 'ã' => 'a',
			    'ä' => 'a', 'å' => 'a',
			    'æ' => 'ae','ç' => 'c',
			    'è' => 'e', 'é' => 'e',
			    'ê' => 'e', 'ë' => 'e',
			    'ì' => 'i', 'í' => 'i',
			    'î' => 'i', 'ï' => 'i',
			    'ð' => 'd', 'ñ' => 'n',
			    'ò' => 'o', 'ó' => 'o',
			    'ô' => 'o', 'õ' => 'o',
			    'ö' => 'o', 'ø' => 'o',
			    'ù' => 'u', 'ú' => 'u',
			    'û' => 'u', 'ü' => 'u',
			    'ý' => 'y', 'þ' => 'th',
			    'ÿ' => 'y', 'Ø' => 'O',
				// Decompositions for Latin Extended-A
			    'Ā' => 'A', 'ā' => 'a',
			    'Ă' => 'A', 'ă' => 'a',
			    'Ą' => 'A', 'ą' => 'a',
			    'Ć' => 'C', 'ć' => 'c',
			    'Ĉ' => 'C', 'ĉ' => 'c',
			    'Ċ' => 'C', 'ċ' => 'c',
			    'Č' => 'C', 'č' => 'c',
			    'Ď' => 'D', 'ď' => 'd',
			    'Đ' => 'D', 'đ' => 'd',
			    'Ē' => 'E', 'ē' => 'e',
			    'Ĕ' => 'E', 'ĕ' => 'e',
			    'Ė' => 'E', 'ė' => 'e',
			    'Ę' => 'E', 'ę' => 'e',
			    'Ě' => 'E', 'ě' => 'e',
			    'Ĝ' => 'G', 'ĝ' => 'g',
			    'Ğ' => 'G', 'ğ' => 'g',
			    'Ġ' => 'G', 'ġ' => 'g',
			    'Ģ' => 'G', 'ģ' => 'g',
			    'Ĥ' => 'H', 'ĥ' => 'h',
			    'Ħ' => 'H', 'ħ' => 'h',
			    'Ĩ' => 'I', 'ĩ' => 'i',
			    'Ī' => 'I', 'ī' => 'i',
			    'Ĭ' => 'I', 'ĭ' => 'i',
			    'Į' => 'I', 'į' => 'i',
			    'İ' => 'I', 'ı' => 'i',
			    'Ĳ' => 'IJ','ĳ' => 'ij',
			    'Ĵ' => 'J', 'ĵ' => 'j',
			    'Ķ' => 'K', 'ķ' => 'k',
			    'ĸ' => 'k', 'Ĺ' => 'L',
			    'ĺ' => 'l', 'Ļ' => 'L',
			    'ļ' => 'l', 'Ľ' => 'L',
			    'ľ' => 'l', 'Ŀ' => 'L',
			    'ŀ' => 'l', 'Ł' => 'L',
			    'ł' => 'l', 'Ń' => 'N',
			    'ń' => 'n', 'Ņ' => 'N',
			    'ņ' => 'n', 'Ň' => 'N',
			    'ň' => 'n', 'ŉ' => 'n',
			    'Ŋ' => 'N', 'ŋ' => 'n',
			    'Ō' => 'O', 'ō' => 'o',
			    'Ŏ' => 'O', 'ŏ' => 'o',
			    'Ő' => 'O', 'ő' => 'o',
			    'Œ' => 'OE','œ' => 'oe',
			    'Ŕ' => 'R','ŕ' => 'r',
			    'Ŗ' => 'R','ŗ' => 'r',
			    'Ř' => 'R','ř' => 'r',
			    'Ś' => 'S','ś' => 's',
			    'Ŝ' => 'S','ŝ' => 's',
			    'Ş' => 'S','ş' => 's',
			    'Š' => 'S', 'š' => 's',
			    'Ţ' => 'T', 'ţ' => 't',
			    'Ť' => 'T', 'ť' => 't',
			    'Ŧ' => 'T', 'ŧ' => 't',
			    'Ũ' => 'U', 'ũ' => 'u',
			    'Ū' => 'U', 'ū' => 'u',
			    'Ŭ' => 'U', 'ŭ' => 'u',
			    'Ů' => 'U', 'ů' => 'u',
			    'Ű' => 'U', 'ű' => 'u',
			    'Ų' => 'U', 'ų' => 'u',
			    'Ŵ' => 'W', 'ŵ' => 'w',
			    'Ŷ' => 'Y', 'ŷ' => 'y',
			    'Ÿ' => 'Y', 'Ź' => 'Z',
			    'ź' => 'z', 'Ż' => 'Z',
			    'ż' => 'z', 'Ž' => 'Z',
			    'ž' => 'z', 'ſ' => 's',
				// Decompositions for Latin Extended-B
			    'Ș' => 'S', 'ș' => 's',
			    'Ț' => 'T', 'ț' => 't',
				// Euro Sign
			    '€' => 'E',
				// GBP (Pound) Sign
			    '£' => '',
				// Vowels with diacritic (Vietnamese)
				// unmarked
			    'Ơ' => 'O', 'ơ' => 'o',
			    'Ư' => 'U', 'ư' => 'u',
				// grave accent
			    'Ầ' => 'A', 'ầ' => 'a',
			    'Ằ' => 'A', 'ằ' => 'a',
			    'Ề' => 'E', 'ề' => 'e',
			    'Ồ' => 'O', 'ồ' => 'o',
			    'Ờ' => 'O', 'ờ' => 'o',
			    'Ừ' => 'U', 'ừ' => 'u',
			    'Ỳ' => 'Y', 'ỳ' => 'y',
				// hook
			    'Ả' => 'A', 'ả' => 'a',
			    'Ẩ' => 'A', 'ẩ' => 'a',
			    'Ẳ' => 'A', 'ẳ' => 'a',
			    'Ẻ' => 'E', 'ẻ' => 'e',
			    'Ể' => 'E', 'ể' => 'e',
			    'Ỉ' => 'I', 'ỉ' => 'i',
			    'Ỏ' => 'O', 'ỏ' => 'o',
			    'Ổ' => 'O', 'ổ' => 'o',
			    'Ở' => 'O', 'ở' => 'o',
			    'Ủ' => 'U', 'ủ' => 'u',
			    'Ử' => 'U', 'ử' => 'u',
			    'Ỷ' => 'Y', 'ỷ' => 'y',
				// tilde
			    'Ẫ' => 'A', 'ẫ' => 'a',
			    'Ẵ' => 'A', 'ẵ' => 'a',
			    'Ẽ' => 'E', 'ẽ' => 'e',
			    'Ễ' => 'E', 'ễ' => 'e',
			    'Ỗ' => 'O', 'ỗ' => 'o',
			    'Ỡ' => 'O', 'ỡ' => 'o',
			    'Ữ' => 'U', 'ữ' => 'u',
			    'Ỹ' => 'Y', 'ỹ' => 'y',
				// acute accent
			    'Ấ' => 'A', 'ấ' => 'a',
			    'Ắ' => 'A', 'ắ' => 'a',
			    'Ế' => 'E', 'ế' => 'e',
			    'Ố' => 'O', 'ố' => 'o',
			    'Ớ' => 'O', 'ớ' => 'o',
			    'Ứ' => 'U', 'ứ' => 'u',
				// dot below
			    'Ạ' => 'A', 'ạ' => 'a',
			    'Ậ' => 'A', 'ậ' => 'a',
			    'Ặ' => 'A', 'ặ' => 'a',
			    'Ẹ' => 'E', 'ẹ' => 'e',
			    'Ệ' => 'E', 'ệ' => 'e',
			    'Ị' => 'I', 'ị' => 'i',
			    'Ọ' => 'O', 'ọ' => 'o',
			    'Ộ' => 'O', 'ộ' => 'o',
			    'Ợ' => 'O', 'ợ' => 'o',
			    'Ụ' => 'U', 'ụ' => 'u',
			    'Ự' => 'U', 'ự' => 'u',
			    'Ỵ' => 'Y', 'ỵ' => 'y',
				// Vowels with diacritic (Chinese, Hanyu Pinyin)
			    'ɑ' => 'a',
				// macron
			    'Ǖ' => 'U', 'ǖ' => 'u',
				// acute accent
			    'Ǘ' => 'U', 'ǘ' => 'u',
				// caron
			    'Ǎ' => 'A', 'ǎ' => 'a',
			    'Ǐ' => 'I', 'ǐ' => 'i',
			    'Ǒ' => 'O', 'ǒ' => 'o',
			    'Ǔ' => 'U', 'ǔ' => 'u',
			    'Ǚ' => 'U', 'ǚ' => 'u',
				// grave accent
			    'Ǜ' => 'U', 'ǜ' => 'u',
			);

			// Used for locale-specific rules
			list(, $locale) = $gallery->getActiveLanguageCode();

			if ( 'de_DE' == $locale || 'de_DE_formal' == $locale || 'de_CH' == $locale || 'de_CH_informal' == $locale ) {
				$chars[ 'Ä' ] = 'Ae';
				$chars[ 'ä' ] = 'ae';
				$chars[ 'Ö' ] = 'Oe';
				$chars[ 'ö' ] = 'oe';
				$chars[ 'Ü' ] = 'Ue';
				$chars[ 'ü' ] = 'ue';
				$chars[ 'ß' ] = 'ss';
			} elseif ( 'da_DK' === $locale ) {
				$chars[ 'Æ' ] = 'Ae';
				$chars[ 'æ' ] = 'ae';
				$chars[ 'Ø' ] = 'Oe';
				$chars[ 'ø' ] = 'oe';
				$chars[ 'Å' ] = 'Aa';
				$chars[ 'å' ] = 'aa';
			} elseif ( 'ca' === $locale ) {
				$chars[ 'l·l' ] = 'll';
			} elseif ( 'sr_RS' === $locale || 'bs_BA' === $locale ) {
				$chars[ 'Đ' ] = 'DJ';
				$chars[ 'đ' ] = 'dj';
			}

			// $string = GalleryPlatform::mb_strtr($string, $chars);
			$string = strtr($string, $chars);
		} else {

			if ($gallery->getDebug()) {
				$gallery->debug("DONT seem utf8");
			}

			$chars = array();
			// Assume ISO-8859-1 if not UTF-8
			$chars['in'] = "\x80\x83\x8a\x8e\x9a\x9e"
			    ."\x9f\xa2\xa5\xb5\xc0\xc1\xc2"
			    ."\xc3\xc4\xc5\xc7\xc8\xc9\xca"
			    ."\xcb\xcc\xcd\xce\xcf\xd1\xd2"
			    ."\xd3\xd4\xd5\xd6\xd8\xd9\xda"
			    ."\xdb\xdc\xdd\xe0\xe1\xe2\xe3"
			    ."\xe4\xe5\xe7\xe8\xe9\xea\xeb"
			    ."\xec\xed\xee\xef\xf1\xf2\xf3"
			    ."\xf4\xf5\xf6\xf8\xf9\xfa\xfb"
			    ."\xfc\xfd\xff";

			$chars['out'] = "EfSZszYcYuAAAAAACEEEEIIIINOOOOOOUUUUYaaaaaaceeeeiiiinoooooouuuuyy";

			$string = strtr($string, $chars['in'], $chars['out']);
			$double_chars = array();
			$double_chars['in'] = array("\x8c", "\x9c", "\xc6", "\xd0", "\xde", "\xdf", "\xe6", "\xf0", "\xfe");
			$double_chars['out'] = array('OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th');
			$string = str_replace($double_chars['in'], $double_chars['out'], $string);
		}

		return $string;
	}

	static function mbstring_binary_safe_encoding( $reset = false ) {
		static $encodings = array();
		static $overloaded = null;

		if ( is_null( $overloaded ) )
			$overloaded = function_exists( 'mb_internal_encoding' ) && ( ini_get( 'mbstring.func_overload' ) & 2 );

		if ( false === $overloaded )
			return;

		if ( ! $reset ) {
			$encoding = mb_internal_encoding();
			array_push( $encodings, $encoding );
			mb_internal_encoding( 'ISO-8859-1' );
		}

		if ( $reset && $encodings ) {
			$encoding = array_pop( $encodings );
			mb_internal_encoding( $encoding );
		}
	}

	static function reset_mbstring_encoding() {
		GalleryPlatform::mbstring_binary_safe_encoding( true );
	}

	static function seems_utf8( $str ) {
		GalleryPlatform::mbstring_binary_safe_encoding();
		$length = strlen($str);
		GalleryPlatform::reset_mbstring_encoding();
		for ($i=0; $i < $length; $i++) {
			$c = ord($str[$i]);
			if ($c < 0x80) $n = 0; // 0bbbbbbb
			elseif (($c & 0xE0) == 0xC0) $n=1; // 110bbbbb
			elseif (($c & 0xF0) == 0xE0) $n=2; // 1110bbbb
			elseif (($c & 0xF8) == 0xF0) $n=3; // 11110bbb
			elseif (($c & 0xFC) == 0xF8) $n=4; // 111110bb
			elseif (($c & 0xFE) == 0xFC) $n=5; // 1111110b
			else return false; // Does not match any model
			for ($j=0; $j<$n; $j++) { // n bytes matching 10bbbbbb follow ?
				if ((++$i == $length) || ((ord($str[$i]) & 0xC0) != 0x80))
					return false;
			}
		}
		return true;
	}

	static function sanitize_title_with_dashes( $title) {
		// Preserve escaped octets.
		$title = preg_replace( '|%([a-fA-F0-9][a-fA-F0-9])|', '---$1---', $title );
		// Remove percent signs that are not part of an octet.
		$title = str_replace( '%', '', $title );
		// Restore octets.
		$title = preg_replace( '|---([a-fA-F0-9][a-fA-F0-9])---|', '%$1', $title );

		if ( GalleryPlatform::seems_utf8( $title ) ) {
			if ( function_exists( 'mb_strtolower' ) ) {
				$title = mb_strtolower( $title, 'UTF-8' );
			}
		}

		$title = strtolower( $title );

		// Kill entities.
		$title = preg_replace( '/&.+?;/', '', $title );
		$title = str_replace( '.', '-', $title );

		$title = preg_replace( '/[^%a-z0-9 _-]/', '-', $title );
		$title = preg_replace( '/\s+/', '-', $title );
		$title = preg_replace( '|-+|', '-', $title );
		$title = trim( $title, '-' );

		return $title;
	}

	static function sanitize_file_name($filename) {
		$filename     = GalleryPlatform::remove_accents( $filename );

		$special_chars = array( '?', '[', ']', '/', '\\', '=', '<', '>', ':', ';', ',', "'", '"', '&', '$', '#', '*', '(', ')', '|', '~', '`', '!', '{', '}', '%', '+', '’', '«', '»', '”', '“', chr( 0 ) );

		// Check for support for utf8 in the installed PCRE library once and store the result in a static.
		static $utf8_pcre = null;
		if ( ! isset( $utf8_pcre ) ) {
			// phpcs:ignore WordPress.PHP.NoSilencedErrors.Discouraged
			$utf8_pcre = @preg_match( '/^./u', 'a' );
		}

		$_ext     = pathinfo( $filename, PATHINFO_EXTENSION );
		$_name    = pathinfo( $filename, PATHINFO_FILENAME );
		$filename = GalleryPlatform::sanitize_title_with_dashes( $_name ) . '.' . $_ext;

		if ( $utf8_pcre ) {
			$filename = preg_replace( "#\x{00a0}#siu", ' ', $filename );
		}

		/**
		 * Filters the list of characters to remove from a filename.
		 *
		 * @since 2.8.0
		 *
		 * @param string[] $special_chars Array of characters to remove.
		 * @param string   $filename_raw  The original filename to be sanitized.
		 */

		$filename = str_replace( $special_chars, '-', $filename );
		$filename = str_replace( array( '%20', '+' ), '-', $filename );
		$filename = preg_replace( '/[\r\n\t -]+/', '-', $filename );
		$filename = trim( $filename, '.-_' );

		// Split the filename into a base and extension[s].
		$parts = explode( '.', $filename );

		// Return if only one extension.
		if ( count( $parts ) <= 2 ) {
			return $filename;
		}

		// Process multiple extensions.
		$filename  = array_shift( $parts );
		$extension = array_pop( $parts );

		$filename = trim( $filename, '.-_' );
		/*
		 * Loop over any intermediate extensions. Postfix them with a trailing underscore
		 * if they are a 2 - 5 character long alpha string not in the allowed extension list.
		 */
		foreach ( (array) $parts as $part ) {
			$filename .= '.' . GalleryPlatform::sanitize_title($part);
			if ( preg_match( '/^[a-zA-Z]{2,5}\d?$/', $part ) ) {
				$filename .= '_';
			}
		}
		$filename .= '.' . $extension;
		return $filename;
	}

	static function sanitize_title( $title, $fallback_title = '') {
		$title = GalleryPlatform::remove_accents($title);

		if ( '' === $title || false === $title )
			$title = $fallback_title;

		return $title;
	}

	/**
	 * @param string $component
	 * @param bool $forDirectory
	 * @param mixed $slugMode
	 * @return GalleryStatus|string
	 */
	public function legalizePathComponentHelper($component, $forDirectory=false, $slugMode='classic')
	{
		switch ($slugMode) {
			case 'modern':
				return self::legalizePathComponentWithSlug($component, $forDirectory);
			case 'classic':
				return self::legalizePathComponentClassic($component, $forDirectory);
			default:
				return GalleryCoreApi::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__,
				    "Unknown slug mode $slugMode.");
		}
	}
}
?>
