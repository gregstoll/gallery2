<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/watermark/classes/WatermarkHelper.class');

/**
 * WatermarkSiteAdmin controller tests
 * Also tests WatermarkHelper::fetchWatermarks()
 *
 * @package Watermark
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 20886 $
 */
class WatermarkSiteAdminControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_randomName;
	public $_expectedName;
	public $_beforeWatermarks;
	public $_afterWatermarks;

	public function __construct($methodName) {
		parent::__construct($methodName, 'watermark.WatermarkSiteAdmin');
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$watermark_module = new WatermarkModule();
		$this->_registerTestEventListener('GalleryEntity::delete', $watermark_module);

		$ret = $this->_markPluginParametersForCleanup('module', 'watermark');

		if ($ret) {
			return $ret;
		}

		$rand                = mt_rand();
		$this->_randomName   = 'phpunit_' . $rand . '.jpg';
		$this->_expectedName = 'phpunit_' . $rand . '_jpg';

		// Get the list of watermarks before, then after delete any that we created
		list($ret, $this->_beforeWatermarks) = WatermarkHelper::fetchWatermarks();

		if ($ret) {
			return $ret;
		}
	}

	public function tearDown() {
		$ret = GalleryCoreApi::releaseAllLocks();

		if ($ret) {
			return $ret;
		}
		// Get the list of watermarks before, then after delete any that we created
		list($ret, $this->_afterWatermarks) = WatermarkHelper::fetchWatermarks();

		if ($ret) {
			return $ret;
		}

		if (!empty($this->_afterWatermarks)) {
			foreach (array_keys($this->_afterWatermarks) as $id) {
				if (!isset($this->_beforeWatermarks[$id])) {
					$ret = GalleryCoreApi::deleteEntityById($id, 'WatermarkImage');

					if ($ret) {
						return $ret;
					}
				}
			}
		}

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testNoFile() {
		// No file
		GalleryUtilities::putRequestVariable('form[action][add]', '1');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'watermark.WatermarkSiteAdmin',
				),
				'status'   => array(
					'addError' => 1,
				),
				'error'    => array(),
			),
			$results,
			'No file'
		);
	}

	public function testAdd() {
		// Add
		GalleryUtilities::putRequestVariable('form[action][add]', '1');
		GalleryUtilities::putRequestVariable('form[name][1]', $this->_randomName);
		GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
		GalleryUtilities::putRequestVariable(
			'form[tmp_name][1]',
			GalleryCoreApi::getCodeBasePath('modules/core/test/data/test1.jpg')
		);

		$results    = $this->handleRequest();
		$counter    =& GalleryTestCase::getEntityCounter();
		$expectedId = $counter->getRecentEntityId('WatermarkImage');
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'        => 'core.SiteAdmin',
					'subView'     => 'watermark.WatermarkSiteAdminEdit',
					'watermarkId' => $expectedId,
				),
				'status'   => array(
					'add' => 1,
				),
				'error'    => array(),
			),
			$results,
			'Add'
		);

		// Verify
		list($ret, $map) = $this->_fetchWatermarkMapByFilename();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(isset($map[$this->_expectedName]), 'Watermark is missing');
	}

	public function testAddDuplicate() {
		for ($i = 0; $i < 2; $i++) {
			// Add
			GalleryUtilities::putRequestVariable('form[action][add]', '1');
			GalleryUtilities::putRequestVariable('form[name][1]', $this->_randomName);
			GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
			GalleryUtilities::putRequestVariable(
				'form[tmp_name][1]',
				GalleryCoreApi::getCodeBasePath('modules/core/test/data/test1.jpg')
			);

			$results    = $this->handleRequest();
			$counter    =& GalleryTestCase::getEntityCounter();
			$expectedId = $counter->getRecentEntityId('WatermarkImage');
			$this->assertEquals(
				array(
					'redirect' => array(
						'view'        => 'core.SiteAdmin',
						'subView'     => 'watermark.WatermarkSiteAdminEdit',
						'watermarkId' => $expectedId,
					),
					'status'   => array(
						'add' => 1,
					),
					'error'    => array(),
				),
				$results,
				'Add'
			);
		}

		// Verify
		list($ret, $map) = $this->_fetchWatermarkMapByFilename();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(isset($map[$this->_expectedName]), 'Watermark is missing');
		$this->assertTrue(isset($map['_' . $this->_expectedName]), 'Watermark 2 is missing');
	}

	public function testAddWrongMimeType() {
		// Add same name, browser doesn't send correct mime type
		GalleryUtilities::putRequestVariable('form[action][add]', '1');
		GalleryUtilities::putRequestVariable('form[name][1]', $this->_randomName);
		GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
		GalleryUtilities::putRequestVariable('form[type][1]', 'application/octet-stream');
		GalleryUtilities::putRequestVariable(
			'form[tmp_name][1]',
			GalleryCoreApi::getCodeBasePath('modules/core/test/data/test1.jpg')
		);

		$results    = $this->handleRequest();
		$counter    =& GalleryTestCase::getEntityCounter();
		$expectedId = $counter->getRecentEntityId('WatermarkImage');
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'        => 'core.SiteAdmin',
					'subView'     => 'watermark.WatermarkSiteAdminEdit',
					'watermarkId' => $expectedId,
				),
				'status'   => array(
					'add' => 1,
				),
				'error'    => array(),
			),
			$results,
			'Add same name, bad mime'
		);

		list($ret, $map) = $this->_fetchWatermarkMapByFilename();

		if ($ret) {
			return $ret;
		}

		if (GalleryUtilities::isA($map[$this->_expectedName], 'WatermarkImage')) {
			$this->assertEquals(
				'image/jpeg',
				$map[$this->_expectedName]->getMimeType(),
				'Watermark mime type incorrect'
			);
		} else {
			$this->assertTrue(false, 'Expected object is not a watermark!');
		}
	}

	public function testDelete() {
		// Create something to delete
		list($ret, $watermark) = $this->_createTestWatermark();

		if ($ret) {
			return $ret;
		}
		$idToDelete = $watermark->getId();

		// Delete it
		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('form[action][delete]', '1');
		GalleryUtilities::putRequestVariable('form[delete][watermarkId]', $idToDelete);
		GalleryCoreApi::setPluginParameter(
			'module',
			'watermark',
			'defaultWatermarkId',
			$idToDelete
		);
		GalleryCoreApi::setPluginParameter('module', 'watermark', 'forceDefaultWatermark', false);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'watermark.WatermarkSiteAdmin',
				),
				'status'   => array(
					'delete' => 1,
				),
				'error'    => array(),
			),
			$results,
			'Delete'
		);

		list($ret, $defaultWatermarkId) = GalleryCoreApi::getPluginParameter('module', 'watermark', 'defaultWatermarkId');

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(empty($defaultWatermarkId), 'The default Watermark Id was not removed');
		// Verify that it's gone
		$ret = $this->_verifyMissing($idToDelete);

		if ($ret) {
			return $ret;
		}
	}

	public function testDeleteForceDefault() {
		// Create something to delete
		list($ret, $watermark) = $this->_createTestWatermark();

		if ($ret) {
			return $ret;
		}
		$idToDelete = $watermark->getId();

		list($ret, $oldDefaultWatermarkId) = GalleryCoreApi::getPluginParameter('module', 'watermark', 'defaultWatermarkId');

		if ($ret) {
			return $ret;
		}

		if (empty($oldDefaultWatermarkId)) {
			// Ensure another watermark exists for selecting a new default
			list($ret, $watermark) = $this->_createTestWatermark();

			if ($ret) {
				return $ret;
			}
		}

		// Delete it
		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('form[action][delete]', '1');
		GalleryUtilities::putRequestVariable('form[delete][watermarkId]', $idToDelete);
		$ret = GalleryCoreApi::setPluginParameter(
			'module',
			'watermark',
			'defaultWatermarkId',
			$idToDelete
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::setPluginParameter(
			'module',
			'watermark',
			'forceDefaultWatermark',
			true
		);

		if ($ret) {
			return $ret;
		}

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'watermark.WatermarkSiteAdmin',
				),
				'status'   => array(
					'delete' => 1,
				),
				'error'    => array(),
			),
			$results,
			'Delete'
		);

		list($ret, $defaultWatermarkId) = GalleryCoreApi::getPluginParameter('module', 'watermark', 'defaultWatermarkId');

		if ($ret) {
			return $ret;
		}
		$this->assertTrue(!empty($defaultWatermarkId), 'Expected new default watermark');
		// If there are several watermarks, we can't be sure which one will be selected
		$this->assertTrue(
			(int)$defaultWatermarkId != (int)$idToDelete,
			'Unexpected default watermark id'
		);
		// Verify that it's gone
		$ret = $this->_verifyMissing($idToDelete);

		if ($ret) {
			return $ret;
		}
		list($ret, $forceDefaultWatermark) = GalleryCoreApi::getPluginParameter('module', 'watermark', 'forceDefaultWatermark');

		if ($ret) {
			return $ret;
		}
		$this->assertTrue(!empty($forceDefaultWatermark), '$forceDefaultWatermark is empty');
	}

	public function testDeleteInUse() {
		// Create something to delete
		list($ret, $watermark) = $this->_createTestWatermark();

		if ($ret) {
			return $ret;
		}
		$idToDelete = $watermark->getId();

		// Use this watermark
		list($ret, $item) = $this->_createRandomDataItem($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($item);
		list($ret, $derivative) = $this->_createDerivative(
			$item,
			$item->getId(),
			DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
			'',
			'test/file',
			array(
				'postFilterOperations' => 'composite|plugins_data/modules/watermark/' . $watermark->getName() . ',...',
			)
		);

		if ($ret) {
			return $ret;
		}

		// Try to delete it
		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('form[action][delete]', '1');
		GalleryUtilities::putRequestVariable('form[delete][watermarkId]', $idToDelete);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'        => 'core.SiteAdmin',
					'subView'     => 'watermark.ConfirmDelete',
					'watermarkId' => $idToDelete,
					'fromAdmin'   => 1,
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results,
			'Confirm Delete'
		);

		// Verify that it's NOT gone
		$ret = $this->_verifyEntity($watermark);

		if ($ret) {
			return $ret;
		}
	}

	public function testIllegalDelete() {
		// valid, but illegal
		GalleryUtilities::putRequestVariable('form[action][delete]', 1);
		GalleryUtilities::putRequestVariable('form[delete][watermarkId]', 1);

		$results = $this->handleRequest(ERROR_MISSING_OBJECT);

		// invalid & illegal
		GalleryUtilities::putRequestVariable('form[action][delete]', 1);
		GalleryUtilities::putRequestVariable('form[delete][watermarkId]', 123456789);

		$results = $this->handleRequest(ERROR_MISSING_OBJECT);
	}

	public function testAddMaliciousFile() {
		$rand         = mt_rand();
		$randomName   = 'phpunit_' . $rand . '.php';
		$expectedName = 'phpunit_' . $rand . '_php';
		$tempFile     = dirname(__DIR__) . '/data/SiteAdminControllerMaliciousFile.php';

		GalleryUtilities::putRequestVariable('form[action][add]', '1');
		GalleryUtilities::putRequestVariable('form[name][1]', $randomName);
		GalleryUtilities::putRequestVariable('form[type][1]', 'some/type');
		GalleryUtilities::putRequestVariable('form[tmp_name][1]', $tempFile);

		$results    = $this->handleRequest();
		$counter    =& GalleryTestCase::getEntityCounter();
		$expectedId = $counter->getRecentEntityId('WatermarkImage');
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'        => 'core.SiteAdmin',
					'subView'     => 'watermark.WatermarkSiteAdminEdit',
					'watermarkId' => $expectedId,
				),
				'status'   => array(
					'add' => 1,
				),
				'error'    => array(),
			),
			$results,
			'Add'
		);

		list($ret, $map) = $this->_fetchWatermarkMapByFilename();

		if ($ret) {
			return $ret;
		}
		$this->assertTrue(isset($map[$expectedName]), 'Watermark is missing');

		if (GalleryUtilities::isA($map[$expectedName], 'WatermarkImage')) {
			$this->assertEquals(
				'application/unknown',
				$map[$expectedName]->getMimeType(),
				'Watermark mime type incorrect'
			);

			list($ret, $path) = $map[$expectedName]->fetchPath();

			if ($ret) {
				return $ret;
			}

			// We're expecting the same name, but the . changed to _ in the file extension
			$this->assertEquals($expectedName, basename($path));
		} else {
			$this->assertTrue(false, 'Object is not a watermark');
		}
	}

	public function _fetchWatermarkMapByFilename() {
		list($ret, $watermarks) = WatermarkHelper::fetchWatermarks();

		if ($ret) {
			return array($this, null);
		}
		$results = array();

		foreach ($watermarks as $id => $watermark) {
			$results[$watermark->getFileName()] = $watermark;
		}

		return array(null, $results);
	}

	public function testSave() {
		GalleryUtilities::putRequestVariable('form[action][save]', '1');
		GalleryUtilities::putRequestVariable('form[allowUserWatermarks]', 1);
		GalleryUtilities::putRequestVariable('form[hotlinkWatermarkId]', 123);
		GalleryUtilities::putRequestVariable('form[defaultWatermarkId]', 456);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'watermark.WatermarkSiteAdmin',
				),
				'status'   => array(
					'savedSettings' => 1,
				),
				'error'    => array(),
			),
			$results
		);
	}

	public function testSaveMissingId() {
		GalleryUtilities::putRequestVariable('form[action][save]', '1');
		GalleryUtilities::putRequestVariable('form[forceDefaultWatermark]', 1);
		GalleryUtilities::putRequestVariable('form[hotlinkWatermarkId]', 123);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'watermark.WatermarkSiteAdmin',
				),
				'status'   => array(
					'missingDefault' => 1,
					'savedSettings'  => 1,
				),
				'error'    => array(),
			),
			$results
		);
	}

	public function _createTestWatermark() {
		$name = 'phpunit_' . mt_rand() . '.jpg';
		$form = array(
			'action'   => array('add', '1'),
			'name'     => array(
				'1' => $name,
			),
			'type'     => array(
				'1' => 'image/jpeg',
			),
			'tmp_name' => array(
				'1' => GalleryCoreApi::getCodeBasePath('modules/core/test/data/test1.jpg'),
			),
		);

		list($ret, $watermark) = WatermarkHelper::createWatermarkImage($form);

		if ($ret) {
			return array($ret, null);
		}

		return array(null, $watermark);
	}
}
