<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * RearrangeItems controller tests
 * @package Rearrange
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class RearrangeItemsControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_childIds;

	public function __construct($methodName) {
		parent::__construct($methodName, 'rearrange.RearrangeItems');
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Create a test album with 4 child items (1 with no permission) and 1 subalbum..
		list($ret, $this->_album) = $this->_createRandomAlbum(
			$this->_getRootId(),
			array(
				'orderBy' => 'orderWeight',
			)
		);

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_album);

		for ($i = 0; $i < 5; $i++) {
			if ($i == 3) {
				list($ret, $this->_child[$i]) = $this->_createRandomAlbum($this->_album->getId());

				if ($ret) {
					return $ret;
				}
			} else {
				list($ret, $this->_child[$i]) = $this->_createRandomDataItem($this->_album->getId());

				if ($ret) {
					return $ret;
				}

				if ($i == 1) {
					$ret = GalleryCoreApi::removeItemPermissions($this->_child[$i]->getId());

					if ($ret) {
						return $ret;
					}
				}
			}

			$ret = GalleryCoreApi::setItemOrderWeight($this->_child[$i]->getId(), $i * 1000);

			if ($ret) {
				return $ret;
			}
			$this->_childIds[] = $this->_child[$i]->getId();
		}
	}

	public function testReset() {
		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
		GalleryUtilities::putRequestVariable('form[action][reset]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'rearrange.RearrangeItems',
					'itemId'  => $this->_album->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	public function testRearrangeItems() {
		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
		GalleryUtilities::putRequestVariable('form[list]', '3,2,0,1');
		GalleryUtilities::putRequestVariable('form[action][save]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'rearrange.RearrangeItems',
					'itemId'  => $this->_album->getId(),
				),
				'status'   => array(
					'saved' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		list($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_album);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_childIds[4],
				$this->_childIds[3],
				$this->_childIds[0],
				$this->_childIds[2],
			),
			$childIds,
			'childIds'
		);

		list($ret, $orderWeights) = GalleryCoreApi::fetchItemOrderWeights($this->_childIds);

		if ($ret) {
			return $ret;
		}

		foreach ($this->_childIds as $id) {
			$weightList[] = $orderWeights[$id];
		}

		$this->assertEquals(
			array(3000, 1000, 4000, 2000, 0),
			$weightList,
			'orderWeights'
		);
	}

	public function testBadList() {
		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
		GalleryUtilities::putRequestVariable('form[list]', '1,4,2,3,0');
		GalleryUtilities::putRequestVariable('form[action][save]', 1);

		$results = $this->handleRequest(ERROR_BAD_PARAMETER);

		list($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_album);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_childIds[0],
				$this->_childIds[2],
				$this->_childIds[3],
				$this->_childIds[4],
			),
			$childIds
		);
	}
}
