<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * DynamicAlbumSiteAdmin controller tests
 *
 * @package DynamicAlbum
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class DynamicAlbumSiteAdminControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_defaultThemeId;

	public function __construct($methodName) {
		parent::__construct($methodName, 'dynamicalbum.DynamicAlbumSiteAdmin');
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$ret = $this->_markPluginParametersForCleanup('module', 'dynamicalbum');

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_entity) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_entity);

		foreach (array(
			'themeId'         => 'dynamicalbumTest',
			'themeSettingsId' => $this->_entity->getId(),
		) as $key => $value) {
			$ret = GalleryCoreApi::setPluginParameter('module', 'dynamicalbum', $key, $value);

			if ($ret) {
				return $ret;
			}
		}

		list($ret, $this->_defaultThemeId) = GalleryCoreApi::getPluginParameter('module', 'core', 'default.theme');

		if ($ret) {
			return $ret;
		}
	}

	public function testDynamicAlbumSiteAdminControllerReset() {
		GalleryUtilities::putRequestVariable('form[action][reset]', '1');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dynamicalbum.DynamicAlbumSiteAdmin',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	public function testDynamicAlbumSiteAdminControllerBadInput() {
		GalleryUtilities::putRequestVariable('form[action][save]', '1');
		GalleryUtilities::putRequestVariable('form[size_date]', '');
		GalleryUtilities::putRequestVariable('form[size_views]', 'abc');
		GalleryUtilities::putRequestVariable('form[size_random]', '12x');
		GalleryUtilities::putRequestVariable('form[type_date]', 'all');
		GalleryUtilities::putRequestVariable('form[type_views]', 'all');
		GalleryUtilities::putRequestVariable('form[type_random]', 'all');
		GalleryUtilities::putRequestVariable('form[description_date]', '');
		GalleryUtilities::putRequestVariable('form[description_views]', '');
		GalleryUtilities::putRequestVariable('form[description_random]', '');
		GalleryUtilities::putRequestVariable('form[themeId]', 'dynamicalbumTest');
		GalleryUtilities::putRequestVariable('form[currentThemeId]', 'dynamicalbumTest');
		GalleryUtilities::putRequestVariable('form[key][perPage]', 'a few');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dynamicalbum.DynamicAlbumSiteAdmin',
				),
				'status'   => array(),
				'error'    => array(
					'form[error][size_date]',
					'form[error][size_views]',
					'form[error][size_random]',
				),
			),
			$results
		);

		list($ret, $themeParam) = GalleryCoreApi::getPluginParameter(
			'theme',
			'dynamicalbumTest',
			'perPage',
			$this->_entity->getId()
		);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(null, $themeParam, 'Theme param');
	}

	public function testDynamicAlbumSiteAdminControllerSave() {
		GalleryUtilities::putRequestVariable('form[action][save]', '1');
		GalleryUtilities::putRequestVariable('form[size_date]', '20');
		GalleryUtilities::putRequestVariable('form[size_views]', '30');
		GalleryUtilities::putRequestVariable('form[size_random]', '0');
		GalleryUtilities::putRequestVariable('form[type_date]', 'all');
		GalleryUtilities::putRequestVariable('form[type_views]', 'data');
		GalleryUtilities::putRequestVariable('form[type_random]', 'album');
		GalleryUtilities::putRequestVariable('form[description_date]', '');
		GalleryUtilities::putRequestVariable('form[description_views]', 'most viewed stuff');
		GalleryUtilities::putRequestVariable('form[description_random]', 'random stuff');
		GalleryUtilities::putRequestVariable('form[themeId]', $this->_defaultThemeId);
		GalleryUtilities::putRequestVariable('form[currentThemeId]', 'dynamicalbumTest');
		GalleryUtilities::putRequestVariable('form[key][perPage]', '6');

		list($ret, $core) = GalleryCoreApi::loadPlugin('module', 'core');

		if ($ret) {
			return $ret;
		}

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'dynamicalbum.DynamicAlbumSiteAdmin',
				),
				'status'   => array(
					'statusMessage' => $core->translate('Successfully saved theme settings'),
					'saved'         => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Verify the information in the DB
		list($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'dynamicalbum');

		if ($ret) {
			return $ret;
		}

		foreach ($params as $key => $value) {
			if ($key[0] == '_') {
				unset($params[$key]);
			}
		}
		ksort($params);
		$this->assertEquals(
			array(
				'description.date'   => '',
				'description.random' => 'random stuff',
				'description.views'  => 'most viewed stuff',
				'itemlink.date'      => '0',
				'itemlink.random'    => '0',
				'itemlink.views'     => '0',
				'size.date'          => '20',
				'size.random'        => '0',
				'size.views'         => '30',
				'type.date'          => 'all',
				'type.random'        => 'album',
				'type.views'         => 'data',
				'themeId'            => $this->_defaultThemeId,
				'themeSettingsId'    => $this->_entity->getId(),
			),
			$params,
			'Verify DB Data'
		);

		list($ret, $themeParam) = GalleryCoreApi::getPluginParameter(
			'theme',
			'dynamicalbumTest',
			'perPage',
			$this->_entity->getId()
		);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals('6', $themeParam, 'Theme param');
	}
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryTheme.class');

/**
 * Test theme
 */
class DynamicAlbumTestTheme extends GalleryTheme {
	public function __construct() {
		$this->setId('dynamicalbumTest');
		$this->setStandardSettings(
			array(
				'perPage' => 9,
			)
		);
	}
}
