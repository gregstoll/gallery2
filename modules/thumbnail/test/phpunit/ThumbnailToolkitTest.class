<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/thumbnail/classes/ThumbnailHelper.class');

/**
 * ThumbnailToolkit tests
 * @package Thumbnail
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class ThumbnailToolkitTest extends GalleryTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_itemId;

	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $module) = GalleryCoreApi::loadPlugin('module', 'thumbnail');

		if ($ret || !isset($module)) {
			return $ret;
		}
		list($ret, $this->_toolkit) = GalleryCoreApi::newFactoryInstance('GalleryToolkit', 'ThumbnailToolkit');

		if ($ret || !isset($this->_toolkit)) {
			return $ret;
		}

		// Register high priority thumbnail operation for image/jpeg
		$ret = GalleryCoreApi::registerFactoryImplementation(
			'GalleryToolkit',
			'ThumbnailTestToolkit',
			'ThumbnailTestToolkit',
			'modules/thumbnail/test/phpunit/ThumbnailToolkitTest.class',
			'thumbnailTest',
			null
		);

		if ($ret) {
			return $ret;
		}
		$this->_markToolkitForCleanup('ThumbnailTestToolkit');

		$ret = GalleryCoreApi::registerToolkitOperation(
			'ThumbnailTestToolkit',
			array('image/jpeg'),
			'thumbnail',
			array(
				array(
					'type'        => 'int',
					'description' => 'foo',
				),
				array(
					'type'        => 'int',
					'description' => 'foo',
				),
			),
			'bar',
			null,
			1
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_itemId) = ThumbnailHelper::addItem(
			'test/fakemime',
			null,
			'unittest.jpg',
			__DIR__ . '/../../images/G2video.jpg',
			'image/jpeg'
		);

		if ($ret || !isset($this->_itemId)) {
			return $ret;
		}
	}

	public function tearDown() {
		global $gallery;
		$ret = GalleryCoreApi::deleteEntityById($this->_itemId, 'ThumbnailImage');

		if ($ret) {
			$this->failWithStatus($ret);
		}
		$platform =& $gallery->getPlatform();

		if (!$platform->unlink($gallery->getConfig('data.gallery.base') . '/unittest.jpg')) {
			$this->assertTrue(false, 'Unlink failed');
		}
		$ret = GalleryCoreApi::unregisterToolkitOperation(
			'Thumbnail',
			'thumbnail',
			array('test/fakemime', 'image/jpeg')
		);

		if ($ret) {
			$this->failWithStatus($ret);
		}

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testToolkit() {
		global $gallery;

		list($ret, $outputMimeType) = $this->_toolkit->performOperation(
			'test/badmime',
			'thumbnail',
			__DIR__ . '/x',
			__DIR__ . '/y',
			array(150)
		);

		if ($ret) {
			$this->assertEquals(
				GALLERY_ERROR | ERROR_UNSUPPORTED_OPERATION,
				$ret->getErrorCode(),
				'Error expected for bad mime'
			);
		} else {
			$this->assertTrue(false, 'Error expected for bad mime');
		}

		list($ret, $outputMimeType) = $this->_toolkit->performOperation(
			'test/fakemime',
			'bad-operation',
			__DIR__ . '/x',
			__DIR__ . '/y',
			array(150)
		);

		if ($ret) {
			$this->assertEquals(
				GALLERY_ERROR | ERROR_UNSUPPORTED_OPERATION,
				$ret->getErrorCode(),
				'Error expected for bad operation'
			);
		} else {
			$this->assertTrue(false, 'Error expected for bad operation');
		}

		$platform      =& $gallery->getPlatform();
		$dummyPlatform = new ThumbnailToolkitTestDummyPlatform();
		$gallery->setPlatform($dummyPlatform);

		list($ret, $outputMimeType) = $this->_toolkit->performOperation(
			'test/fakemime',
			'thumbnail',
			__DIR__ . '/x',
			$gallery->getConfig('data.gallery.base') . '/unittest.jpg',
			array(150)
		);

		if ($ret) {
			$this->assertEquals(
				GALLERY_ERROR | ERROR_PLATFORM_FAILURE,
				$ret->getErrorCode(),
				'Error expected for copy failure'
			);
		} else {
			$this->assertTrue(false, 'Error expected for copy failure');
		}

		$gallery->setPlatform($platform);

		list($ret, $outputMimeType) = $this->_toolkit->performOperation(
			'test/fakemime',
			'thumbnail',
			__DIR__ . '/x',
			$gallery->getConfig('data.gallery.base') . '/unittest.jpg',
			array(150)
		);

		if ($ret) {
			return $ret;
		}
	}

	public function testRecursiveToolkitOperationIsBlocked() {
		global $gallery;

		// First ensure ThumbnailToolkit is also the primary toolkit for jpg thumbnail operations
		$ret = GalleryCoreApi::unregisterToolkitOperation('ThumbnailTestToolkit', 'thumbnail');

		if ($ret) {
			return $ret;
		}

		$fileName                = realpath(__DIR__ . '/../../images/G2video.jpg');
		list($ret, $jpegImageId) = ThumbnailHelper::addItem(
			'image/jpeg',
			null,
			$fileName,
			$fileName,
			'image/jpeg',
			array(
				'width'  => 400,
				'height' => 352,
			)
		);

		if ($ret) {
			return $ret;
		}
		list($ret, $jpegImage) = GalleryCoreApi::loadEntitiesById($jpegImageId, 'ThumbnailImage');

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($jpegImage);

		$ret = GalleryCoreApi::updateMapEntry(
			'GalleryToolkitOperationMimeTypeMap',
			array(
				'toolkitId'     => 'Thumbnail',
				'operationName' => 'thumbnail',
				'mimeType'      => 'image/jpeg',
			),
			array(
				'priority' => 1,
			)
		);

		if ($ret) {
			return $ret;
		}

		// Verify precondition
		list($ret, $toolkit) = GalleryCoreApi::getToolkitByOperation('image/jpeg', 'thumbnail');

		if ($ret) {
			return $ret;
		}

		if (isset($toolkit)) {
			$this->assertEquals(
				'thumbnailtoolkit',
				GalleryUtilities::strToLower(get_class($toolkit)),
				'wrong toolkit'
			);
		} else {
			$this->fail('Could not successfully register the Thumbnail tookit for image/jpeg');
		}

		/*
		 * Call the toolkit for a mime-type thumbnail operation and ensure it doesn't call itself
		 * again for the thumbnail operation.
		 */
		list($ret, $outputMimeType) = $this->_toolkit->performOperation(
			'test/fakemime',
			'thumbnail',
			__DIR__ . '/x',
			$gallery->getConfig('data.gallery.base') . '/unittest.jpg',
			array(150)
		);

		if ($ret && $ret->getErrorCode() & ERROR_UNSUPPORTED_OPERATION) {
			// Error expected for bad operation
		} elseif ($ret) {
			return $ret;
		} else {
			$this->assertTrue(false, 'Error expected for bad operation');
		}
	}
}

/**
 * Test platform
 */
class ThumbnailToolkitTestDummyPlatform {
	public function copy($source, $dest) {
		// Simulate copy failure
		return false;
	}

	public function getDirectorySeparator() {
		return DIRECTORY_SEPARATOR;
	}
}

/**
 * Test toolkit
 */
class ThumbnailTestToolkit {
	public function performOperation(
		$mimeType,
		$operationName,
		$sourceFilename,
		$destFilename,
		$parameters,
		$context = array()
	) {
		// Do nothing
		return array(null, $mimeType, $context);
	}
}
