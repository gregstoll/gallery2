<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/thumbnail/classes/ThumbnailImage.class');
GalleryCoreApi::requireOnce('modules/thumbnail/classes/ThumbnailHelper.class');

/**
 * Test ThumbnailImage functionality
 * @package Thumbnail
 * @subpackage PHPUnit
 * @author Andy Staudacher <ast@gmx.ch>
 * @version $Revision: 17580 $
 */
class ThumbnailImageTest extends GalleryTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_customThumbnail;
	public $_mimeTypeThumbnail;

	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$iterations = 2;
		$parentId   = $this->_getRootId();

		for ($i = 0; $i < $iterations; $i++) {
			$gallery->guaranteeTimeLimit(5);

			list($ret, $this->_albums[$i]) = $this->_createRandomAlbum($parentId);

			if ($ret) {
				return $ret;
			}

			$parentId = $this->_albums[$i]->getId();
		}

		// delete the top album
		$this->_markForCleanup($this->_albums[0]);

		list($ret, $this->_item) = $this->_createRandomDataItem($parentId);

		if ($ret) {
			return $ret;
		}

		// Add a custom thumbnail for the data item.
		list($ret, $customThumbId) = ThumbnailHelper::addItem(
			null,
			$this->_item->getId(),
			'G2audio.jpg',
			__DIR__ . '/../../images/' . 'G2audio.jpg',
			'image/jpeg',
			array(
				'width'  => 400,
				'height' => 352,
			)
		);

		if ($ret) {
			return $ret;
		}

		// Use existing mime-type thumbnail for tests.
		list($ret, $mimeTypeMap) = ThumbnailHelper::fetchMimeTypeMap();

		if ($ret) {
			return $ret;
		}

		list($ret, $thumbnailImages) = GalleryCoreApi::loadEntitiesById(
			array($customThumbId, $mimeTypeMap['audio/mpeg']),
			'ThumbnailImage'
		);

		if ($ret) {
			return $ret;
		}
		$this->_customThumbnail   = array_shift($thumbnailImages);
		$this->_mimeTypeThumbnail = array_shift($thumbnailImages);
	}

	public function testFetchLogicalPathForCustomThumbnail() {
		list($ret, $logicalPath) = $this->_customThumbnail->fetchLogicalPath();

		if ($ret) {
			return $ret;
		}
		$id = (string)$this->_customThumbnail->getid();

		$this->assertEquals(
			sprintf(
				'%s/%s',
				$id[0],
				$id . '.jpg'
			),
			$logicalPath
		);
	}

	public function testMimeTypeThumbnailHasThumbContainerAsParent() {
		list($ret, $thumbnailContainerId) = GalleryCoreApi::getPluginParameter('module', 'thumbnail', 'id.container');

		if ($ret) {
			return $ret;
		}
		$this->assertEquals((int)$thumbnailContainerId, $this->_mimeTypeThumbnail->getParentId());
	}

	public function testCustomThumbnailHasItemAsParent() {
		$this->assertEquals($this->_item->getId(), $this->_customThumbnail->getParentId());
	}

	public function testFetchLogicalPathForMimeTypeThumbnail() {
		list($ret, $logicalPath) = $this->_mimeTypeThumbnail->fetchLogicalPath();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals($this->_mimeTypeThumbnail->getPathComponent(), $logicalPath);
	}

	public function testCustomThumbForRootAlbum() {
		$existingPathComponent   = $this->_mimeTypeThumbnail->getPathComponent();
		list($ret, $rootAlbumId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');

		if ($ret) {
			return $ret;
		}
		$filename                = __DIR__ . '/../../images/G2audio.jpg';
		list($ret, $thumbnailId) = ThumbnailHelper::addItem(
			null,
			$rootAlbumId,
			$existingPathComponent,
			$filename,
			'image/jpeg'
		);

		if ($ret) {
			return $ret;
		}
		list($ret, $thumbnail) = GalleryCoreApi::loadEntitiesById($thumbnailId, 'ThumbnailImage');

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($thumbnail);

		// Verify that the new thumbnail exists and has the correct attributes.
		list($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($rootAlbumId);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals($thumbnailId, $thumbnailImage->getId(), 'id');
		list($ret, $logicalPath) = $thumbnail->fetchLogicalPath();

		if ($ret) {
			return $ret;
		}
		list($ret, $path) = $thumbnail->fetchPath();

		if ($ret) {
			return $ret;
		}
		list($ret, $existingPath) = $this->_mimeTypeThumbnail->fetchPath();

		if ($ret) {
			return $ret;
		}
		$this->assertTrue($path != $existingPath, 'path collision');
	}
}
