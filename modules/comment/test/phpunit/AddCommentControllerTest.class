<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/comment/classes/GalleryCommentHelper.class');

/**
 * AddComment controller tests
 * @package Comment
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class AddCommentControllerTest extends GalleryControllerTestCase {
	/* deprecated dynamic properties in php 8.2 */
	public $_saveMarkup;
	public $_startTime;

	public function __construct($methodName) {
		parent::__construct($methodName, 'comment.AddComment');
	}

	public function setUp($x1 = null) {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_item) = $this->_createRandomDataItem($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_item);

		list($ret, $this->_saveMarkup) = GalleryCoreApi::getPluginParameter('module', 'core', 'misc.markup');

		if ($ret) {
			return $ret;
		}
		$ret = $this->_markPluginParametersForCleanup('module', 'comment');

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::setPluginParameter('module', 'comment', 'validation.level', 'OFF');

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::setPluginParameter('module', 'comment', 'comments.moderate', 0);

		if ($ret) {
			return $ret;
		}
		$this->_startTime = time();
	}

	public function tearDown() {
		$ret = GalleryCoreApi::setPluginParameter(
			'module',
			'core',
			'misc.markup',
			$this->_saveMarkup
		);

		if ($ret) {
			$this->failWithStatus($ret);
		}

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testAddComment() {
		global $gallery;

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[subject]', 'this is a subject');
		GalleryUtilities::putRequestVariable('form[comment]', 'this is a comment');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Grab the comment and take a look at it
		list($ret, $comments) = GalleryCommentHelper::fetchComments(
			$this->_item->getId()
		);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(1, count($comments));

		if (count($comments) == 1) {
			$this->assertTrue(GalleryUtilities::isA($comments[0], 'GalleryComment'));
			$this->assertEquals('this is a comment', $comments[0]->getComment());
			$this->assertEquals('this is a subject', $comments[0]->getSubject());
			$this->assertEquals($gallery->getActiveUserId(), $comments[0]->getCommenterId());
			$this->assertEquals($_SERVER['REMOTE_ADDR'], $comments[0]->getHost());
			$this->assertTrue(
				$comments[0]->getDate() >= $this->_startTime &&
				$comments[0]->getDate() <= time(),
				'date'
			);
		}
	}

	public function testAddCommentFlood() {
		global $gallery;

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[subject]', 'this is a subject');
		GalleryUtilities::putRequestVariable('form[comment]', 'this is a comment');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results,
			'First Comment'
		);

		// Perform the second request and verify that we prevented flooding
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'comment.AddComment',
				),
				'status'   => array(),
				'error'    => array('form[error][comment][flood]'),
			),
			$results,
			'Flood Comment'
		);
	}

	public function testAddCommentDifferentIp() {
		global $gallery;

		// Use valid inputs
		$_SERVER['REMOTE_ADDR'] = '127.0.0.1';
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[subject]', 'this is a subject');
		GalleryUtilities::putRequestVariable('form[comment]', 'this is a comment');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results,
			'First Comment'
		);

		// Perform the second request from different IP and verify that we succeeded
		$_SERVER['REMOTE_ADDR'] = '1.2.3.4';
		$results                = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results,
			'Second Comment'
		);
	}

	public function testAddCommentGuest() {
		global $gallery;

		list($ret, $everybodyGroupId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addGroupPermission(
			$this->_item->getId(),
			$everybodyGroupId,
			'comment.all'
		);

		if ($ret) {
			return $ret;
		}

		$this->_becomeGuestUser();

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[subject]', 'this is a subject');
		GalleryUtilities::putRequestVariable('form[comment]', 'this is a comment');
		GalleryUtilities::putRequestVariable('form[author]', 'this is an author');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Grab the comment and take a look at it
		list($ret, $comments) = GalleryCommentHelper::fetchComments($this->_item->getId());

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(1, count($comments));

		if (count($comments) == 1) {
			$this->assertTrue(GalleryUtilities::isA($comments[0], 'GalleryComment'));
			$this->assertEquals('this is a comment', $comments[0]->getComment());
			$this->assertEquals('this is a subject', $comments[0]->getSubject());
			$this->assertEquals('this is an author', $comments[0]->getAuthor());
			$this->assertEquals($gallery->getActiveUserId(), $comments[0]->getCommenterId());
			$this->assertEquals($_SERVER['REMOTE_ADDR'], $comments[0]->getHost());
			$this->assertTrue(
				$comments[0]->getDate() >= $this->_startTime &&
				$comments[0]->getDate() <= time(),
				'date'
			);
		}
	}

	public function testPreviewComment() {
		global $gallery;

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][preview]', 1);
		GalleryUtilities::putRequestVariable('form[comment]', 'this is a comment');
		GalleryUtilities::putRequestVariable('form[subject]', 'this is a subject');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'comment.AddComment',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	public function testPreviewCommentGuest() {
		global $gallery;

		list($ret, $everybodyGroupId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addGroupPermission(
			$this->_item->getId(),
			$everybodyGroupId,
			'comment.all'
		);

		if ($ret) {
			return $ret;
		}

		$this->_becomeGuestUser();

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][preview]', 1);
		GalleryUtilities::putRequestVariable('form[comment]', 'this is a comment');
		GalleryUtilities::putRequestVariable('form[subject]', 'this is a subject');
		GalleryUtilities::putRequestVariable('form[author]', 'this is an author');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'comment.AddComment',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	public function testAddEmptyComment() {
		global $gallery;

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[comment]', '');
		GalleryUtilities::putRequestVariable('form[subject]', '');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'comment.AddComment',
				),
				'status'   => array(),
				'error'    => array('form[error][comment][missing]'),
			),
			$results
		);

		// Verify that there are no comments
		list($ret, $counts) = GalleryCommentHelper::fetchCommentCounts(array($this->_item->getId()));

		if ($ret) {
			return $ret;
		}
		$this->assertTrue(empty($counts[$this->_item->getId()]));
	}

	public function testPreviewEmptyComment() {
		global $gallery;

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[comment]', '');
		GalleryUtilities::putRequestVariable('form[subject]', '');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'comment.AddComment',
				),
				'status'   => array(),
				'error'    => array('form[error][comment][missing]'),
			),
			$results
		);

		// Verify that there are no comments
		list($ret, $counts) = GalleryCommentHelper::fetchCommentCounts(array($this->_item->getId()));

		if ($ret) {
			return $ret;
		}
		$this->assertTrue(empty($counts[$this->_item->getId()]));
	}

	public function testAddMaliciousComment() {
		global $gallery;
		$gallery->_phpVm = new CommentTestPhpVm();
		$ret             = GalleryCoreApi::setPluginParameter('module', 'core', 'misc.markup', 'bbcode');

		if ($ret) {
			return $ret;
		}

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable(
			'form[subject]',
			'this is a subject with <script>evilness</script> in it.'
		);
		GalleryUtilities::putRequestVariable(
			'form[comment]',
			'this is a comment with <div onmouseover="alert(1)">evilness</div> in it.'
		);
		GalleryUtilities::putRequestVariable(
			'form[author]',
			'this is an author with <script>evilness</script> in it.'
		);

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Post the same comment but with html markup mode active
		$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'misc.markup', 'html');

		if ($ret) {
			return $ret;
		}
		sleep(1);
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Grab the comment and take a look at it
		list($ret, $comments) = GalleryCommentHelper::fetchComments($this->_item->getId());

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(2, count($comments));

		if (!GalleryUtilities::isA($comments[0], 'GalleryComment')) {
			return $this->fail('result is not a GalleryComment!');
		}

		$this->assertEquals(
			'this is a subject with &lt;script&gt;evilness&lt;/script&gt; in it.',
			$comments[0]->getSubject(),
			'subject'
		);
		$this->assertEquals(
			'this is a comment with '
			. '&lt;div onmouseover=&quot;alert(1)&quot;&gt;evilness&lt;/div&gt; in it.',
			$comments[0]->getComment(),
			'comment'
		);
		$this->assertEquals('', $comments[0]->getAuthor(), 'author');
		$this->assertEquals($gallery->getActiveUserId(), $comments[0]->getCommenterId(), 'user 1');
		$this->assertEquals($_SERVER['REMOTE_ADDR'], $comments[0]->getHost(), 'host 1');

		if (!$comments[1]) {
			return $this->fail('second result is missing!');
		}
		$this->assertEquals(
			'this is a subject with  in it.',
			$comments[1]->getSubject(),
			'html subject'
		);
		$this->assertEquals(
			'this is a comment with &lt;div&gt;evilness&lt;/div&gt; in it.',
			$comments[1]->getComment(),
			'html comment'
		);
		$this->assertEquals('', $comments[1]->getAuthor(), 'html author');
		$this->assertEquals($gallery->getActiveUserId(), $comments[1]->getCommenterId(), 'user 2');
		$this->assertEquals($_SERVER['REMOTE_ADDR'], $comments[1]->getHost(), 'host 2');
	}

	public function testAddMaliciousCommentGuest() {
		global $gallery;

		list($ret, $everybodyGroupId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addGroupPermission(
			$this->_item->getId(),
			$everybodyGroupId,
			'comment.all'
		);

		if ($ret) {
			return $ret;
		}

		$this->_becomeGuestUser();

		$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'misc.markup', 'bbcode');

		if ($ret) {
			return $ret;
		}

		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable(
			'form[subject]',
			'this is a subject with <script>evilness</script> in it.'
		);
		GalleryUtilities::putRequestVariable(
			'form[comment]',
			'this is a comment with <div onmouseover="alert(1)">evilness</div> in it.'
		);
		GalleryUtilities::putRequestVariable(
			'form[author]',
			'this is an author with <script>evilness</script> in it.'
		);

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Grab the comment and take a look at it
		list($ret, $comments) = GalleryCommentHelper::fetchComments($this->_item->getId());

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(1, count($comments));

		if (!GalleryUtilities::isA($comments[0], 'GalleryComment')) {
			return $this->fail('result is not a GalleryComment!');
		}

		if (!empty($comments)) {
			$this->assertEquals(
				'this is a subject with &lt;script&gt;evilness&lt;/script&gt; in it.',
				$comments[0]->getSubject(),
				'subject'
			);
			$this->assertEquals(
				'this is a comment with '
				. '&lt;div onmouseover=&quot;alert(1)&quot;&gt;evilness&lt;/div&gt; in it.',
				$comments[0]->getComment(),
				'comment'
			);
			$this->assertEquals(
				'this is an author with &lt;script&gt;evilness&lt;/script&gt; in it.',
				$comments[0]->getAuthor(),
				'author'
			);
			$this->assertEquals(
				$gallery->getActiveUserId(),
				$comments[0]->getCommenterId(),
				'user 1'
			);
			$this->assertEquals($_SERVER['REMOTE_ADDR'], $comments[0]->getHost(), 'host 1');
			$this->assertTrue(
				$comments[0]->getDate() >= $this->_startTime
				&& $comments[0]->getDate() <= time(),
				'time 1'
			);
		}
	}

	public function testCancelComment() {
		// Use valid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
		GalleryUtilities::putRequestVariable('form[comment]', 'this is a comment');

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'core.ShowItem',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	public function testValidationPlugin() {
		$ret = GalleryCoreApi::setPluginParameter('module', 'comment', 'validation.level', 'HIGH');

		if ($ret) {
			return $ret;
		}

		$this->_controller->_pluginInstances = array(new AddCommentTestValidation());

		global $gallery;
		$this->_becomeGuestUser();
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$gallery->getActiveUserId(),
			'comment.add'
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[subject]', 'test');
		GalleryUtilities::putRequestVariable('form[comment]', 'test');

		// Perform the request and verify validation plugin got error
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'comment.AddComment',
				),
				'status'   => array(),
				'error'    => array('form[error][AddCommentTestValidation]'),
			),
			$results
		);
	}

	public function testValidationAlternateGuest() {
		$ret = GalleryCoreApi::setPluginParameter('module', 'comment', 'validation.level', 'HIGH');

		if ($ret) {
			return $ret;
		}

		$this->_controller->_pluginInstances = array(new AddCommentTestValidation());

		global $gallery;
		$gallery->setConfig('anonymousUserId', $gallery->getActiveUserId());

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[subject]', 'test');
		GalleryUtilities::putRequestVariable('form[comment]', 'test');

		// Perform the request and verify validation plugin got error
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'comment.AddComment',
				),
				'status'   => array(),
				'error'    => array('form[error][AddCommentTestValidation]'),
			),
			$results
		);
	}

	public function testValidationPluginOff() {
		$this->_controller->_pluginInstances = array(new AddCommentTestValidation());

		global $gallery;
		$this->_becomeGuestUser();
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$gallery->getActiveUserId(),
			'comment.add'
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[subject]', 'test');
		GalleryUtilities::putRequestVariable('form[comment]', 'test');

		// Perform the request and verify comment was added (validation plugin skipped)
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'comment.CommentChangeConfirmation',
					'itemId' => $this->_item->getId(),
				),
				'status'   => array(
					'added' => 1,
				),
				'error'    => array(),
			),
			$results
		);

		// Grab the comment and take a look at it
		list($ret, $comments) = GalleryCommentHelper::fetchComments($this->_item->getId());

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(1, count($comments));

		if (count($comments) == 1) {
			$this->assertTrue(GalleryUtilities::isA($comments[0], 'GalleryComment'));
			$this->assertEquals('test', $comments[0]->getComment());
			$this->assertEquals('test', $comments[0]->getSubject());
			$this->assertEquals($gallery->getActiveUserId(), $comments[0]->getCommenterId());
			$this->assertEquals($_SERVER['REMOTE_ADDR'], $comments[0]->getHost());
			$this->assertTrue(
				$comments[0]->getDate() >= $this->_startTime &&
				$comments[0]->getDate() <= time(),
				'date'
			);
		}
	}

	public function testAddCommentRequiresViewPermission() {
		global $gallery;

		// Use valid inputs
		$itemId = $this->_item->getId();
		GalleryUtilities::putRequestVariable('itemId', $itemId);
		GalleryUtilities::putRequestVariable('form[action][add]', 1);
		GalleryUtilities::putRequestVariable('form[subject]', 'this is a subject');
		GalleryUtilities::putRequestVariable('form[comment]', 'this is a comment');

		$ret = GalleryCoreApi::removeItemPermissions($itemId);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addUserPermission($itemId, $gallery->getActiveUserId(), 'comment.add');

		if ($ret) {
			return $ret;
		}

		// Perform the request and verify that we fail
		$results = $this->handleRequest(ERROR_MISSING_OBJECT);
		$this->assertEquals(null, $results, 'controller results');

		list($ret, $comments) = GalleryCommentHelper::fetchComments($this->_item->getId());

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(array(), $comments, 'no comments');
	}
}

/**
 * Mock PHP VM
 */
class CommentTestPhpVm {
	public function time() {
		list($ret, $commentTime) = GalleryCommentHelper::getLatestCommentTime(
			GalleryUtilities::getRemoteHostAddress()
		);

		if ($ret) {
			return $ret;
		}
		$commentTime += 1000;

		return $commentTime;
	}
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryValidationPlugin.class');
class AddCommentTestValidation extends GalleryValidationPlugin {
	public function performValidation(&$form, $options = array()) {
		return array(
			null,
			array('form[error][AddCommentTestValidation]'),
			false,
		);
	}
}
